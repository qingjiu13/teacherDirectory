{"version":3,"file":"app.js","sources":["main.js"],"sourcesContent":["import App from './App'\r\nimport { createSSRApp } from 'vue'\r\nimport store from './store'\r\n\r\nimport { installDebugPlugin, installDebugForVue3 } from './utils/vuex-debug'\r\nimport { injectStoreSafety, checkStoreAvailability } from './store/inject-checker'\r\nimport LoadingPlugin from './components/loading'\r\nimport { useGlobalAnimationState } from './components/loading/useAnimationCache.js'\r\n\r\n// 提前初始化全局动画状态\r\ntry {\r\n  const { globalState, getGlobalStats, isAllAnimationsLoaded } = useGlobalAnimationState();\r\n  \r\n  // 尝试初始化全局对象\r\n  if (typeof getApp === 'function') {\r\n    try {\r\n      const app = getApp();\r\n      if (app) {\r\n        app.globalData = app.globalData || {};\r\n        \r\n        // 预先创建$loading对象的基本结构\r\n        if (!app.globalData.$loading) {\r\n          app.globalData.$loading = {\r\n            show: () => console.log('Loading组件尚未挂载，show方法未生效'),\r\n            hide: () => console.log('Loading组件尚未挂载，hide方法未生效'),\r\n            preload: () => console.log('Loading组件尚未挂载，preload方法未生效'),\r\n            isPreloaded: { value: false },\r\n            getStatus: () => ({ allLoaded: false, stats: null }),\r\n            globalState\r\n          };\r\n        }\r\n        \r\n        console.log('全局动画状态已提前初始化');\r\n      }\r\n    } catch (e) {\r\n      console.log('全局App尚未初始化，将在createApp中完成初始化');\r\n    }\r\n  }\r\n} catch (err) {\r\n  console.error('提前初始化全局动画状态失败:', err);\r\n}\r\n\r\n/**\r\n * 预加载函数，用于在页面渲染前预加载资源\r\n */\r\nasync function preloadResources() {\r\n  try {\r\n    // 检查全局app是否已初始化\r\n    const globalApp = getApp()\r\n    if (globalApp?.globalData?.$loading?.preload) {\r\n      console.log('通过全局变量预加载动画资源')\r\n      await globalApp.globalData.$loading.preload()\r\n      \r\n      // 挂载全局状态获取方法\r\n      if (!globalApp.globalData.$animationState) {\r\n        const { getGlobalStats, isAllAnimationsLoaded } = useGlobalAnimationState()\r\n        globalApp.globalData.$animationState = {\r\n          getStats: getGlobalStats,\r\n          isAllLoaded: isAllAnimationsLoaded\r\n        }\r\n      }\r\n    } else {\r\n      console.log('全局变量未就绪，将在组件挂载时预加载')\r\n    }\r\n  } catch (err) {\r\n    console.error('预加载资源失败:', err)\r\n  }\r\n}\r\n\r\nexport function createApp() {\r\n  const app = createSSRApp(App)\r\n\r\n  // ✅ 注册 Vuex\r\n  app.use(store)\r\n\r\n  // ✅ 注册加载动画插件\r\n  app.use(LoadingPlugin, {\r\n    preload: {\r\n      animations: [\r\n        'https://lottie.host/1f64310d-d1a9-44c9-ac77-3c29ae849559/c3yfKGAzCm.json'\r\n      ]\r\n    }\r\n  })\r\n\r\n  // ✅ 依赖注入方式提供 store\r\n  app.provide('store', store)\r\n\r\n  // ✅ 全局挂载 $store（兼容旧代码）\r\n  app.config.globalProperties.$store = store\r\n  \r\n  // ✅ 注册全局动画状态\r\n  const { globalState, getGlobalStats, isAllAnimationsLoaded } = useGlobalAnimationState()\r\n  // 全局变量提供访问\r\n  app.provide('animationState', {\r\n    globalState,\r\n    getStats: getGlobalStats,\r\n    isAllLoaded: isAllAnimationsLoaded\r\n  })\r\n  \r\n  // 全局属性挂载\r\n  app.config.globalProperties.$animationState = {\r\n    globalState,\r\n    getStats: getGlobalStats,\r\n    isAllLoaded: isAllAnimationsLoaded\r\n  }\r\n  \r\n  // 确保全局App对象已初始化\r\n  try {\r\n    const globalApp = getApp();\r\n    if (globalApp) {\r\n      globalApp.globalData = globalApp.globalData || {};\r\n      \r\n      // 确保$loading对象已初始化\r\n      if (!globalApp.globalData.$loading) {\r\n        globalApp.globalData.$loading = {\r\n          show: () => console.log('Loading组件尚未挂载，show方法未生效'),\r\n          hide: () => console.log('Loading组件尚未挂载，hide方法未生效'),\r\n          preload: () => console.log('Loading组件尚未挂载，preload方法未生效'),\r\n          isPreloaded: { value: false },\r\n          getStatus: () => ({ allLoaded: false, stats: null }),\r\n          globalState\r\n        };\r\n      }\r\n      \r\n      // 确保$animationState对象已初始化\r\n      globalApp.globalData.$animationState = {\r\n        getStats: getGlobalStats,\r\n        isAllLoaded: isAllAnimationsLoaded,\r\n        globalState\r\n      };\r\n      \r\n      console.log('全局动画状态已在createApp中初始化');\r\n    }\r\n  } catch (e) {\r\n    console.error('初始化全局App对象失败:', e);\r\n  }\r\n\r\n  // ✅ 注册 mixin\r\n  app.mixin(injectStoreSafety)\r\n\r\n  // ✅ 全局错误处理\r\n  const handleError = (err) => {\r\n    console.error('捕获到全局错误:', err)\r\n    // 可添加错误上报逻辑\r\n  }\r\n\r\n  app.config.errorHandler = (err, vm, info) => {\r\n    console.error('Vue错误:', err)\r\n    console.info('错误来源:', info)\r\n    handleError(err)\r\n  }\r\n\r\n  // ✅ 开发环境调试\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    try {\r\n      installDebugPlugin(store)\r\n      installDebugForVue3(app, store)\r\n      checkStoreAvailability(store)\r\n      console.log('初始Vuex状态:', store.state)\r\n      \r\n      // 调试用 - 注册全局动画状态监听器\r\n      if (typeof window !== 'undefined') {\r\n        window.__ANIMATION_DEBUG__ = {\r\n          getStats: getGlobalStats,\r\n          isAllLoaded: isAllAnimationsLoaded,\r\n          globalState\r\n        }\r\n        console.log('已注册动画状态调试工具，可通过 window.__ANIMATION_DEBUG__ 访问')\r\n      }\r\n    } catch (e) {\r\n      console.error('调试插件初始化失败:', e)\r\n    }\r\n  }\r\n\r\n  // ✅ 微信小程序错误监听\r\n  if (uni.getSystemInfoSync().platform === 'mp-weixin') {\r\n    console.log('当前运行环境: 微信小程序')\r\n    \r\n    // 配置微信小程序特有的处理\r\n    try {\r\n      // 全局错误监听\r\n      uni.onError((err) => {\r\n        console.error('小程序错误:', err)\r\n        handleError(err)\r\n      })\r\n      \r\n      // 网络请求错误\r\n      uni.onNetworkStatusChange((res) => {\r\n        console.log('网络状态变化:', res.isConnected ? '已连接' : '已断开')\r\n        store.commit('app/setNetworkStatus', res.isConnected)\r\n      })\r\n      \r\n      // 确保全局变量设置\r\n      const app = getApp()\r\n      if (app && !app.globalData) {\r\n        app.globalData = {}\r\n      }\r\n      \r\n      // 提供全局动画状态访问\r\n      if (app && app.globalData) {\r\n        app.globalData.$animationState = {\r\n          getStats: getGlobalStats,\r\n          isAllLoaded: isAllAnimationsLoaded,\r\n          globalState\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.error('微信小程序配置失败:', e)\r\n    }\r\n  }\r\n\r\n  // 尝试初始预加载\r\n  preloadResources()\r\n\r\n  // ✅ 返回给 uni-app\r\n  return {\r\n    app\r\n  }\r\n}\r\n"],"names":["useGlobalAnimationState","uni","createSSRApp","store","LoadingPlugin","injectStoreSafety","installDebugPlugin","installDebugForVue3","checkStoreAvailability","app"],"mappings":"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"}