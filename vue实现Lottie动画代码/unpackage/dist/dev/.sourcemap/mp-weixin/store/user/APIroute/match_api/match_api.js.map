{"version":3,"file":"match_api.js","sources":["store/user/APIroute/match_api/match_api.js"],"sourcesContent":["/**\r\n * 匹配模块的API接口\r\n * @module store/user/APIroute/match_api\r\n */\r\n\r\nimport { MATCH_API_BASE_URL, USER_TEACHER_DETAIL_URL } from '../../API.js';\r\n\r\n/**\r\n * 获取匹配的老师列表\r\n * @param {Object} params - 请求参数\r\n * @param {string} params.userId - 用户ID\r\n * @param {number} params.schoolId - 学校ID\r\n * @param {number} params.professionalId - 专业课ID\r\n * @param {Object} params.nonProfessionalList - 非专业课列表\r\n * @param {number} params.nonProfessionalList.mathId - 数学ID\r\n * @param {number} params.nonProfessionalList.englishId - 英语ID\r\n * @param {number} params.nonProfessionalList.politicsId - 政治ID\r\n * @param {number} params.nonProfessionalList.otherId - 其他ID\r\n * @param {number} params.sortModeId - 排序方式ID\r\n * @param {number} params.currentPage - 当前页码\r\n * @param {number} params.pageSize - 每页数量\r\n * @returns {Promise} 返回匹配的老师列表\r\n */\r\nexport const getMatchTeacherList = (params) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: MATCH_API_BASE_URL,\r\n      method: 'POST',\r\n      data: {\r\n        userId: params.userId,\r\n        schoolId: params.schoolId,\r\n        professionalId: params.professionalId,\r\n        nonProfessionalList: params.nonProfessionalList,\r\n        sortModeId: params.sortModeId,\r\n        currentPage: params.currentPage,\r\n        pageSize: params.pageSize\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(res);\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 搜索学校列表\r\n * @param {Object} params - 请求参数\r\n * @param {string} params.userId - 用户ID\r\n * @param {string} params.keyword - 搜索关键词\r\n * @param {number} params.currentPage - 当前页码\r\n * @param {number} params.pageSize - 每页数量\r\n * @returns {Promise} 返回学校搜索结果\r\n */\r\nexport const searchSchoolList = (params) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${MATCH_API_BASE_URL}/school/search`,\r\n      method: 'POST',\r\n      data: {\r\n        userId: params.userId,\r\n        keyword: params.keyword,\r\n        currentPage: params.currentPage,\r\n        pageSize: params.pageSize\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(res);\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 根据学校ID搜索专业列表\r\n * @param {Object} params - 请求参数\r\n * @param {string} params.userId - 用户ID\r\n * @param {number} params.schoolId - 学校ID\r\n * @param {string} params.keyword - 搜索关键词\r\n * @returns {Promise} 返回专业搜索结果\r\n */\r\nexport const searchMajorList = (params) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${MATCH_API_BASE_URL}/major/search`,\r\n      method: 'POST',\r\n      data: {\r\n        userId: params.userId,\r\n        schoolId: params.schoolId,\r\n        keyword: params.keyword\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(res);\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 获取非专业课选项列表\r\n * @param {Object} params - 请求参数\r\n * @param {string} params.userId - 用户ID\r\n * @param {string} params.type - 非专业课类型 ('math', 'english', 'politics', 'other')\r\n * @returns {Promise} 返回非专业课选项列表\r\n */\r\nexport const getNonProfessionalOptions = (params) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${MATCH_API_BASE_URL}/nonprofessional/options`,\r\n      method: 'POST',\r\n      data: {\r\n        userId: params.userId,\r\n        type: params.type\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(res);\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 获取排序方式选项列表\r\n * @param {Object} params - 请求参数\r\n * @param {string} params.userId - 用户ID\r\n * @returns {Promise} 返回排序方式选项列表\r\n */\r\nexport const getSortModeOptions = (params) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: `${MATCH_API_BASE_URL}/sort/options`,\r\n      method: 'POST',\r\n      data: {\r\n        userId: params.userId\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(res);\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 获取老师详细信息\r\n * @param {Object} params - 请求参数\r\n * @param {string} params.userId - 用户ID\r\n * @param {string} params.teacherId - 老师ID\r\n * @returns {Promise} 返回老师的详细信息\r\n */\r\nexport const getTeacherDetail = (params) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: USER_TEACHER_DETAIL_URL,\r\n      method: 'POST',\r\n      data: {\r\n        userId: params.userId,\r\n        teacherId: params.teacherId\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(res);\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        reject(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n\r\n"],"names":["getMatchTeacherList","params","resolve","reject","uni","MATCH_API_BASE_URL","res","err","searchSchoolList","searchMajorList","getNonProfessionalOptions","getSortModeOptions","getTeacherDetail","USER_TEACHER_DETAIL_URL"],"mappings":"uFAuBaA,EAAuBC,GAC3B,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtCC,EAAAA,MAAI,QAAQ,CACV,IAAKC,EAAkB,mBACvB,OAAQ,OACR,KAAM,CACJ,OAAQJ,EAAO,OACf,SAAUA,EAAO,SACjB,eAAgBA,EAAO,eACvB,oBAAqBA,EAAO,oBAC5B,WAAYA,EAAO,WACnB,YAAaA,EAAO,YACpB,SAAUA,EAAO,QAClB,EACD,QAAUK,GAAQ,CACZA,EAAI,aAAe,IACrBJ,EAAQI,EAAI,IAAI,EAEhBH,EAAOG,CAAG,CAEb,EACD,KAAOC,GAAQ,CACbJ,EAAOI,CAAG,CACX,CACP,CAAK,CACL,CAAG,EAYUC,EAAoBP,GACxB,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtCC,EAAAA,MAAI,QAAQ,CACV,IAAK,GAAGC,EAAkB,kBAAA,iBAC1B,OAAQ,OACR,KAAM,CACJ,OAAQJ,EAAO,OACf,QAASA,EAAO,QAChB,YAAaA,EAAO,YACpB,SAAUA,EAAO,QAClB,EACD,QAAUK,GAAQ,CACZA,EAAI,aAAe,IACrBJ,EAAQI,EAAI,IAAI,EAEhBH,EAAOG,CAAG,CAEb,EACD,KAAOC,GAAQ,CACbJ,EAAOI,CAAG,CACX,CACP,CAAK,CACL,CAAG,EAWUE,EAAmBR,GACvB,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtCC,EAAAA,MAAI,QAAQ,CACV,IAAK,GAAGC,EAAkB,kBAAA,gBAC1B,OAAQ,OACR,KAAM,CACJ,OAAQJ,EAAO,OACf,SAAUA,EAAO,SACjB,QAASA,EAAO,OACjB,EACD,QAAUK,GAAQ,CACZA,EAAI,aAAe,IACrBJ,EAAQI,EAAI,IAAI,EAEhBH,EAAOG,CAAG,CAEb,EACD,KAAOC,GAAQ,CACbJ,EAAOI,CAAG,CACX,CACP,CAAK,CACL,CAAG,EAUUG,EAA6BT,GACjC,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtCC,EAAAA,MAAI,QAAQ,CACV,IAAK,GAAGC,EAAkB,kBAAA,2BAC1B,OAAQ,OACR,KAAM,CACJ,OAAQJ,EAAO,OACf,KAAMA,EAAO,IACd,EACD,QAAUK,GAAQ,CACZA,EAAI,aAAe,IACrBJ,EAAQI,EAAI,IAAI,EAEhBH,EAAOG,CAAG,CAEb,EACD,KAAOC,GAAQ,CACbJ,EAAOI,CAAG,CACX,CACP,CAAK,CACL,CAAG,EASUI,EAAsBV,GAC1B,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtCC,EAAAA,MAAI,QAAQ,CACV,IAAK,GAAGC,EAAkB,kBAAA,gBAC1B,OAAQ,OACR,KAAM,CACJ,OAAQJ,EAAO,MAChB,EACD,QAAUK,GAAQ,CACZA,EAAI,aAAe,IACrBJ,EAAQI,EAAI,IAAI,EAEhBH,EAAOG,CAAG,CAEb,EACD,KAAOC,GAAQ,CACbJ,EAAOI,CAAG,CACX,CACP,CAAK,CACL,CAAG,EAUUK,EAAoBX,GACxB,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtCC,EAAAA,MAAI,QAAQ,CACV,IAAKS,EAAuB,wBAC5B,OAAQ,OACR,KAAM,CACJ,OAAQZ,EAAO,OACf,UAAWA,EAAO,SACnB,EACD,QAAUK,GAAQ,CACZA,EAAI,aAAe,IACrBJ,EAAQI,EAAI,IAAI,EAEhBH,EAAOG,CAAG,CAEb,EACD,KAAOC,GAAQ,CACbJ,EAAOI,CAAG,CACX,CACP,CAAK,CACL,CAAG"}