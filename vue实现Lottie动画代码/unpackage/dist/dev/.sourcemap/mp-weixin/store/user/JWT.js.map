{"version":3,"file":"JWT.js","sources":["store/user/JWT.js"],"sourcesContent":["/**\r\n * JWT相关工具函数\r\n * @module store/user/JWT\r\n */\r\n\r\n// 导入 store\r\nimport store from '@/store/index.js';\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\n\r\n\r\n/**\r\n * 获取当前登录用户ID（从JWT token解析）\r\n * @returns {number|null}\r\n */\r\nexport const getCurrentUserId = () => {\r\n  const token = getCurrentToken();\r\n  console.log(\"[调试] JWT Token:\", token);\r\n  if (!token) {\r\n    console.log(\"[调试] Token为空，返回null\");\r\n    return null;\r\n  }\r\n  try {\r\n    const decoded = jwtDecode(token);\r\n    console.log(\"[调试] JWT解码结果:\", decoded);\r\n    console.log(\"[调试] decoded.userid:\", decoded.userid);\r\n    console.log(\"[调试] decoded.sub:\", decoded.sub);\r\n\r\n    // 后端使用的是 'userid' 字段，不是 'sub'\r\n    const userId = decoded.userid;\r\n    console.log(\"[调试] 最终用户ID:\", userId);\r\n    console.log(\"[调试] 最终用户ID类型:\", typeof userId);\r\n\r\n    return Number(userId) || null;\r\n  } catch (e) {\r\n    console.error(\"[调试] JWT解析失败:\", e);\r\n    return null;\r\n  }\r\n};\r\n/**\r\n * 获取当前存储的JWT令牌\r\n * @returns {string} JWT令牌\r\n */\r\nexport const getCurrentToken = () => {\r\n    return store.state.user.baseInfo.jwtToken;\r\n};\r\n\r\n/**\r\n * 统一API请求工具（自动携带JWT令牌）\r\n * @param {string} url - 请求URL\r\n * @param {string} [method='GET'] - 请求方法\r\n * @param {Object} [data={}] - 请求数据\r\n * @param {Object} [options={}] - 额外选项\r\n * @param {boolean} [options.requireAuth=true] - 是否要求认证\r\n * @param {boolean} [options.showError=true] - 是否显示错误提示\r\n * @param {Object} [options.customHeader={}] - 自定义请求头\r\n * @returns {Promise<Object>} 请求结果Promise\r\n */\r\nexport const apiRequest = (url, method = 'GET', data = {}, options = {}) => {\r\n    const defaultOptions = {\r\n        requireAuth: true,\r\n        showError: true,\r\n        customHeader: {}\r\n    };\r\n    \r\n    const finalOptions = { ...defaultOptions, ...options };\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        // 获取JWT令牌\r\n        const token = getCurrentToken();\r\n        console.log('token',token);\r\n        \r\n        // 如果需要认证但没有令牌\r\n        if (finalOptions.requireAuth && !token) {\r\n            const error = {\r\n                success: false,\r\n                error: {\r\n                    code: 401,\r\n                    message: '未登录，请先登录'\r\n                }\r\n            };\r\n            \r\n            if (finalOptions.showError) {\r\n                uni.showToast({\r\n                    title: error.error.message,\r\n                    icon: 'none',\r\n                    duration: 2000\r\n                });\r\n            }\r\n            \r\n            reject(error);\r\n            return;\r\n        }\r\n        \r\n        // 准备请求头\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            ...finalOptions.customHeader\r\n        };\r\n        \r\n        // 如果有令牌则添加到请求头\r\n        if (token) {\r\n            headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        \r\n        // 发送请求\r\n        uni.request({\r\n            url,\r\n            method: method.toUpperCase(),\r\n            data: data,\r\n            header: headers,\r\n            success: (res) => {\r\n                // 请求成功 - 优化响应处理逻辑\r\n                if (res.statusCode === 200) {\r\n                    // 如果响应数据存在且格式正确\r\n                    if (res.data) {\r\n                        // 处理标准格式 {code: 200, data: {...}}\r\n                        if (res.data.code === 200) {\r\n                            resolve({\r\n                                success: true,\r\n                                data: res.data\r\n                            });\r\n                        } else {\r\n                            // 处理业务错误 {code: 非200, msg: \"错误信息\"}\r\n                            resolve({\r\n                                success: false,\r\n                                message: res.data.msg || res.data.message || '请求失败',\r\n                                data: res.data\r\n                            });\r\n                        }\r\n                    } else {\r\n                        // 处理空响应\r\n                        resolve({\r\n                            success: true,\r\n                            data: null\r\n                        });\r\n                    }\r\n                } else if (res.statusCode === 401 || res.statusCode === 403) {\r\n                    // 认证失败，清除令牌\r\n                    store.commit('user/baseInfo/CLEAR_JWT_TOKEN');\r\n                    \r\n                    const error = {\r\n                        success: false,\r\n                        error: {\r\n                            statusCode: res.statusCode,\r\n                            message: res.data?.msg || (res.statusCode === 401 ? '认证已过期，请重新登录' : '无权访问')\r\n                        }\r\n                    };\r\n                    \r\n                    if (finalOptions.showError) {\r\n                        uni.showToast({\r\n                            title: error.error.message,\r\n                            icon: 'none',\r\n                            duration: 2000\r\n                        });\r\n                    }\r\n                    \r\n                    reject(error);\r\n                } else {\r\n                    // HTTP状态码错误\r\n                    const error = {\r\n                        success: false,\r\n                        error: {\r\n                            statusCode: res.statusCode,\r\n                            message: res.data?.msg || `HTTP错误: ${res.statusCode}`\r\n                        }\r\n                    };\r\n                    \r\n                    if (finalOptions.showError) {\r\n                        uni.showToast({\r\n                            title: error.error.message,\r\n                            icon: 'none',\r\n                            duration: 2000\r\n                        });\r\n                    }\r\n                    \r\n                    reject(error);\r\n                }\r\n            },\r\n            fail: (err) => {\r\n                // 网络请求失败\r\n                const error = {\r\n                    success: false,\r\n                    error: {\r\n                        message: err.errMsg || '网络请求失败'\r\n                    }\r\n                };\r\n                \r\n                if (finalOptions.showError) {\r\n                    uni.showToast({\r\n                        title: error.error.message,\r\n                        icon: 'none',\r\n                        duration: 2000\r\n                    });\r\n                }\r\n                \r\n                reject(error);\r\n            }\r\n        });\r\n    });\r\n};\r\n"],"names":["getCurrentUserId","token","getCurrentToken","uni","decoded","jwtDecode","userId","e","store","apiRequest","url","method","data","options","finalOptions","resolve","reject","error","headers","res","_a","_b","err"],"mappings":"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"}