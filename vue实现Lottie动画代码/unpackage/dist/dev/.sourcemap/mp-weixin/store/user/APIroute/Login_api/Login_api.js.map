{"version":3,"file":"Login_api.js","sources":["store/user/APIroute/Login_api/Login_api.js"],"sourcesContent":["/**\r\n * @description 用户登录相关API函数\r\n * @module store/user/APIroute/Login_api\r\n */\r\n\r\nimport { \r\n  LOGIN_WETHER_SIGN_IN_URL, \r\n  LOGIN_URL, \r\n  LOGIN_SIGN_IN_URL \r\n} from '../../API.js';\r\nimport { apiRequest } from '../../JWT.js';\r\n\r\n/**\r\n * @description 判断用户是否注册过\r\n * @param {Object} options - 请求选项\r\n * @param {string} options.code - 微信登录返回的临时code\r\n * @param {Function} options.success - 成功回调\r\n * @param {Function} options.fail - 失败回调\r\n * @param {Function} options.complete - 完成回调\r\n * @returns {Promise} - 如果不传回调函数，则返回Promise\r\n */\r\nexport const checkUserRegistration = (options = {}) => {\r\n  const { code, success, fail, complete } = options;\r\n  \r\n  // 参数验证\r\n  if (!code) {\r\n    const error = '缺少必要参数：code';\r\n    if (typeof fail === 'function') {\r\n      fail({ errMsg: error });\r\n    }\r\n    if (typeof complete === 'function') {\r\n      complete({ errMsg: error });\r\n    }\r\n    return Promise.reject(new Error(error));\r\n  }\r\n  \r\n  // 构建请求，不需要认证\r\n  const requestTask = apiRequest(LOGIN_WETHER_SIGN_IN_URL, 'POST', { code }, { requireAuth: false });\r\n  \r\n  // 如果传入了回调函数，使用回调处理结果\r\n  if (typeof success === 'function' || typeof fail === 'function' || typeof complete === 'function') {\r\n    requestTask.then(response => {\r\n      if (typeof success === 'function') {\r\n        success(response.data);\r\n      }\r\n    }).catch(error => {\r\n      if (typeof fail === 'function') {\r\n        fail({\r\n          errMsg: error.error?.message || '网络请求失败',\r\n          errCode: error.error?.statusCode,\r\n          data: error.error\r\n        });\r\n      }\r\n    }).finally(() => {\r\n      if (typeof complete === 'function') {\r\n        complete();\r\n      }\r\n    });\r\n    \r\n    return requestTask;\r\n  }\r\n  \r\n  // 如果没有回调函数，返回处理后的Promise\r\n  return requestTask.then(response => {\r\n    return response.data;\r\n  }).catch(error => {\r\n    throw {\r\n      errMsg: error.error?.message || '网络请求失败',\r\n      errCode: error.error?.statusCode,\r\n      data: error.error\r\n    };\r\n  });\r\n};\r\n\r\n/**\r\n * @description 验证用户登录状态\r\n * @param {Object} options - 请求选项\r\n * @param {Function} options.success - 成功回调\r\n * @param {Function} options.fail - 失败回调\r\n * @param {Function} options.complete - 完成回调\r\n * @returns {Promise} - 如果不传回调函数，则返回Promise\r\n */\r\nexport const verifyLoginStatus = (options = {}) => {\r\n  const { success, fail, complete } = options;\r\n  \r\n  // 检查本地是否存在token\r\n  const token = uni.getStorageSync('token');\r\n  if (!token) {\r\n    const error = { errMsg: '未登录，本地不存在token' };\r\n    if (typeof fail === 'function') {\r\n      fail(error);\r\n    }\r\n    if (typeof complete === 'function') {\r\n      complete();\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n  \r\n  // 构建请求，携带token到后端验证\r\n  const requestTask = apiRequest(LOGIN_URL, 'POST', {});\r\n  \r\n  // 如果传入了回调函数，使用回调处理结果\r\n  if (typeof success === 'function' || typeof fail === 'function' || typeof complete === 'function') {\r\n    requestTask.then(response => {\r\n      if (typeof success === 'function') {\r\n        success(response.data);\r\n      }\r\n    }).catch(error => {\r\n      // 401表示token无效或过期\r\n      if (error.error?.statusCode === 401) {\r\n        // 清除本地无效token\r\n        uni.removeStorageSync('token');\r\n      }\r\n      \r\n      if (typeof fail === 'function') {\r\n        fail({\r\n          errMsg: error.error?.message || '登录状态验证失败',\r\n          errCode: error.error?.statusCode,\r\n          data: error.error\r\n        });\r\n      }\r\n    }).finally(() => {\r\n      if (typeof complete === 'function') {\r\n        complete();\r\n      }\r\n    });\r\n    \r\n    return requestTask;\r\n  }\r\n  \r\n  // 如果没有回调函数，返回处理后的Promise\r\n  return requestTask.then(response => {\r\n    return response.data;\r\n  }).catch(error => {\r\n    // 401表示token无效或过期\r\n    if (error.error?.statusCode === 401) {\r\n      // 清除本地无效token\r\n      uni.removeStorageSync('token');\r\n    }\r\n    \r\n    throw {\r\n      errMsg: error.error?.message || '登录状态验证失败',\r\n      errCode: error.error?.statusCode,\r\n      data: error.error\r\n    };\r\n  });\r\n};\r\n\r\n/**\r\n * @description 新用户注册\r\n * @param {Object} options - 请求选项\r\n * @param {string} options.code - 微信登录临时code\r\n * @param {string} [options.encryptedData] - 微信加密数据\r\n * @param {string} [options.iv] - 加密算法的初始向量\r\n * @param {string} [options.avatarUrl] - 用户头像URL\r\n * @param {string} [options.nickName] - 用户昵称\r\n * @param {string} [options.gender] - 用户性别\r\n * @param {string} [options.school] - 用户学校\r\n * @param {string} [options.major] - 用户专业\r\n * @param {string} [options.targetSchool] - 目标学校\r\n * @param {string} [options.targetMajor] - 目标专业\r\n * @param {Function} options.success - 成功回调\r\n * @param {Function} options.fail - 失败回调\r\n * @param {Function} options.complete - 完成回调\r\n * @returns {Promise} - 如果不传回调函数，则返回Promise\r\n */\r\nexport const registerUser = (options = {}) => {\r\n  const { \r\n    code, \r\n    encryptedData, \r\n    iv, \r\n    avatarUrl, \r\n    nickName, \r\n    gender, \r\n    school, \r\n    major, \r\n    targetSchool, \r\n    targetMajor,\r\n    success, \r\n    fail, \r\n    complete \r\n  } = options;\r\n  \r\n  // 参数验证\r\n  if (!code) {\r\n    const error = '缺少必要参数：code';\r\n    if (typeof fail === 'function') {\r\n      fail({ errMsg: error });\r\n    }\r\n    if (typeof complete === 'function') {\r\n      complete();\r\n    }\r\n    return Promise.reject(new Error(error));\r\n  }\r\n  \r\n  // 构建请求数据\r\n  const requestData = {\r\n    code,\r\n    // 只添加有值的字段\r\n    ...(encryptedData && { encryptedData }),\r\n    ...(iv && { iv }),\r\n    ...(avatarUrl && { avatarUrl }),\r\n    ...(nickName && { nickName }),\r\n    ...(gender && { gender }),\r\n    ...(school && { school }),\r\n    ...(major && { major }),\r\n    ...(targetSchool && { targetSchool }),\r\n    ...(targetMajor && { targetMajor })\r\n  };\r\n  \r\n  // 发送注册请求，不需要认证\r\n  const requestTask = apiRequest(LOGIN_SIGN_IN_URL, 'POST', requestData, { requireAuth: false });\r\n  \r\n  // 如果传入了回调函数，使用回调处理结果\r\n  if (typeof success === 'function' || typeof fail === 'function' || typeof complete === 'function') {\r\n    requestTask.then(response => {\r\n      // 注册成功，保存token\r\n      if (response.data && response.data.token) {\r\n        uni.setStorageSync('token', response.data.token);\r\n      }\r\n      \r\n      if (typeof success === 'function') {\r\n        success(response.data);\r\n      }\r\n    }).catch(error => {\r\n      if (typeof fail === 'function') {\r\n        fail({\r\n          errMsg: error.error?.message || '注册失败',\r\n          errCode: error.error?.statusCode,\r\n          data: error.error\r\n        });\r\n      }\r\n    }).finally(() => {\r\n      if (typeof complete === 'function') {\r\n        complete();\r\n      }\r\n    });\r\n    \r\n    return requestTask;\r\n  }\r\n  \r\n  // 如果没有回调函数，返回处理后的Promise\r\n  return requestTask.then(response => {\r\n    // 注册成功，保存token\r\n    if (response.data && response.data.token) {\r\n      uni.setStorageSync('token', response.data.token);\r\n    }\r\n    \r\n    return response.data;\r\n  }).catch(error => {\r\n    throw {\r\n      errMsg: error.error?.message || '注册失败',\r\n      errCode: error.error?.statusCode,\r\n      data: error.error\r\n    };\r\n  });\r\n};\r\n\r\n// ===================== 学校和专业搜索相关API =====================\r\n\r\n/**\r\n * @description 搜索本科学校列表\r\n * @param {Object} params - 请求参数\r\n * @param {string} params.userId - 用户ID\r\n * @param {string} params.keyword - 搜索关键词\r\n * @returns {Promise} 返回学校搜索结果\r\n */\r\nexport const searchUndergraduateSchools = async (params) => {\r\n  try {\r\n    const response = await apiRequest(`${LOGIN_URL}/undergraduate/school/search`, 'POST', {\r\n      userId: params.userId,\r\n      keyword: params.keyword\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * @description 搜索本科专业列表\r\n * @param {Object} params - 请求参数\r\n * @param {string} params.userId - 用户ID\r\n * @param {string} params.keyword - 搜索关键词\r\n * @returns {Promise} 返回专业搜索结果\r\n */\r\nexport const searchUndergraduateMajors = async (params) => {\r\n  try {\r\n    const response = await apiRequest(`${LOGIN_URL}/undergraduate/major/search`, 'POST', {\r\n      userId: params.userId,\r\n      keyword: params.keyword\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * @description 搜索研究生学校列表\r\n * @param {Object} params - 请求参数\r\n * @param {string} params.userId - 用户ID\r\n * @param {string} params.keyword - 搜索关键词\r\n * @param {number} params.currentPage - 当前页码\r\n * @param {number} params.pageSize - 每页数量\r\n * @returns {Promise} 返回学校搜索结果\r\n */\r\nexport const searchGraduateSchools = async (params) => {\r\n  try {\r\n    const response = await apiRequest(`${LOGIN_URL}/graduate/school/search`, 'POST', {\r\n      userId: params.userId,\r\n      keyword: params.keyword,\r\n      currentPage: params.currentPage,\r\n      pageSize: params.pageSize\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * @description 根据学校ID搜索研究生专业列表\r\n * @param {Object} params - 请求参数\r\n * @param {string} params.userId - 用户ID\r\n * @param {number} params.schoolId - 学校ID\r\n * @param {string} params.keyword - 搜索关键词\r\n * @returns {Promise} 返回专业搜索结果\r\n */\r\nexport const searchGraduateMajors = async (params) => {\r\n  try {\r\n    const response = await apiRequest(`${LOGIN_URL}/graduate/major/search`, 'POST', {\r\n      userId: params.userId,\r\n      schoolId: params.schoolId,\r\n      keyword: params.keyword\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n"],"names":["searchUndergraduateSchools","params","apiRequest","LOGIN_URL","error","searchUndergraduateMajors","searchGraduateSchools","searchGraduateMajors"],"mappings":"+GA2QaA,EAA6B,MAAOC,GAAW,CAC1D,GAAI,CAKF,OAJiB,MAAMC,aAAW,GAAGC,EAAAA,SAAS,+BAAgC,OAAQ,CACpF,OAAQF,EAAO,OACf,QAASA,EAAO,OACtB,CAAK,GACe,IACjB,OAAQG,EAAO,CACd,MAAMA,CACP,CACH,EASaC,EAA4B,MAAOJ,GAAW,CACzD,GAAI,CAKF,OAJiB,MAAMC,aAAW,GAAGC,EAAAA,SAAS,8BAA+B,OAAQ,CACnF,OAAQF,EAAO,OACf,QAASA,EAAO,OACtB,CAAK,GACe,IACjB,OAAQG,EAAO,CACd,MAAMA,CACP,CACH,EAWaE,EAAwB,MAAOL,GAAW,CACrD,GAAI,CAOF,OANiB,MAAMC,aAAW,GAAGC,EAAAA,SAAS,0BAA2B,OAAQ,CAC/E,OAAQF,EAAO,OACf,QAASA,EAAO,QAChB,YAAaA,EAAO,YACpB,SAAUA,EAAO,QACvB,CAAK,GACe,IACjB,OAAQG,EAAO,CACd,MAAMA,CACP,CACH,EAUaG,EAAuB,MAAON,GAAW,CACpD,GAAI,CAMF,OALiB,MAAMC,aAAW,GAAGC,EAAAA,SAAS,yBAA0B,OAAQ,CAC9E,OAAQF,EAAO,OACf,SAAUA,EAAO,SACjB,QAASA,EAAO,OACtB,CAAK,GACe,IACjB,OAAQG,EAAO,CACd,MAAMA,CACP,CACH"}