{"version":3,"file":"mock-api.js","sources":["store/user/baseInfo/mock-api.js"],"sourcesContent":["/**\r\n * 用户基本信息模块的模拟API实现\r\n * @module store/user/baseInfo/mock-api\r\n */\r\n\r\nimport { \r\n  mockUsers, \r\n  mockApiResponse, \r\n  delay, \r\n  DEFAULT_USER_INFO \r\n} from './mock-data';\r\n\r\n/**\r\n * 模拟登录API\r\n * @param {Object} data - 登录信息\r\n * @param {string} data.username - 用户名\r\n * @param {string} data.password - 密码\r\n * @returns {Promise<Object>} 登录结果\r\n */\r\nexport const login = async (data) => {\r\n  try {\r\n    // 模拟网络延迟\r\n    await delay(500);\r\n    \r\n    const user = mockUsers.find(\r\n      user => user.username === data.username && user.password === data.password\r\n    );\r\n    \r\n    if (user) {\r\n      return mockApiResponse(true, {\r\n        userId: user.id,\r\n        role: user.role,\r\n        message: '登录成功'\r\n      });\r\n    } else {\r\n      return mockApiResponse(false, null, {\r\n        message: '用户名或密码错误'\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('模拟登录失败:', error);\r\n    return mockApiResponse(false, null, {\r\n      message: '登录请求失败'\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * 模拟获取用户信息API\r\n * @returns {Promise<Object>} 用户信息\r\n */\r\nexport const getUserInfo = async () => {\r\n  try {\r\n    // 模拟网络延迟\r\n    await delay(300);\r\n    \r\n    // 从本地存储获取用户ID\r\n    const userId = uni.getStorageSync('userId');\r\n    \r\n    if (!userId) {\r\n      // 用户未登录，返回默认用户信息\r\n      return mockApiResponse(true, DEFAULT_USER_INFO);\r\n    }\r\n    \r\n    const user = mockUsers.find(user => user.id === userId);\r\n    \r\n    if (user) {\r\n      return mockApiResponse(true, { ...user });\r\n    } else {\r\n      // 未找到用户，返回默认用户信息\r\n      uni.removeStorageSync('userId');\r\n      uni.removeStorageSync('user-token');\r\n      return mockApiResponse(true, DEFAULT_USER_INFO);\r\n    }\r\n  } catch (error) {\r\n    console.error('模拟获取用户信息失败:', error);\r\n    return mockApiResponse(false, null, {\r\n      message: '获取用户信息失败'\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * 模拟更新用户信息API\r\n * @param {Object} userInfo - 用户信息\r\n * @returns {Promise<Object>} 更新结果\r\n */\r\nexport const updateUserInfo = async (userInfo) => {\r\n  try {\r\n    // 模拟网络延迟\r\n    await delay(400);\r\n    \r\n    const userId = uni.getStorageSync('userId');\r\n    \r\n    if (!userId) {\r\n      return mockApiResponse(false, null, {\r\n        message: '用户未登录'\r\n      });\r\n    }\r\n    \r\n    const userIndex = mockUsers.findIndex(user => user.id === userId);\r\n    \r\n    if (userIndex !== -1) {\r\n      // 更新用户信息\r\n      mockUsers[userIndex] = {\r\n        ...mockUsers[userIndex],\r\n        ...userInfo,\r\n        // 处理不同字段名的映射\r\n        nickname: userInfo.name || userInfo.nickname || mockUsers[userIndex].nickname,\r\n        name: userInfo.nickname || userInfo.name || mockUsers[userIndex].name,\r\n        introduction: userInfo.selfIntroduction || userInfo.introduction || mockUsers[userIndex].introduction,\r\n        selfIntroduction: userInfo.introduction || userInfo.selfIntroduction || mockUsers[userIndex].selfIntroduction,\r\n        wechat: userInfo.wechatNumber || userInfo.wechat || mockUsers[userIndex].wechat,\r\n        wechatNumber: userInfo.wechat || userInfo.wechatNumber || mockUsers[userIndex].wechatNumber,\r\n        phone: userInfo.phoneNumber || userInfo.phone || mockUsers[userIndex].phone,\r\n        phoneNumber: userInfo.phone || userInfo.phoneNumber || mockUsers[userIndex].phoneNumber\r\n      };\r\n      \r\n      // 如果更新了用户角色\r\n      if (userInfo.role) {\r\n        mockUsers[userIndex].userInfo.role = userInfo.role === 'teacher' ? '老师' : '学生';\r\n      }\r\n      \r\n      return mockApiResponse(true, {\r\n        message: '用户信息更新成功',\r\n        userInfo: mockUsers[userIndex]\r\n      });\r\n    } else {\r\n      return mockApiResponse(false, null, {\r\n        message: '用户不存在'\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('模拟更新用户信息失败:', error);\r\n    return mockApiResponse(false, null, {\r\n      message: '更新用户信息失败'\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * 模拟更新用户角色\r\n * @param {string} role - 用户角色\r\n * @returns {Promise<Object>} 更新结果\r\n */\r\nexport const updateRole = async (role) => {\r\n  try {\r\n    // 模拟网络延迟\r\n    await delay(200);\r\n    \r\n    const userId = uni.getStorageSync('userId');\r\n    \r\n    if (!userId) {\r\n      return mockApiResponse(false, null, {\r\n        message: '用户未登录'\r\n      });\r\n    }\r\n    \r\n    const userIndex = mockUsers.findIndex(user => user.id === userId);\r\n    \r\n    if (userIndex !== -1) {\r\n      // 更新用户角色\r\n      mockUsers[userIndex].role = role;\r\n      mockUsers[userIndex].userInfo.role = role === 'teacher' ? '老师' : '学生';\r\n      \r\n      return mockApiResponse(true, {\r\n        message: '角色更新成功',\r\n        role: role\r\n      });\r\n    } else {\r\n      return mockApiResponse(false, null, {\r\n        message: '用户不存在'\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('模拟更新用户角色失败:', error);\r\n    return mockApiResponse(false, null, {\r\n      message: '更新用户角色失败'\r\n    });\r\n  }\r\n}; "],"names":["delay","mockUsers","user","mockApiResponse","uni","DEFAULT_USER_INFO"],"mappings":"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"}