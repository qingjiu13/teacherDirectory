{"version":3,"file":"actions.js","sources":["store/user/match/actions.js"],"sourcesContent":["/**\r\n * match模块的actions\r\n * @module store/user/match/actions\r\n */\r\n\r\nimport { getMatchTeachers, getTeacherDetail } from './api';\r\n\r\nexport default {\r\n    /**\r\n     * 根据筛选条件获取匹配的老师列表\r\n     * @param {Object} context - Vuex context对象\r\n     * @param {Object} filters - 筛选条件\r\n     * @param {String} filters.school - 学校筛选\r\n     * @param {String} filters.major - 专业筛选\r\n     * @param {String} filters.sort - 排序方式\r\n     * @returns {Promise} - 返回获取结果的Promise\r\n     */\r\n    getFilteredMatchList({ commit }, filters = {}) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                // 调用API获取数据\r\n                const result = await getMatchTeachers(filters);\r\n                \r\n                // 将数据更新到state\r\n                commit('SET_MATCH_LIST', result.matchList || []);\r\n                \r\n                // 确保每个老师对象都有service数组\r\n                const processedData = (result.matchList || []).map(teacher => {\r\n                    // 确保service属性存在且为数组\r\n                    if (!teacher.service) {\r\n                        teacher.service = [];\r\n                    }\r\n                    return teacher;\r\n                });\r\n                \r\n                resolve({\r\n                    success: true,\r\n                    data: processedData\r\n                });\r\n            } catch (error) {\r\n                // 直接将后端的错误返回\r\n                reject({\r\n                    success: false,\r\n                    message: error.message || '获取老师列表失败',\r\n                    error\r\n                });\r\n            }\r\n        });\r\n    },\r\n    \r\n    /**\r\n     * 获取特定老师的详细信息\r\n     * @param {Object} context - Vuex context对象\r\n     * @param {String} teacherId - 老师ID\r\n     * @returns {Promise} - 返回获取结果的Promise\r\n     */\r\n    getTeacherById({ state }, teacherId) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                // 从state中查找对应ID的老师\r\n                const teacher = state.matchList.find(item => item.id === teacherId);\r\n                \r\n                if (teacher) {\r\n                    resolve({\r\n                        success: true,\r\n                        data: teacher\r\n                    });\r\n                } else {\r\n                    reject({\r\n                        success: false,\r\n                        message: '未找到该老师信息'\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                reject({\r\n                    success: false,\r\n                    message: error.message || '获取老师详情失败',\r\n                    error\r\n                });\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * 获取教师详细介绍信息（包含自我介绍和服务列表）\r\n     * @param {Object} context - Vuex context对象\r\n     * @param {String} teacherId - 教师ID\r\n     * @returns {Promise} - 返回获取结果的Promise\r\n     */\r\n    getTeacherDetailInfo({ commit }, teacherId) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                if (!teacherId) {\r\n                    throw new Error('教师ID不能为空');\r\n                }\r\n                \r\n                // 调用API获取教师详情\r\n                const detailData = await getTeacherDetail(teacherId);\r\n                \r\n                // 更新state中的教师详情信息\r\n                commit('UPDATE_TEACHER_DETAIL', {\r\n                    id: teacherId,\r\n                    detailInfo: detailData\r\n                });\r\n                \r\n                resolve({\r\n                    success: true,\r\n                    data: detailData\r\n                });\r\n            } catch (error) {\r\n                reject({\r\n                    success: false,\r\n                    message: error.message || '获取教师详情失败',\r\n                    error\r\n                });\r\n            }\r\n        });\r\n    }\r\n}; "],"names":["getMatchTeachers","getTeacherDetail"],"mappings":";;AAOA,MAAe,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUX,qBAAqB,EAAE,UAAU,UAAU,CAAA,GAAI;AAC3C,WAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,UAAI;AAEA,cAAM,SAAS,MAAMA,sCAAiB,OAAO;AAG7C,eAAO,kBAAkB,OAAO,aAAa,CAAE,CAAA;AAG/C,cAAM,iBAAiB,OAAO,aAAa,CAAE,GAAE,IAAI,aAAW;AAE1D,cAAI,CAAC,QAAQ,SAAS;AAClB,oBAAQ,UAAU;UACrB;AACD,iBAAO;AAAA,QAC3B,CAAiB;AAED,gBAAQ;AAAA,UACJ,SAAS;AAAA,UACT,MAAM;AAAA,QAC1B,CAAiB;AAAA,MACJ,SAAQ,OAAO;AAEZ,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS,MAAM,WAAW;AAAA,UAC1B;AAAA,QACpB,CAAiB;AAAA,MACJ;AAAA,IACb,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,eAAe,EAAE,MAAO,GAAE,WAAW;AACjC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,UAAI;AAEA,cAAM,UAAU,MAAM,UAAU,KAAK,UAAQ,KAAK,OAAO,SAAS;AAElE,YAAI,SAAS;AACT,kBAAQ;AAAA,YACJ,SAAS;AAAA,YACT,MAAM;AAAA,UAC9B,CAAqB;AAAA,QACrB,OAAuB;AACH,iBAAO;AAAA,YACH,SAAS;AAAA,YACT,SAAS;AAAA,UACjC,CAAqB;AAAA,QACJ;AAAA,MACJ,SAAQ,OAAO;AACZ,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS,MAAM,WAAW;AAAA,UAC1B;AAAA,QACpB,CAAiB;AAAA,MACJ;AAAA,IACb,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,qBAAqB,EAAE,OAAQ,GAAE,WAAW;AACxC,WAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,UAAI;AACA,YAAI,CAAC,WAAW;AACZ,gBAAM,IAAI,MAAM,UAAU;AAAA,QAC7B;AAGD,cAAM,aAAa,MAAMC,sCAAiB,SAAS;AAGnD,eAAO,yBAAyB;AAAA,UAC5B,IAAI;AAAA,UACJ,YAAY;AAAA,QAChC,CAAiB;AAED,gBAAQ;AAAA,UACJ,SAAS;AAAA,UACT,MAAM;AAAA,QAC1B,CAAiB;AAAA,MACJ,SAAQ,OAAO;AACZ,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS,MAAM,WAAW;AAAA,UAC1B;AAAA,QACpB,CAAiB;AAAA,MACJ;AAAA,IACb,CAAS;AAAA,EACJ;AACL;;"}