{"version":3,"file":"actions.js","sources":["store/user/match/actions.js"],"sourcesContent":["/**\n * match模块的actions\n * @module store/user/match/actions\n */\n\nimport { getMatchTeachers, getTeacherDetail } from './api';\n\nexport default {\n    /**\n     * 根据筛选条件获取匹配的老师列表\n     * @param {Object} context - Vuex context对象\n     * @param {Object} filters - 筛选条件\n     * @param {String} filters.school - 学校筛选\n     * @param {String} filters.major - 专业筛选\n     * @param {String} filters.sort - 排序方式\n     * @returns {Promise} - 返回获取结果的Promise\n     */\n    getFilteredMatchList({ commit }, filters = {}) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                // 调用API获取数据\n                const result = await getMatchTeachers(filters);\n                \n                // 将数据更新到state\n                commit('SET_MATCH_LIST', result.matchList || []);\n                \n                // 确保每个老师对象都有service数组\n                const processedData = (result.matchList || []).map(teacher => {\n                    // 确保service属性存在且为数组\n                    if (!teacher.service) {\n                        teacher.service = [];\n                    }\n                    return teacher;\n                });\n                \n                resolve({\n                    success: true,\n                    data: processedData\n                });\n            } catch (error) {\n                // 直接将后端的错误返回\n                reject({\n                    success: false,\n                    message: error.message || '获取老师列表失败',\n                    error\n                });\n            }\n        });\n    },\n    \n    /**\n     * 获取特定老师的详细信息\n     * @param {Object} context - Vuex context对象\n     * @param {String} teacherId - 老师ID\n     * @returns {Promise} - 返回获取结果的Promise\n     */\n    getTeacherById({ commit }, teacherId) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                // 通过API获取老师详情\n                const result = await getTeacherDetail(teacherId);\n                \n                // 将数据更新到state中对应的老师\n                commit('UPDATE_TEACHER_DETAIL', {\n                    id: teacherId,\n                    detailInfo: result\n                });\n                \n                resolve({\n                    success: true,\n                    data: result\n                });\n            } catch (error) {\n                reject({\n                    success: false,\n                    message: error.message || '获取老师详情失败',\n                    error\n                });\n            }\n        });\n    },\n\n    /**\n     * 获取教师详细介绍信息（包含自我介绍和服务列表）\n     * @param {Object} context - Vuex context对象\n     * @param {String} teacherId - 教师ID\n     * @returns {Promise} - 返回获取结果的Promise\n     */\n    getTeacherDetailInfo({ commit }, teacherId) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                if (!teacherId) {\n                    throw new Error('教师ID不能为空');\n                }\n                \n                // 调用API获取教师详情\n                const detailData = await getTeacherDetail(teacherId);\n                \n                // 更新state中的教师详情信息\n                commit('UPDATE_TEACHER_DETAIL', {\n                    id: teacherId,\n                    detailInfo: detailData\n                });\n                \n                resolve({\n                    success: true,\n                    data: detailData\n                });\n            } catch (error) {\n                reject({\n                    success: false,\n                    message: error.message || '获取教师详情失败',\n                    error\n                });\n            }\n        });\n    }\n}; "],"names":["getMatchTeachers","getTeacherDetail"],"mappings":";;AAOA,MAAe,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUX,qBAAqB,EAAE,UAAU,UAAU,CAAA,GAAI;AAC3C,WAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,UAAI;AAEA,cAAM,SAAS,MAAMA,sCAAiB,OAAO;AAG7C,eAAO,kBAAkB,OAAO,aAAa,CAAE,CAAA;AAG/C,cAAM,iBAAiB,OAAO,aAAa,CAAE,GAAE,IAAI,aAAW;AAE1D,cAAI,CAAC,QAAQ,SAAS;AAClB,oBAAQ,UAAU;UACrB;AACD,iBAAO;AAAA,QAC3B,CAAiB;AAED,gBAAQ;AAAA,UACJ,SAAS;AAAA,UACT,MAAM;AAAA,QAC1B,CAAiB;AAAA,MACJ,SAAQ,OAAO;AAEZ,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS,MAAM,WAAW;AAAA,UAC1B;AAAA,QACpB,CAAiB;AAAA,MACJ;AAAA,IACb,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,eAAe,EAAE,OAAQ,GAAE,WAAW;AAClC,WAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,UAAI;AAEA,cAAM,SAAS,MAAMC,sCAAiB,SAAS;AAG/C,eAAO,yBAAyB;AAAA,UAC5B,IAAI;AAAA,UACJ,YAAY;AAAA,QAChC,CAAiB;AAED,gBAAQ;AAAA,UACJ,SAAS;AAAA,UACT,MAAM;AAAA,QAC1B,CAAiB;AAAA,MACJ,SAAQ,OAAO;AACZ,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS,MAAM,WAAW;AAAA,UAC1B;AAAA,QACpB,CAAiB;AAAA,MACJ;AAAA,IACb,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,qBAAqB,EAAE,OAAQ,GAAE,WAAW;AACxC,WAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC1C,UAAI;AACA,YAAI,CAAC,WAAW;AACZ,gBAAM,IAAI,MAAM,UAAU;AAAA,QAC7B;AAGD,cAAM,aAAa,MAAMA,sCAAiB,SAAS;AAGnD,eAAO,yBAAyB;AAAA,UAC5B,IAAI;AAAA,UACJ,YAAY;AAAA,QAChC,CAAiB;AAED,gBAAQ;AAAA,UACJ,SAAS;AAAA,UACT,MAAM;AAAA,QAC1B,CAAiB;AAAA,MACJ,SAAQ,OAAO;AACZ,eAAO;AAAA,UACH,SAAS;AAAA,UACT,SAAS,MAAM,WAAW;AAAA,UAC1B;AAAA,QACpB,CAAiB;AAAA,MACJ;AAAA,IACb,CAAS;AAAA,EACJ;AACL;;"}