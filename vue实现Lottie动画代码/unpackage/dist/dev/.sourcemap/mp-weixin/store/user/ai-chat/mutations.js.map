{"version":3,"file":"mutations.js","sources":["store/user/ai-chat/mutations.js"],"sourcesContent":["/**\n * ai-chat模块的mutations\n * @module store/user/ai-chat/mutations\n */\n\nexport default {\n    /**\n     * 更新对话列表\n     * @param {Object} state - Vuex状态对象\n     * @param {Array<Object>} conversationsList - 对话列表数据（已经过actions处理的格式化数据）\n     * @param {string} conversationsList[].id - 对话ID\n     * @param {string} conversationsList[].abstract - 对话摘要/标题（已从后端title字段映射）\n     * @param {string} conversationsList[].chatMode - 对话模式（已从后端topic字段映射）\n     * @param {string} conversationsList[].type - 对话类型\n     * @description 此方法接收的是已经过actions.js处理的格式化数据\n     */\n    UPDATE_CONVERSATIONS_LIST(state, conversationsList) {\n        if (Array.isArray(conversationsList)) {\n            // 保留所有需要的字段\n            const processedList = conversationsList.map(conversation => ({\n                id: conversation.id,\n                abstract: conversation.abstract,\n                chatMode: conversation.chatMode || 'general',\n                type: conversation.type,\n                createdAt: conversation.createdAt,\n                updatedAt: conversation.updatedAt,\n                createBy: conversation.createBy,\n                updateBy: conversation.updateBy,\n                remark: conversation.remark,\n                // 保留消息数组（如果存在）\n                messages: conversation.messages || []\n            }));\n            \n            state.aiChat.conversations = processedList;\n            \n            console.log('=== Mutations: 更新对话列表 ===');\n            console.log('更新的对话数量:', processedList.length);\n            console.log('更新后的对话列表:', processedList);\n            console.log('============================');\n        }\n    },\n    \n    /**\n     * 追加对话列表（用于分页加载更多）\n     * @param {Object} state - Vuex状态对象\n     * @param {Array<Object>} conversationsList - 要追加的对话列表数据（已经过actions处理的格式化数据）\n     * @description 此方法接收的是已经过actions.js处理的格式化数据\n     */\n    APPEND_CONVERSATIONS_LIST(state, conversationsList) {\n        if (Array.isArray(conversationsList)) {\n            // 处理新的对话数据\n            const processedList = conversationsList.map(conversation => ({\n                id: conversation.id,\n                abstract: conversation.abstract,\n                chatMode: conversation.chatMode || 'general',\n                type: conversation.type,\n                createdAt: conversation.createdAt,\n                updatedAt: conversation.updatedAt,\n                createBy: conversation.createBy,\n                updateBy: conversation.updateBy,\n                remark: conversation.remark,\n                messages: conversation.messages || []\n            }));\n            \n            // 过滤掉已存在的对话，避免重复\n            const existingIds = new Set(state.aiChat.conversations.map(conv => conv.id));\n            const newConversations = processedList.filter(conv => !existingIds.has(conv.id));\n            \n            // 追加新对话到现有列表\n            state.aiChat.conversations = [...state.aiChat.conversations, ...newConversations];\n            \n            console.log('=== Mutations: 追加对话列表 ===');\n            console.log('新增对话数量:', newConversations.length);\n            console.log('总对话数量:', state.aiChat.conversations.length);\n            console.log('============================');\n        }\n    },\n    \n    /**\n     * 设置历史会话摘要列表\n     * @param {Object} state - Vuex状态对象\n     * @param {Array<Object>} summaries - 历史会话摘要列表\n     */\n    SET_HISTORY_SUMMARIES(state, summaries) {\n        if (!state.aiChat.historySummaries) {\n            state.aiChat.historySummaries = [];\n        }\n        \n        if (Array.isArray(summaries)) {\n            state.aiChat.historySummaries = summaries;\n        }\n    },\n    \n    /**\n     * 添加一条会话记录\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} conversation - 会话对象\n     */\n    ADD_CONVERSATION(state, conversation) {\n        if (!conversation || !conversation.id) return;\n        \n        // 查找是否已存在\n        const index = state.aiChat.conversations.findIndex(c => c.id === conversation.id);\n        \n        if (index !== -1) {\n            // 更新已存在的会话\n            state.aiChat.conversations.splice(index, 1, conversation);\n        } else {\n            // 添加新会话\n            state.aiChat.conversations.push(conversation);\n        }\n    },\n    \n    /**\n     * 移除一条会话记录\n     * @param {Object} state - Vuex状态对象\n     * @param {String} conversationId - 会话ID\n     */\n    REMOVE_CONVERSATION(state, conversationId) {\n        if (!conversationId) return;\n        \n        state.aiChat.conversations = state.aiChat.conversations.filter(c => c.id !== conversationId);\n    },\n    \n    /**\n     * 添加一条历史摘要\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} summary - 历史摘要对象\n     */\n    ADD_HISTORY_SUMMARY(state, summary) {\n        if (!summary || !summary.id) return;\n        \n        if (!state.aiChat.historySummaries) {\n            state.aiChat.historySummaries = [];\n        }\n        \n        // 查找是否已存在\n        const index = state.aiChat.historySummaries.findIndex(s => s.id === summary.id);\n        \n        if (index !== -1) {\n            // 更新已存在的摘要\n            state.aiChat.historySummaries.splice(index, 1, summary);\n        } else {\n            // 添加新摘要\n            state.aiChat.historySummaries.push(summary);\n        }\n    },\n    \n    /**\n     * 移除一条历史摘要\n     * @param {Object} state - Vuex状态对象\n     * @param {String} summaryId - 摘要ID\n     */\n    REMOVE_HISTORY_SUMMARY(state, summaryId) {\n        if (!summaryId) return;\n        \n        if (state.aiChat.historySummaries) {\n            state.aiChat.historySummaries = state.aiChat.historySummaries.filter(s => s.id !== summaryId);\n        }\n    },\n    \n    /**\n     * 根据对话ID更新完整对话内容\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} conversationData - 完整的对话数据\n     * @param {string} conversationData.id - 对话ID\n     */\n    UPDATE_CONVERSATION_DETAIL(state, conversationData) {\n        if (!conversationData || !conversationData.id) return;\n        \n        // 查找是否已存在该对话\n        const index = state.aiChat.conversations.findIndex(\n            conv => conv.id === conversationData.id\n        );\n        \n        if (index !== -1) {\n            // 更新已存在的对话\n            state.aiChat.conversations[index] = conversationData;\n        } else {\n            // 添加新对话\n            state.aiChat.conversations.push(conversationData);\n        }\n        \n        // 设置当前活跃对话\n        state.aiChat.activeConversation = conversationData.id;\n    },\n    \n    /**\n     * 更新当前活跃的对话ID\n     * @param {Object} state - Vuex状态对象\n     * @param {string|null} conversationId - 对话ID\n     */\n    UPDATE_CURRENT_CONVERSATION(state, conversationId) {\n        state.aiChat.activeConversation = conversationId;\n    },\n    \n    /**\n     * 更新用户选择的聊天模式\n     * @param {Object} state - Vuex状态对象\n     * @param {string} chatMode - 聊天模式\n     */\n    UPDATE_CHAT_MODE(state, chatMode) {\n        state.aiChat.chatMode = chatMode;\n    },\n    \n    /**\n     * 更新用户信息\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} userInfo - 用户信息\n     * @param {string} userInfo.school - 用户学校\n     * @param {string} userInfo.major - 用户专业\n     */\n    UPDATE_USER_INFO(state, userInfo) {\n        state.aiChat.userInfo = {\n            ...state.aiChat.userInfo,\n            ...userInfo\n        };\n    },\n    \n    /**\n     * 更新用户学校信息\n     * @param {Object} state - Vuex状态对象\n     * @param {string} school - 用户学校\n     */\n    UPDATE_USER_SCHOOL(state, school) {\n        if (!state.aiChat.userInfo) {\n            state.aiChat.userInfo = {\n                school: '',\n                major: ''\n            };\n        }\n        state.aiChat.userInfo.school = school;\n    },\n    \n    /**\n     * 更新用户专业信息\n     * @param {Object} state - Vuex状态对象\n     * @param {string} major - 用户专业\n     */\n    UPDATE_USER_MAJOR(state, major) {\n        if (!state.aiChat.userInfo) {\n            state.aiChat.userInfo = {\n                school: '',\n                major: ''\n            };\n        }\n        state.aiChat.userInfo.major = major;\n    },\n    \n    /**\n     * 从对话列表中删除指定ID的对话\n     * @param {Object} state - Vuex状态对象\n     * @param {string} conversationId - 对话ID\n     */\n    DELETE_CONVERSATION(state, conversationId) {\n        state.aiChat.conversations = state.aiChat.conversations.filter(\n            conv => conv.id !== conversationId\n        );\n        \n        // 如果删除的是当前活跃对话，则清空当前活跃对话\n        if (state.aiChat.activeConversation === conversationId) {\n            state.aiChat.activeConversation = null;\n        }\n    },\n    \n    /**\n     * 更新分页信息\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} paginationInfo - 分页信息\n     * @param {number} paginationInfo.pageNum - 当前页码\n     * @param {number} paginationInfo.pageSize - 每页大小\n     * @param {number} paginationInfo.total - 总记录数\n     * @param {number} paginationInfo.totalPages - 总页数\n     */\n    UPDATE_PAGINATION(state, paginationInfo) {\n        state.aiChat.pagination = {\n            ...state.aiChat.pagination,\n            ...paginationInfo,\n            hasNext: paginationInfo.pageNum < paginationInfo.totalPages,\n            hasPrev: paginationInfo.pageNum > 1\n        };\n    },\n\n    /**\n     * 设置当前页码\n     * @param {Object} state - Vuex状态对象\n     * @param {number} pageNum - 页码\n     */\n    SET_PAGE_NUM(state, pageNum) {\n        state.aiChat.pagination.pageNum = pageNum;\n        state.aiChat.pagination.hasNext = pageNum < state.aiChat.pagination.totalPages;\n        state.aiChat.pagination.hasPrev = pageNum > 1;\n    },\n\n    /**\n     * 设置每页大小\n     * @param {Object} state - Vuex状态对象\n     * @param {number} pageSize - 每页大小\n     */\n    SET_PAGE_SIZE(state, pageSize) {\n        state.aiChat.pagination.pageSize = pageSize;\n        // 重新计算总页数\n        if (state.aiChat.pagination.total > 0) {\n            state.aiChat.pagination.totalPages = Math.ceil(state.aiChat.pagination.total / pageSize);\n            state.aiChat.pagination.hasNext = state.aiChat.pagination.pageNum < state.aiChat.pagination.totalPages;\n        }\n    },\n\n    /**\n     * 设置分页加载状态\n     * @param {Object} state - Vuex状态对象\n     * @param {boolean} loading - 是否正在加载\n     */\n    SET_PAGINATION_LOADING(state, loading) {\n        state.aiChat.pagination.loading = loading;\n    },\n\n    /**\n     * 重置分页状态\n     * @param {Object} state - Vuex状态对象\n     */\n    RESET_PAGINATION(state) {\n        state.aiChat.pagination = {\n            pageSize: 10,\n            pageNum: 1,\n            total: 0,\n            totalPages: 0,\n            hasNext: false,\n            hasPrev: false,\n            loading: false\n        };\n    },\n\n    /**\n     * 添加消息到当前对话\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} message - 消息对象\n     * @param {string} message.id - 消息ID\n     * @param {string} message.role - 消息角色（user/AI）\n     * @param {string} message.content - 消息内容\n     * @param {string} message.timestamp - 时间戳\n     * @param {string} message.status - 消息状态\n     */\n    ADD_MESSAGE_TO_CURRENT_CONVERSATION(state, message) {\n        if (!message.id) return;\n        \n        const currentConversationId = state.aiChat.activeConversation;\n        \n        // 如果没有当前活跃对话，不添加消息（等待后端返回conversationId）\n        if (!currentConversationId) {\n            console.warn('没有活跃对话，消息将在收到conversationId后添加');\n            return;\n        }\n        \n        // 查找当前对话\n        let conversationIndex = state.aiChat.conversations.findIndex(\n            conv => conv.id == currentConversationId // 使用 == 进行比较，支持字符串和数字的比较\n        );\n        \n        // 如果对话不存在，创建一个临时对话结构\n        if (conversationIndex === -1) {\n            console.log('对话不存在，创建临时对话结构:', currentConversationId);\n            const tempConversation = {\n                id: currentConversationId,\n                abstract: '新对话',\n                chatMode: state.aiChat.chatMode || 'general',\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString(),\n                messages: []\n            };\n            \n            state.aiChat.conversations.push(tempConversation);\n            conversationIndex = state.aiChat.conversations.length - 1;\n        }\n        \n        const conversation = state.aiChat.conversations[conversationIndex];\n        \n        // 确保messages数组存在\n        if (!conversation.messages) {\n            conversation.messages = [];\n        }\n        \n        // 检查是否已存在相同ID的消息，避免重复添加\n        const existingMessageIndex = conversation.messages.findIndex(\n            msg => msg.id === message.id\n        );\n        \n        if (existingMessageIndex === -1) {\n            // 消息不存在，添加新消息\n            conversation.messages.push(message);\n            \n            // 更新对话的更新时间\n            conversation.updatedAt = new Date().toISOString();\n            \n            console.log('✅ 已添加消息到对话:', {\n                conversationId: currentConversationId,\n                messageId: message.id,\n                messageRole: message.role,\n                totalMessages: conversation.messages.length\n            });\n        } else {\n            // 消息已存在，仅更新内容（如果有必要）\n            console.log('消息已存在，跳过添加:', message.id);\n        }\n    },\n\n    /**\n     * 更新指定消息的内容\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} updateInfo - 更新信息\n     * @param {string} updateInfo.messageId - 消息ID\n     * @param {string} updateInfo.content - 新的消息内容\n     * @param {boolean} [updateInfo.streaming] - 是否正在流式传输\n     * @param {string} [updateInfo.status] - 消息状态\n     * @param {boolean} [updateInfo.isComplete] - 消息是否完整\n     * @param {boolean} [updateInfo.isStreaming] - 是否正在流式传输（兼容性）\n     * @param {boolean} [updateInfo.hasError] - 是否有错误\n     */\n    UPDATE_MESSAGE_CONTENT(state, updateInfo) {\n        if (!updateInfo || !updateInfo.messageId) return;\n        \n        const currentConversationId = state.aiChat.activeConversation;\n        if (!currentConversationId) return;\n        \n        // 查找当前对话\n        const conversationIndex = state.aiChat.conversations.findIndex(\n            conv => conv.id === currentConversationId\n        );\n        \n        if (conversationIndex !== -1) {\n            const conversation = state.aiChat.conversations[conversationIndex];\n            \n            if (conversation.messages) {\n                // 查找要更新的消息\n                const messageIndex = conversation.messages.findIndex(\n                    msg => msg.id === updateInfo.messageId\n                );\n                \n                if (messageIndex !== -1) {\n                    const message = conversation.messages[messageIndex];\n                    \n                    // 更新消息内容\n                    message.content = updateInfo.content;\n                    \n                    // 更新streaming属性\n                    if (updateInfo.hasOwnProperty('streaming')) {\n                        message.streaming = updateInfo.streaming;\n                    }\n                    \n                    // 更新status属性\n                    if (updateInfo.hasOwnProperty('status')) {\n                        message.status = updateInfo.status;\n                    }\n                    \n                    // 更新其他属性（兼容性）\n                    if (updateInfo.hasOwnProperty('isComplete')) {\n                        message.isComplete = updateInfo.isComplete;\n                    }\n                    \n                    if (updateInfo.hasOwnProperty('isStreaming')) {\n                        message.streaming = updateInfo.isStreaming; // 映射到streaming属性\n                    }\n                    \n                    if (updateInfo.hasOwnProperty('hasError')) {\n                        message.hasError = updateInfo.hasError;\n                    }\n                    \n                    // 更新时间戳\n                    message.timestamp = new Date().toISOString();\n                    \n                    // 更新对话的更新时间\n                    conversation.updatedAt = new Date().toISOString();\n                }\n            }\n        }\n    },\n\n    /**\n     * 清空当前对话的所有消息\n     * @param {Object} state - Vuex状态对象\n     */\n    CLEAR_CURRENT_CONVERSATION_MESSAGES(state) {\n        const currentConversationId = state.aiChat.activeConversation;\n        if (!currentConversationId) return;\n        \n        const conversationIndex = state.aiChat.conversations.findIndex(\n            conv => conv.id === currentConversationId\n        );\n        \n        if (conversationIndex !== -1) {\n            const conversation = state.aiChat.conversations[conversationIndex];\n            conversation.messages = [];\n            conversation.updatedAt = new Date().toISOString();\n        }\n    },\n\n    /**\n     * 创建新的对话（准备状态）\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} [conversationInfo] - 对话信息\n     * @param {string} [conversationInfo.chatMode] - 聊天模式\n     */\n    CREATE_NEW_CONVERSATION(state, conversationInfo = {}) {\n        // 清空当前活跃对话ID，等待后端返回新的conversationId\n        state.aiChat.activeConversation = null;\n        \n        // 更新聊天模式\n        if (conversationInfo.chatMode) {\n            state.aiChat.chatMode = conversationInfo.chatMode;\n        }\n        \n        console.log('✅ 已准备新对话状态，等待后端返回conversationId');\n        console.log('   - 当前活跃对话ID:', state.aiChat.activeConversation);\n        console.log('   - 聊天模式:', state.aiChat.chatMode);\n    },\n\n    /**\n     * 根据后端返回的conversationId创建或更新对话\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} payload - 载荷对象\n     * @param {string} payload.conversationId - 后端返回的对话ID\n     * @param {string} [payload.abstract] - 对话摘要\n     * @param {Array} [payload.messages] - 消息列表\n     */\n    CREATE_CONVERSATION_FROM_BACKEND(state, payload) {\n        if (!payload || !payload.conversationId) return;\n        \n        const { conversationId, abstract, messages = [] } = payload;\n        \n        // 查找是否已存在该对话\n        const existingConversationIndex = state.aiChat.conversations.findIndex(\n            conv => conv.id === conversationId\n        );\n        \n        if (existingConversationIndex === -1) {\n            // 对话不存在，创建新对话\n            const newConversation = {\n                id: conversationId,\n                abstract: abstract || '新对话',\n                chatMode: state.aiChat.chatMode,\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString(),\n                messages: messages\n            };\n            \n            state.aiChat.conversations.push(newConversation);\n            console.log('已创建新对话:', conversationId);\n        } else {\n            // 对话已存在，更新消息列表\n            const conversation = state.aiChat.conversations[existingConversationIndex];\n            if (messages.length > 0) {\n                conversation.messages = messages;\n            }\n            conversation.updatedAt = new Date().toISOString();\n            console.log('已更新现有对话:', conversationId);\n        }\n        \n        // 设置为当前活跃对话\n        state.aiChat.activeConversation = conversationId;\n    },\n\n    /**\n     * 设置当前对话的消息列表\n     * @param {Object} state - Vuex状态对象\n     * @param {Object} payload - 载荷对象\n     * @param {string} payload.conversationId - 对话ID\n     * @param {Array} payload.messages - 消息列表\n     */\n    SET_CURRENT_CONVERSATION_MESSAGES(state, payload) {\n        if (!payload || !payload.conversationId || !Array.isArray(payload.messages)) return;\n        \n        const { conversationId, messages } = payload;\n        \n        // 查找对话\n        const conversationIndex = state.aiChat.conversations.findIndex(\n            conv => conv.id === conversationId\n        );\n        \n        if (conversationIndex !== -1) {\n            // 更新现有对话的消息列表\n            const conversation = state.aiChat.conversations[conversationIndex];\n            conversation.messages = messages;\n            conversation.updatedAt = new Date().toISOString();\n        } else {\n            // 创建新对话\n            const newConversation = {\n                id: conversationId,\n                abstract: messages.length > 0 ? \n                    (messages[0].content.substring(0, 30) + (messages[0].content.length > 30 ? '...' : '')) : \n                    '新对话',\n                chatMode: state.aiChat.chatMode,\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString(),\n                messages: messages\n            };\n            \n            state.aiChat.conversations.push(newConversation);\n        }\n        \n        // 设置为当前活跃对话\n        state.aiChat.activeConversation = conversationId;\n    }\n}; "],"names":["mutations","state","conversationsList","processedList","conversation","uni","existingIds","conv","newConversations","summaries","index","c","conversationId","summary","s","summaryId","conversationData","chatMode","userInfo","school","major","paginationInfo","pageNum","pageSize","loading","message","currentConversationId","conversationIndex","tempConversation","msg","updateInfo","messageIndex","conversationInfo","payload","abstract","messages","existingConversationIndex","newConversation"],"mappings":"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"}