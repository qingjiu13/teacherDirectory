{"version":3,"file":"getters.js","sources":["store/user/myService/getters.js"],"sourcesContent":["/**\r\n * myService模块的getters\r\n * @module store/user/myService/getters\r\n */\r\n\r\nexport default {\r\n    /**\r\n     * 获取所有服务\r\n     * @param {Object} state - 当前模块的状态\r\n     * @returns {Array} 服务数组\r\n     */\r\n    getAllServices: state => state.service,\r\n    \r\n    /**\r\n     * 按ID获取服务\r\n     * @param {Object} state - 当前模块的状态\r\n     * @returns {Function} 返回一个函数，该函数接受服务ID并返回对应的服务对象\r\n     */\r\n    getServiceById: state => id => state.service.find(service => service.id === id),\r\n    \r\n    /**\r\n     * 按类型获取服务\r\n     * @param {Object} state - 当前模块的状态\r\n     * @returns {Function} 返回一个函数，该函数接受服务类型名称并返回该类型的所有服务\r\n     */\r\n    getServicesByType: state => typeName => state.service.filter(service => service.type.typename === typeName),\r\n    \r\n    /**\r\n     * 获取服务总数\r\n     * @param {Object} state - 当前模块的状态\r\n     * @returns {Number} 服务总数\r\n     */\r\n    getServiceCount: state => state.service.length,\r\n    \r\n    /**\r\n     * 获取服务价格区间\r\n     * @param {Object} state - 当前模块的状态\r\n     * @returns {Object} 包含最低价和最高价的对象\r\n     */\r\n    getPriceRange: state => {\r\n        const prices = state.service.map(service => {\r\n            // 提取价格中的数字部分\r\n            const priceNum = parseInt(service.price.replace(/[^0-9]/g, ''));\r\n            return isNaN(priceNum) ? 0 : priceNum;\r\n        });\r\n        \r\n        return {\r\n            min: Math.min(...prices),\r\n            max: Math.max(...prices)\r\n        };\r\n    },\r\n    \r\n    /**\r\n     * 获取当前正在编辑的服务\r\n     * @param {Object} state - 当前模块的状态\r\n     * @returns {Object|null} 当前正在编辑的服务或null\r\n     */\r\n    getCurrentEditingService: state => state.currentEditingService,\r\n    \r\n    /**\r\n     * 获取可用的服务类型列表\r\n     * @param {Object} state - 当前模块的状态\r\n     * @returns {Array} 服务类型列表\r\n     */\r\n    getServiceTypes: state => state.serviceTypes,\r\n    \r\n    /**\r\n     * 获取按创建时间排序的服务列表\r\n     * @param {Object} state - 当前模块的状态\r\n     * @returns {Array} 按创建时间排序的服务数组\r\n     */\r\n    getServicesSortedByCreateTime: state => {\r\n        return [...state.service].sort((a, b) => {\r\n            return new Date(b.createTime) - new Date(a.createTime);\r\n        });\r\n    },\r\n    \r\n    /**\r\n     * 获取按更新时间排序的服务列表\r\n     * @param {Object} state - 当前模块的状态\r\n     * @returns {Array} 按更新时间排序的服务数组\r\n     */\r\n    getServicesSortedByUpdateTime: state => {\r\n        return [...state.service].sort((a, b) => {\r\n            return new Date(b.updateTime) - new Date(a.updateTime);\r\n        });\r\n    },\r\n    \r\n    /**\r\n     * 获取按价格排序的服务列表\r\n     * @param {Object} state - 当前模块的状态\r\n     * @param {Boolean} ascending - 是否升序排列\r\n     * @returns {Array} 按价格排序的服务数组\r\n     */\r\n    getServicesSortedByPrice: state => ascending => {\r\n        return [...state.service].sort((a, b) => {\r\n            const priceA = parseInt(a.price.replace(/[^0-9]/g, ''));\r\n            const priceB = parseInt(b.price.replace(/[^0-9]/g, ''));\r\n            return ascending ? priceA - priceB : priceB - priceA;\r\n        });\r\n    },\r\n    \r\n    /**\r\n     * 获取按当前过滤条件筛选的服务列表\r\n     * @param {Object} state - 当前模块的状态\r\n     * @returns {Array} 筛选后的服务数组\r\n     */\r\n    getFilteredServices: state => {\r\n        return state.service.filter(service => {\r\n            // 类型筛选\r\n            if (state.filter.type && service.type.typename !== state.filter.type) {\r\n                return false;\r\n            }\r\n            \r\n            // 价格范围筛选\r\n            const priceNum = parseInt(service.price.replace(/[^0-9]/g, ''));\r\n            if (priceNum < state.filter.priceRange.min || priceNum > state.filter.priceRange.max) {\r\n                return false;\r\n            }\r\n            \r\n            // 关键词搜索\r\n            if (state.filter.keyword) {\r\n                const keyword = state.filter.keyword.toLowerCase();\r\n                const name = (service.name || '').toLowerCase();\r\n                const description = (service.description || '').toLowerCase();\r\n                \r\n                if (!name.includes(keyword) && !description.includes(keyword)) {\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n            return true;\r\n        });\r\n    },\r\n    \r\n    /**\r\n     * 获取按状态分组的服务统计\r\n     * @param {Object} state - 当前模块的状态\r\n     * @returns {Object} 包含各状态服务数量的对象\r\n     */\r\n    getServiceStatusStats: state => {\r\n        const stats = {\r\n            active: 0,\r\n            inactive: 0,\r\n            draft: 0\r\n        };\r\n        \r\n        state.service.forEach(service => {\r\n            const status = service.status || 'active';\r\n            if (stats[status] !== undefined) {\r\n                stats[status]++;\r\n            }\r\n        });\r\n        \r\n        return stats;\r\n    },\r\n    \r\n    /**\r\n     * 获取按类型分组的服务列表\r\n     * @param {Object} state - 当前模块的状态\r\n     * @returns {Object} 按类型分组的服务对象\r\n     */\r\n    getServicesGroupedByType: state => {\r\n        const result = {};\r\n        \r\n        state.service.forEach(service => {\r\n            const typename = service.type.typename;\r\n            if (!result[typename]) {\r\n                result[typename] = [];\r\n            }\r\n            result[typename].push(service);\r\n        });\r\n        \r\n        return result;\r\n    }\r\n}; "],"names":["getters","state","id","service","typeName","prices","priceNum","a","b","ascending","priceA","priceB","keyword","name","description","stats","status","result","typename"],"mappings":"aAKA,MAAeA,EAAA,CAMX,eAAgBC,GAASA,EAAM,QAO/B,eAAgBA,GAASC,GAAMD,EAAM,QAAQ,KAAKE,GAAWA,EAAQ,KAAOD,CAAE,EAO9E,kBAAmBD,GAASG,GAAYH,EAAM,QAAQ,OAAOE,GAAWA,EAAQ,KAAK,WAAaC,CAAQ,EAO1G,gBAAiBH,GAASA,EAAM,QAAQ,OAOxC,cAAeA,GAAS,CACpB,MAAMI,EAASJ,EAAM,QAAQ,IAAIE,GAAW,CAExC,MAAMG,EAAW,SAASH,EAAQ,MAAM,QAAQ,UAAW,EAAE,CAAC,EAC9D,OAAO,MAAMG,CAAQ,EAAI,EAAIA,CACzC,CAAS,EAED,MAAO,CACH,IAAK,KAAK,IAAI,GAAGD,CAAM,EACvB,IAAK,KAAK,IAAI,GAAGA,CAAM,CACnC,CACK,EAOD,yBAA0BJ,GAASA,EAAM,sBAOzC,gBAAiBA,GAASA,EAAM,aAOhC,8BAA+BA,GACpB,CAAC,GAAGA,EAAM,OAAO,EAAE,KAAK,CAACM,EAAGC,IACxB,IAAI,KAAKA,EAAE,UAAU,EAAI,IAAI,KAAKD,EAAE,UAAU,CACxD,EAQL,8BAA+BN,GACpB,CAAC,GAAGA,EAAM,OAAO,EAAE,KAAK,CAACM,EAAGC,IACxB,IAAI,KAAKA,EAAE,UAAU,EAAI,IAAI,KAAKD,EAAE,UAAU,CACxD,EASL,yBAA0BN,GAASQ,GACxB,CAAC,GAAGR,EAAM,OAAO,EAAE,KAAK,CAACM,EAAGC,IAAM,CACrC,MAAME,EAAS,SAASH,EAAE,MAAM,QAAQ,UAAW,EAAE,CAAC,EAChDI,EAAS,SAASH,EAAE,MAAM,QAAQ,UAAW,EAAE,CAAC,EACtD,OAAOC,EAAYC,EAASC,EAASA,EAASD,CAC1D,CAAS,EAQL,oBAAqBT,GACVA,EAAM,QAAQ,OAAOE,GAAW,CAEnC,GAAIF,EAAM,OAAO,MAAQE,EAAQ,KAAK,WAAaF,EAAM,OAAO,KAC5D,MAAO,GAIX,MAAMK,EAAW,SAASH,EAAQ,MAAM,QAAQ,UAAW,EAAE,CAAC,EAC9D,GAAIG,EAAWL,EAAM,OAAO,WAAW,KAAOK,EAAWL,EAAM,OAAO,WAAW,IAC7E,MAAO,GAIX,GAAIA,EAAM,OAAO,QAAS,CACtB,MAAMW,EAAUX,EAAM,OAAO,QAAQ,YAAW,EAC1CY,GAAQV,EAAQ,MAAQ,IAAI,YAAW,EACvCW,GAAeX,EAAQ,aAAe,IAAI,YAAW,EAE3D,GAAI,CAACU,EAAK,SAASD,CAAO,GAAK,CAACE,EAAY,SAASF,CAAO,EACxD,MAAO,EAEd,CAED,MAAO,EACnB,CAAS,EAQL,sBAAuBX,GAAS,CAC5B,MAAMc,EAAQ,CACV,OAAQ,EACR,SAAU,EACV,MAAO,CACnB,EAEQ,OAAAd,EAAM,QAAQ,QAAQE,GAAW,CAC7B,MAAMa,EAASb,EAAQ,QAAU,SAC7BY,EAAMC,CAAM,IAAM,QAClBD,EAAMC,CAAM,GAE5B,CAAS,EAEMD,CACV,EAOD,yBAA0Bd,GAAS,CAC/B,MAAMgB,EAAS,CAAA,EAEf,OAAAhB,EAAM,QAAQ,QAAQE,GAAW,CAC7B,MAAMe,EAAWf,EAAQ,KAAK,SACzBc,EAAOC,CAAQ,IAChBD,EAAOC,CAAQ,EAAI,IAEvBD,EAAOC,CAAQ,EAAE,KAAKf,CAAO,CACzC,CAAS,EAEMc,CACV,CACL"}