{"version":3,"file":"actions.js","sources":["store/user/ai-chat/actions.js"],"sourcesContent":["/**\n * ai-chat模块的actions\n * @module store/user/ai-chat/actions\n */\n\n// 导入JWT工具\nimport { apiRequest, getCurrentToken } from '../JWT.js';\nimport { useGlobalStore } from '../../global.js';\nconst getApiPrefix = () => {\n    const globalStore = useGlobalStore()\n    return globalStore.apiBaseUrl\n}\n\n// const API_BASE_URL = 'http://v8e5bd5f.natappfree.cc';\n// const API_BASE_URL = 'http://47.109.207.44:8088';\n\nexport default {\n    /**\n     * 设置当前活跃的聊天会话\n     * @param {Object} context - Vuex上下文\n     * @param {string} chatId - 聊天会话ID\n     */\n    setCurrentChat({ commit }, chatId) {\n        commit('UPDATE_CURRENT_CONVERSATION', chatId);\n    },\n    \n    /**\n     * 发送问题到AI并获取回答\n     * @param {Object} context - Vuex上下文\n     * @param {Object} payload - 请求数据\n     * @param {string} payload.content - 用户问题内容\n     * @param {string} [payload.topic] - 聊天主题，可选\n     * @param {boolean} [payload.skipUserMessage] - 是否跳过添加用户消息（用于重试场景）\n     * @param {Function} [payload.onMessage] - 接收消息的回调函数\n     * @param {Function} [payload.onComplete] - 完成的回调函数\n     * @param {Function} [payload.onError] - 错误处理回调函数\n     * @returns {Promise<Object>} 返回请求结果\n     */\n    async sendQuestion({ commit, state, rootState }, payload) {\n        try {\n            let userMessage = null;\n            let aiMessageId = null;\n            let aiMessage = null;\n            let isNewConversation = !state.aiChat.activeConversation;\n            \n            // 构建请求数据 - 确保conversationId为数字或null\n            let conversationIdToSend = null;\n            if (state.aiChat.activeConversation) {\n                // 如果conversationId是数字字符串，转换为数字\n                const activeId = state.aiChat.activeConversation;\n                if (/^\\d+$/.test(activeId)) {\n                    conversationIdToSend = parseInt(activeId, 10);\n                } else if (typeof activeId === 'number') {\n                    conversationIdToSend = activeId;\n                }\n            }\n            \n            // 如果是继续对话（有conversationId）且不跳过用户消息，先添加用户消息\n            if (!isNewConversation && !payload.skipUserMessage) {\n                userMessage = {\n                    id: `msg-user-${Date.now()}`,\n                    role: 'user',\n                    content: payload.content,\n                    timestamp: new Date().toISOString(),\n                    status: 'sent'\n                };\n                \n                // 立即添加用户消息到当前对话\n                commit('ADD_MESSAGE_TO_CURRENT_CONVERSATION', userMessage);\n                \n                console.log('✅ 已添加用户消息到历史对话:', userMessage.id);\n            }\n            \n            const requestData = {\n                category: 'DOU_BAO_CHAT',\n                timestamp: new Date().getTime(),\n                payload: {\n                    content: payload.content,\n                    topic: state.aiChat.chatMode,\n                    school: rootState.user.schoolMajorRequest.undergraduateSchoolSearch.selectedSchool,\n                    major: rootState.user.schoolMajorRequest.undergraduateMajorSearch.selectedMajor,\n                    conversationId: conversationIdToSend\n                }\n            };\n\n            console.log('=== AI聊天发送数据 ===');\n            console.log('原始activeConversation:', state.aiChat.activeConversation);\n            console.log('处理后的conversationId:', conversationIdToSend);\n            console.log('是否为新对话:', conversationIdToSend === null ? '是' : '否');\n            console.log('是否跳过用户消息:', payload.skipUserMessage);\n            console.log('完整请求数据:', JSON.stringify(requestData, null, 2));\n            console.log('==================');\n            \n            // 使用WebSocket连接发送消息\n            const token = getCurrentToken();\n            const wsUrl = `ws://v8e5bd5f.natappfree.cc/websocket/message?token=${token}`;\n            // const wsUrl = `ws://47.109.207.44:8088/websocket/message?token=${token}`;\n            \n            const response = await new Promise((resolve, reject) => {\n                // 使用uni-app的WebSocket API\n                const socketTask = uni.connectSocket({\n                    url: wsUrl,\n                    success: () => {\n                        console.log('WebSocket连接请求已发送');\n                    },\n                    fail: (error) => {\n                        console.error('WebSocket连接失败:', error);\n                        reject(new Error('WebSocket连接失败'));\n                    }\n                });\n                \n                // 流式传输相关变量\n                let streamContent = '';\n                let conversationId = conversationIdToSend; // 初始化为当前对话ID\n                let messageCount = 0;\n                let isStreamComplete = false;\n                let isConversationCreated = false; // 标记对话是否已创建\n                \n                // 连接打开\n                socketTask.onOpen(() => {\n                    console.log('WebSocket连接已建立');\n                    // 发送请求数据\n                    socketTask.send({\n                        data: JSON.stringify(requestData),\n                        success: () => {\n                            console.log('数据发送成功');\n                        },\n                        fail: (error) => {\n                            console.error('数据发送失败:', error);\n                            reject(new Error('数据发送失败'));\n                        }\n                    });\n                });\n                \n                // 接收消息 - 流式处理\n                socketTask.onMessage((event) => {\n                    try {\n                        console.log('=== 流式消息 ===');\n                        console.log('原始数据:', event.data);\n                        \n                        // 检查消息是否为空或无效\n                        if (!event.data) {\n                            console.warn('收到空消息');\n                            return;\n                        }\n                        \n                        let data;\n                        \n                        // 尝试解析JSON消息\n                        if (typeof event.data === 'string') {\n                            try {\n                                data = JSON.parse(event.data);\n                            } catch (parseError) {\n                                console.warn('消息不是有效的JSON格式，尝试直接使用:', event.data);\n                                data = {\n                                    content: event.data,\n                                    message: event.data,\n                                    category: 'DOU_BAO_CHAT'\n                                };\n                            }\n                        } else {\n                            data = event.data;\n                        }\n                        \n                        console.log('解析后数据:', JSON.stringify(data, null, 2));\n                        \n                        // 检查是否为连接确认消息\n                        const content = data.content || data.message || data.payload?.content || '';\n                        const isConnectionMessage = content === '连接成功' || content === 'connected' || content === 'connection established';\n                        \n                        if (isConnectionMessage) {\n                            console.log('✅ 收到连接确认消息，开始接收流式数据...');\n                            return;\n                        }\n                        \n                        // 检查是否为DOU_BAO_CHAT类型的消息\n                        if (data.category === 'DOU_BAO_CHAT') {\n                            messageCount++;\n                            \n                            // 提取消息内容\n                            let messageContent = data.content || data.message || data.payload?.content || '';\n                            \n                            // 更新会话ID（如果收到）- 修复：从payload中获取conversationId\n                            const newConversationId = data.conversationId || data.payload?.conversationId;\n                            if (newConversationId && !conversationId) {\n                                console.log('🆔 收到conversationId:', newConversationId, '来源:', data.conversationId ? 'data.conversationId' : 'data.payload.conversationId');\n                                \n                                // 如果是新对话且收到了conversationId，创建对话和消息\n                                if (isNewConversation && newConversationId && !isConversationCreated) {\n                                    console.log('🆔 收到新对话的conversationId，创建对话:', newConversationId);\n                                    \n                                    // 创建对话\n                                    commit('CREATE_CONVERSATION_FROM_BACKEND', {\n                                        conversationId: newConversationId,\n                                        abstract: payload.content.substring(0, 30) + (payload.content.length > 30 ? '...' : ''),\n                                        messages: []\n                                    });\n                                    \n                                    // 如果不跳过用户消息，则创建用户消息记录\n                                    if (!payload.skipUserMessage) {\n                                        userMessage = {\n                                            id: `msg-user-${Date.now()}`,\n                                            role: 'user',\n                                            content: payload.content,\n                                            timestamp: new Date().toISOString(),\n                                            status: 'sent'\n                                        };\n                                        \n                                        // 添加用户消息\n                                        commit('ADD_MESSAGE_TO_CURRENT_CONVERSATION', userMessage);\n                                    }\n                                    \n                                    isConversationCreated = true;\n                                }\n                                \n                                conversationId = newConversationId;\n                            }\n                            \n                            // 如果还没有AI消息ID，创建AI消息\n                            if (!aiMessageId) {\n                                aiMessageId = payload.aiMessageId || `msg-ai-${Date.now()}`;\n                                aiMessage = {\n                                    id: aiMessageId,\n                                    role: 'AI',\n                                    content: '',\n                                    timestamp: new Date().toISOString(),\n                                    streaming: true,\n                                    status: 'sending'\n                                };\n                                \n                                // 添加AI消息\n                                commit('ADD_MESSAGE_TO_CURRENT_CONVERSATION', aiMessage);\n                                console.log('✅ 已创建AI消息:', aiMessageId);\n                            }\n                            \n                            // 检查是否为空字段（结束标识）\n                            if (messageContent === '' || messageContent === null || messageContent === undefined) {\n                                console.log('🏁 收到空字段，流式传输完成');\n                                \n                                // 在结束时再次检查并更新conversationId\n                                const finalConversationId = conversationId || data.conversationId || data.payload?.conversationId;\n                                if (finalConversationId && !conversationId) {\n                                    conversationId = finalConversationId;\n                                    console.log('🆔 在结束时更新conversationId:', conversationId);\n                                }\n                                \n                                isStreamComplete = true;\n                                \n                                // 清理最终内容，去除多余空行\n                                const cleanedContent = streamContent.replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n').trim();\n                                \n                                // 更新AI消息为完成状态\n                                if (aiMessageId) {\n                                    commit('UPDATE_MESSAGE_CONTENT', {\n                                        messageId: aiMessageId,\n                                        content: cleanedContent,\n                                        streaming: false,\n                                        status: 'sent'\n                                    });\n                                }\n                                \n                                console.log('✅ 流式传输完成:', {\n                                    content: cleanedContent,\n                                    conversationId: conversationId,\n                                    messageCount: messageCount\n                                });\n                                console.log('   - 最终内容长度:', cleanedContent.length);\n                                console.log('   - 总消息片段数:', messageCount);\n                                console.log('   - 会话ID:', conversationId);\n                                \n                                // 调用完成回调\n                                if (payload.onComplete) {\n                                    payload.onComplete({\n                                        content: cleanedContent,\n                                        conversationId: conversationId,\n                                        messageCount: messageCount\n                                    });\n                                }\n                                \n                                // 解析并返回最终结果\n                                resolve({\n                                    success: true,\n                                    data: {\n                                        content: cleanedContent,\n                                        message: cleanedContent,\n                                        conversationId: conversationId,\n                                        messageCount: messageCount,\n                                        isStreamComplete: true\n                                    }\n                                });\n                                \n                                // 关闭连接\n                                socketTask.close();\n                                return;\n                            }\n                            \n                            \n                            // 累积流式内容\n                            streamContent += messageContent;\n                            \n                            console.log(`📝 流式片段 ${messageCount}:`, messageContent);\n                            console.log(`📄 累积内容长度: ${streamContent.length}`);\n                            console.log(`🆔 会话ID: ${conversationId}`);\n                            \n                            // 实时更新AI消息内容\n                            if (aiMessageId) {\n                                commit('UPDATE_MESSAGE_CONTENT', {\n                                    messageId: aiMessageId,\n                                    content: streamContent,\n                                    streaming: true,\n                                    status: 'sending'\n                                });\n                            }\n                            \n                            // 调用流式消息回调\n                            if (payload.onMessage) {\n                                payload.onMessage({\n                                    content: messageContent,\n                                    fullContent: streamContent,\n                                    isComplete: false,\n                                    conversationId: conversationId,\n                                    messageCount: messageCount\n                                });\n                            }\n                            \n                            // 检查是否为其他结束标志（保留原有逻辑作为备用）\n                            const isEndMessage = data.isEnd || data.finished || data.complete || \n                                                messageContent.includes('[END]') || \n                                                messageContent.includes('[DONE]');\n                            \n                            if (isEndMessage) {\n                                console.log('🏁 流式传输完成（其他结束标志）');\n                                \n                                // 在结束时再次检查并更新conversationId\n                                const finalConversationId = conversationId || data.conversationId || data.payload?.conversationId;\n                                if (finalConversationId && !conversationId) {\n                                    conversationId = finalConversationId;\n                                    console.log('🆔 在结束时更新conversationId（其他结束标志）:', conversationId);\n                                }\n                                \n                                isStreamComplete = true;\n                                \n                                // 清理最终内容，去除多余空行\n                                const cleanedContent = streamContent.replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n').trim();\n                                \n                                // 更新AI消息为完成状态\n                                if (aiMessageId) {\n                                    commit('UPDATE_MESSAGE_CONTENT', {\n                                        messageId: aiMessageId,\n                                        content: cleanedContent,\n                                        streaming: false,\n                                        status: 'sent'\n                                    });\n                                }\n                                \n                                // 调用完成回调\n                                if (payload.onComplete) {\n                                    payload.onComplete({\n                                        content: cleanedContent,\n                                        conversationId: conversationId,\n                                        messageCount: messageCount\n                                    });\n                                }\n                                \n                                // 解析并返回最终结果\n                                resolve({\n                                    success: true,\n                                    data: {\n                                        content: cleanedContent,\n                                        message: cleanedContent,\n                                        conversationId: conversationId,\n                                        messageCount: messageCount,\n                                        isStreamComplete: true\n                                    }\n                                });\n                                \n                                // 关闭连接\n                                socketTask.close();\n                            }\n                        } else {\n                            console.log('⚠️ 收到非DOU_BAO_CHAT类型消息:', data);\n                        }\n                        \n                    } catch (error) {\n                        console.error('❌ 解析WebSocket消息失败:', error);\n                        console.error('原始消息数据:', event.data);\n                        \n                        if (payload.onError) {\n                            payload.onError(new Error(`消息格式错误: ${error.message}`));\n                        }\n                        \n                        reject(new Error(`消息格式错误: ${error.message}`));\n                    }\n                });\n                \n                // 连接错误\n                socketTask.onError((error) => {\n                    console.error('❌ WebSocket连接错误:', error);\n                    if (payload.onError) {\n                        payload.onError(new Error('WebSocket连接出现错误'));\n                    }\n                    reject(new Error('WebSocket连接出现错误'));\n                });\n                \n                // 连接关闭\n                socketTask.onClose((event) => {\n                    console.log('🔌 WebSocket连接已关闭:', event.code, event.reason);\n                    \n                    // 如果流式传输未完成但连接关闭，认为传输完成\n                    if (!isStreamComplete && streamContent.length > 0) {\n                        console.log('⚠️ 连接提前关闭，但已接收到内容，认为传输完成');\n                        \n                        // 清理最终内容，去除多余空行\n                        const cleanedContent = streamContent.replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n').trim();\n                        \n                        // 更新AI消息为完成状态\n                        if (aiMessageId) {\n                            commit('UPDATE_MESSAGE_CONTENT', {\n                                messageId: aiMessageId,\n                                content: cleanedContent,\n                                streaming: false,\n                                status: 'sent'\n                            });\n                        }\n                        \n                        if (payload.onComplete) {\n                            payload.onComplete({\n                                content: cleanedContent,\n                                conversationId: conversationId,\n                                messageCount: messageCount\n                            });\n                        }\n                        \n                        resolve({\n                            success: true,\n                            data: {\n                                content: cleanedContent,\n                                message: cleanedContent,\n                                conversationId: conversationId,\n                                messageCount: messageCount,\n                                isStreamComplete: true\n                            }\n                        });\n                    } else if (!isStreamComplete) {\n                        // 如果没有接收到任何内容且连接关闭，认为是错误\n                        const errorMessage = '连接意外关闭，未接收到完整响应';\n                        if (payload.onError) {\n                            payload.onError(new Error(errorMessage));\n                        }\n                        reject(new Error(errorMessage));\n                    }\n                });\n            });\n\n            return response;\n            \n        } catch (error) {\n            console.error('❌ sendQuestion执行失败:', error);\n            \n            // 如果有错误回调，调用它\n            if (payload.onError) {\n                payload.onError(error);\n            }\n            \n            throw error;\n        }\n    },\n\n    /**\n     * 加载特定对话的完整内容\n     * @param {Object} context - Vuex上下文\n     * @param {string} conversationId - 对话ID\n     * @returns {Promise<Object>} 返回请求结果\n     */\n    async loadChat({ commit, state }, conversationId) {\n        try {\n            // 从conversations中找到对应的对话以获取topic信息\n            const conversation = state.aiChat.conversations.find(conv => conv.id == conversationId);\n            const topic = conversation?.chatMode || 'general';\n            \n            console.log('=== 强制加载对话详情（无缓存） ===');\n            console.log('对话ID:', conversationId);\n            console.log('对话模式:', topic);\n            console.log('对话信息:', conversation);\n            console.log('===================================');\n            \n            // 强制从后端重新获取数据，添加时间戳防止缓存\n            const response = await apiRequest(`${getApiPrefix()}/yanshilu/aiChat/detail`, 'POST', { \n                id: parseInt(conversationId),\n                type: \"DOU_BAO_CHAT\",\n                topic: topic,\n                timestamp: Date.now() // 添加时间戳防止缓存\n            });\n            \n            console.log('loadChat API响应:', response);\n            \n            if (response.success) {\n                // 修复：正确处理数据层级 - response.data是整个后端响应，需要取response.data.data\n                const backendResponse = response.data;\n                console.log('后端完整响应:', backendResponse);\n                \n                // 检查后端响应格式\n                if (backendResponse.code !== 200) {\n                    throw new Error(backendResponse.msg || '后端返回错误');\n                }\n                \n                // 更新聊天模式\n                if (backendResponse.data && backendResponse.data.length > 0 && backendResponse.data[0].topic) {\n                    commit('UPDATE_CHAT_MODE', backendResponse.data[0].topic);\n                } else if (topic) {\n                    commit('UPDATE_CHAT_MODE', topic);\n                }\n                \n                // 获取实际的消息数据数组\n                const messageData = backendResponse.data || [];\n                console.log('提取的消息数据:', messageData);\n                \n                // 将question和answer转换为消息格式\n                const messages = [];\n                \n                messageData.forEach((item, index) => {\n                    // 添加用户问题消息\n                    if (item.question) {\n                        messages.push({\n                            id: `msg-user-${item.id}-${index}`,\n                            role: 'user',\n                            content: item.question,\n                            timestamp: item.createTime || item.updateTime || new Date().toISOString(),\n                            status: 'sent'\n                        });\n                    }\n                    \n                    // 添加AI回答消息\n                    if (item.answer) {\n                        messages.push({\n                            id: `msg-ai-${item.id}-${index}`,\n                            role: 'AI',\n                            content: item.answer,\n                            timestamp: item.updateTime || item.createTime || new Date().toISOString(),\n                            status: 'sent',\n                            streaming: false\n                        });\n                    }\n                });\n                \n                // 按时间戳排序消息\n                messages.sort((a, b) => {\n                    const timeA = new Date(a.timestamp).getTime();\n                    const timeB = new Date(b.timestamp).getTime();\n                    return timeA - timeB;\n                });\n                \n                // 构建完整的对话数据\n                const conversationData = {\n                    id: conversationId,\n                    abstract: conversation?.abstract || '无标题',\n                    chatMode: backendResponse.data && backendResponse.data.length > 0 && backendResponse.data[0].topic ? \n                              backendResponse.data[0].topic : topic,\n                    type: 'DOU_BAO_CHAT',\n                    messages: messages,\n                    createdAt: conversation?.createdAt || Date.now(),\n                    updatedAt: conversation?.updatedAt || Date.now(),\n                    // 添加标记表示这是最新从后端获取的数据\n                    lastFetchTime: Date.now()\n                };\n                \n                // 强制更新对话详情到state（覆盖任何现有缓存）\n                commit('UPDATE_CONVERSATION_DETAIL', conversationData);\n                \n                console.log('=== 对话详情强制加载成功 ===');\n                console.log('原始数据条数:', messageData.length);\n                console.log('转换后消息数:', messages.length);\n                console.log('最新获取时间:', new Date(conversationData.lastFetchTime).toLocaleString());\n                console.log('对话数据:', conversationData);\n                console.log('===============================');\n                \n                return {\n                    success: true,\n                    data: conversationData,\n                    conversation: conversationData\n                };\n            } else {\n                throw new Error(response.message || '加载对话失败');\n            }\n        } catch (error) {\n            console.error('=== 强制加载对话详情失败 ===');\n            console.error('对话ID:', conversationId);\n            console.error('错误信息:', error);\n            console.error('=============================');\n            \n            return {\n                success: false,\n                message: error.message || '加载对话详情失败'\n            };\n        }\n    },\n    \n    /**\n     * 删除指定的对话\n     * @param {Object} context - Vuex上下文\n     * @param {string} conversationId - 对话ID\n     * @returns {Promise<Object>} 返回操作结果\n     */\n    async deleteChat({ commit, state }, conversationId) {\n        try {\n            const response = await apiRequest(`${getApiPrefix()}/yanshilu/aiChat/delete`, 'POST', {\n                id: conversationId\n            });\n            \n            if (response.success) {\n                commit('DELETE_CONVERSATION', conversationId);\n                \n                // 如果删除的是当前活跃会话，则清空当前活跃会话\n                if (state.aiChat.activeConversation === conversationId) {\n                    commit('UPDATE_CURRENT_CONVERSATION', null);\n                }\n                \n                return { \n                    success: true,\n                    message: '删除成功'\n                };\n            } else {\n                throw new Error(response.message || '删除失败');\n            }\n        } catch (error) {\n            console.error('删除对话失败:', error);\n            return {\n                success: false,\n                message: error.message || '删除对话失败'\n            };\n        }\n    },\n    \n    /**\n     * 获取对话历史列表\n     * @param {Object} context - Vuex上下文\n     * @param {Object} params - 分页参数\n     * @param {number} params.pageNum - 页码\n     * @param {number} params.pageSize - 每页大小\n     * @description 字段映射关系：\n     *   - 后端 title 字段 → 前端 abstract 字段（对话摘要/标题）\n     *   - 后端 topic 字段 → 前端 chatMode 字段（对话模式）\n     * @returns {Promise<Object>} 返回请求结果\n     */\n    async loadConversationHistory({ commit, state }, params = {}) {\n        try {\n            commit('SET_PAGINATION_LOADING', true);\n            \n            // 使用传入的参数或默认值\n            const pageNum = params.pageNum || state.aiChat.pagination.pageNum;\n            const pageSize = params.pageSize || state.aiChat.pagination.pageSize;\n            \n            // 更新页码参数到state（如果有传入）\n            if (params.pageNum) commit('SET_PAGE_NUM', params.pageNum);\n            if (params.pageSize) commit('SET_PAGE_SIZE', params.pageSize);\n            \n            // 发送API请求\n            const response = await apiRequest(`${getApiPrefix()}/yanshilu/aiChat/list`, 'POST', {\n                pageSize,\n                pageNum\n            });\n            console.log('response:', response);\n            \n            if (response.success && response.data?.code === 200) {\n                // 处理返回的数据格式\n                const conversationsList = response.data.rows || [];\n                console.log('conversationsList:', conversationsList);\n                const total = response.data.total || 0;\n                \n                console.log('=== API响应数据解析 ===');\n                console.log('response.success:', response.success);\n                console.log('response.data.code:', response.data?.code);\n                console.log('response.data.total:', response.data?.total);\n                console.log('response.data.rows.length:', response.data?.rows?.length);\n                console.log('========================');\n                \n                // 转换数据格式以适配现有的状态结构\n                const formattedConversations = conversationsList.map(item => ({\n                    id: item.id,\n                    // 处理abstract字段：去除换行符和多余空格\n                    abstract: (item.title || '').replace(/[\\r\\n\\t]/g, ' ').replace(/\\s+/g, ' ').trim() || '无标题',\n                    chatMode: item.topic || 'general', // 使用topic作为chatMode，默认为general\n                    type: item.type,\n                    createdAt: item.createTime ? new Date(item.createTime).getTime() : Date.now(),\n                    updatedAt: item.updateTime ? new Date(item.updateTime).getTime() : Date.now(),\n                    createBy: item.createBy,\n                    updateBy: item.updateBy,\n                    remark: item.remark\n                }));\n                \n                // 更新对话列表\n                commit('UPDATE_CONVERSATIONS_LIST', formattedConversations);\n                \n                // 计算分页信息\n                const totalPages = Math.ceil(total / pageSize);\n                const hasNext = pageNum < totalPages;\n                const hasPrev = pageNum > 1;\n                \n                // 更新分页信息\n                const paginationInfo = {\n                    pageNum,\n                    pageSize,\n                    total,\n                    totalPages,\n                    hasNext,\n                    hasPrev,\n                    loading: false\n                };\n                \n                commit('UPDATE_PAGINATION', paginationInfo);\n                \n                console.log('=== 对话历史加载成功 ===');\n                console.log('原始数据条数:', conversationsList.length);\n                console.log('格式化后数据:', formattedConversations);\n                console.log('分页信息:', paginationInfo);\n                console.log('=======================');\n                \n                return {\n                    success: true,\n                    data: formattedConversations,\n                    pagination: paginationInfo,\n                    total: total\n                };\n            } else {\n                console.error('API响应失败:', response);\n                throw new Error(response.message || response.data?.msg || '获取对话历史失败');\n            }\n        } catch (error) {\n            console.error('获取对话历史失败:', error);\n            console.error('错误详情:', error.message);\n            return {\n                success: false,\n                message: error.message || '获取对话历史失败'\n            };\n        } finally {\n            commit('SET_PAGINATION_LOADING', false);\n        }\n    },\n\n    /**\n     * 分页相关操作 - 加载下一页\n     * @description 字段映射关系：\n     *   - 后端 title 字段 → 前端 abstract 字段（对话摘要/标题）\n     *   - 后端 topic 字段 → 前端 chatMode 字段（对话模式）\n     */\n    async nextPage({ state, dispatch, commit }) {\n        if (state.aiChat.pagination.hasNext) {\n            try {\n                const nextPageNum = state.aiChat.pagination.pageNum + 1;\n                \n                console.log('=== 加载下一页 ===');\n                console.log('当前页:', state.aiChat.pagination.pageNum);\n                console.log('下一页:', nextPageNum);\n                console.log('================');\n                \n                // 设置加载状态\n                commit('SET_PAGINATION_LOADING', true);\n                \n                // 发送API请求\n                const response = await apiRequest(`${getApiPrefix()}/yanshilu/aiChat/list`, 'POST', {\n                    pageSize: state.aiChat.pagination.pageSize,\n                    pageNum: nextPageNum\n                });\n                \n                if (response.success && response.data?.code === 200) {\n                    // 处理返回的数据格式\n                    const conversationsList = response.data.rows || [];\n                    const total = response.data.total || 0;\n                    \n                    // 转换数据格式\n                    const formattedConversations = conversationsList.map(item => ({\n                        id: item.id,\n                        // 处理abstract字段：去除换行符和多余空格\n                        abstract: (item.title || '').replace(/[\\r\\n\\t]/g, ' ').replace(/\\s+/g, ' ').trim() || '无标题',\n                        chatMode: item.topic || 'general',\n                        type: item.type,\n                        createdAt: item.createTime ? new Date(item.createTime).getTime() : Date.now(),\n                        updatedAt: item.updateTime ? new Date(item.updateTime).getTime() : Date.now(),\n                        createBy: item.createBy,\n                        updateBy: item.updateBy,\n                        remark: item.remark\n                    }));\n                    \n                    // 按更新时间倒序排序（最新的在前面）\n                    formattedConversations.sort((a, b) => {\n                        const timeA = a.updatedAt || a.createdAt || 0;\n                        const timeB = b.updatedAt || b.createdAt || 0;\n                        return timeB - timeA;\n                    });\n                    \n                    // 追加新数据到现有列表\n                    commit('APPEND_CONVERSATIONS_LIST', formattedConversations);\n                    \n                    // 更新分页信息\n                    const totalPages = Math.ceil(total / state.aiChat.pagination.pageSize);\n                    const hasNext = nextPageNum < totalPages;\n                    const hasPrev = nextPageNum > 1;\n                    \n                    const paginationInfo = {\n                        pageNum: nextPageNum,\n                        pageSize: state.aiChat.pagination.pageSize,\n                        total,\n                        totalPages,\n                        hasNext,\n                        hasPrev,\n                        loading: false\n                    };\n                    \n                    commit('UPDATE_PAGINATION', paginationInfo);\n                    \n                    console.log('=== 下一页加载成功 ===');\n                    console.log('新增数据条数:', formattedConversations.length);\n                    console.log('总数据条数:', state.aiChat.conversations.length);\n                    console.log('分页信息:', paginationInfo);\n                    console.log('====================');\n                    \n                    return {\n                        success: true,\n                        data: formattedConversations,\n                        pagination: paginationInfo,\n                        total: total\n                    };\n                } else {\n                    throw new Error(response.message || '加载下一页失败');\n                }\n            } catch (error) {\n                console.error('加载下一页失败:', error);\n                return {\n                    success: false,\n                    message: error.message || '加载下一页失败'\n                };\n            } finally {\n                commit('SET_PAGINATION_LOADING', false);\n            }\n        }\n        return { success: false, message: '已经是最后一页' };\n    },\n\n    async prevPage({ state, dispatch }) {\n        if (state.aiChat.pagination.hasPrev) {\n            return await dispatch('loadConversationHistory', {\n                pageNum: state.aiChat.pagination.pageNum - 1\n            });\n        }\n        return { success: false, message: '已经是第一页' };\n    },\n\n    async goToPage({ state, dispatch }, pageNum) {\n        if (pageNum >= 1 && pageNum <= state.aiChat.pagination.totalPages) {\n            return await dispatch('loadConversationHistory', { pageNum });\n        }\n        return { success: false, message: '页码超出范围' };\n    },\n\n    async changePageSize({ dispatch }, pageSize) {\n        return await dispatch('loadConversationHistory', {\n            pageNum: 1,\n            pageSize\n        });\n    },\n\n    async refreshPage({ state, dispatch }) {\n        return await dispatch('loadConversationHistory', {\n            pageNum: state.aiChat.pagination.pageNum,\n            pageSize: state.aiChat.pagination.pageSize\n        });\n    }\n};"],"names":["getApiPrefix","useGlobalStore","actions","commit","chatId","state","rootState","payload","userMessage","aiMessageId","aiMessage","isNewConversation","conversationIdToSend","activeId","uni","requestData","wsUrl","getCurrentToken","resolve","reject","socketTask","error","streamContent","conversationId","messageCount","isStreamComplete","isConversationCreated","event","data","content","_a","messageContent","_b","newConversationId","_c","finalConversationId","_d","cleanedContent","_e","errorMessage","conversation","conv","topic","response","apiRequest","backendResponse","messageData","messages","item","index","a","b","timeA","timeB","conversationData","params","pageNum","pageSize","conversationsList","total","formattedConversations","totalPages","hasNext","hasPrev","paginationInfo","_f","dispatch","nextPageNum"],"mappings":"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"}