{"version":3,"file":"actions.js","sources":["store/user/ai-chat/actions.js"],"sourcesContent":["/**\r\n * ai-chat模块的actions\r\n * @module store/user/ai-chat/actions\r\n */\r\n\r\n// 导入真实API实现\r\nimport { \r\n    sendMessageToAI, \r\n    getConversationHistory, \r\n    getConversationDetail as fetchConversationDetail, \r\n    deleteConversation \r\n} from '../APIroute/AIchat_api/AIchat_api.js';\r\n\r\nexport default {\r\n    /**\r\n     * 设置当前活跃的聊天会话\r\n     * @param {Object} context - Vuex上下文\r\n     * @param {string} chatId - 聊天会话ID\r\n     */\r\n    setCurrentChat({ commit }, chatId) {\r\n        commit('UPDATE_CURRENT_CONVERSATION', chatId);\r\n    },\r\n    \r\n    /**\r\n     * 发送问题到AI并获取回答\r\n     * @param {Object} context - Vuex上下文\r\n     * @param {Object} payload - 请求数据\r\n     * @param {string} payload.question - 用户问题\r\n     * @param {Object} payload.contextInfo - 上下文信息\r\n     * @param {string} payload.chatId - 对话ID\r\n     * @returns {Promise<Object>} 返回请求结果\r\n     */\r\n    async sendQuestion({ commit, state }, payload) {\r\n        try {\r\n            // 构建消息数据\r\n            const messageData = {\r\n                content: payload.question,\r\n                chatMode: payload.contextInfo?.mode || state.aiChat.chatMode,\r\n                conversationId: payload.chatId || state.aiChat.activeConversation\r\n            };\r\n            \r\n            // 调用真实API\r\n            const response = await sendMessageToAI(messageData);\r\n            \r\n            // 如果API调用成功\r\n            if (response.success) {\r\n                // 更新当前会话ID\r\n                commit('UPDATE_CURRENT_CONVERSATION', response.conversationId);\r\n                \r\n                // 在本地保存问答记录\r\n                const newMessage = {\r\n                    id: `msg-${Date.now()}`,\r\n                    type: 'user',\r\n                    content: payload.question,\r\n                    timestamp: new Date().toISOString()\r\n                };\r\n                \r\n                const aiResponse = {\r\n                    id: `msg-${Date.now() + 1}`,\r\n                    type: 'ai',\r\n                    content: response.aiResponse,\r\n                    timestamp: new Date().toISOString()\r\n                };\r\n                \r\n                // 查找当前对话\r\n                const currentChat = state.aiChat.conversations.find(\r\n                    conv => conv.id === response.conversationId\r\n                );\r\n                \r\n                if (currentChat) {\r\n                    // 更新现有对话\r\n                    const updatedChat = {\r\n                        ...currentChat,\r\n                        messages: [...(currentChat.messages || []), newMessage, aiResponse],\r\n                        updatedAt: new Date().toISOString()\r\n                    };\r\n                    \r\n                    commit('UPDATE_CONVERSATION_DETAIL', updatedChat);\r\n                } else {\r\n                    // 创建新对话\r\n                    const newChat = {\r\n                        id: response.conversationId,\r\n                        abstract: payload.question.substring(0, 30) + (payload.question.length > 30 ? '...' : ''),\r\n                        chatMode: state.aiChat.chatMode,\r\n                        createdAt: new Date().toISOString(),\r\n                        updatedAt: new Date().toISOString(),\r\n                        messages: [newMessage, aiResponse]\r\n                    };\r\n                    \r\n                    commit('UPDATE_CONVERSATION_DETAIL', newChat);\r\n                }\r\n            }\r\n            \r\n            return {\r\n                success: response.success,\r\n                data: response.aiResponse,\r\n                chatId: response.conversationId,\r\n                message: response.message\r\n            };\r\n        } catch (error) {\r\n            console.error('AI问答出错:', error);\r\n            return {\r\n                success: false,\r\n                error: error.error || error,\r\n                message: error.error?.message || '请求失败'\r\n            };\r\n        }\r\n    },\r\n\r\n    \r\n    /**\r\n     * 加载特定对话的完整内容\r\n     * @param {Object} context - Vuex上下文\r\n     * @param {string} conversationId - 对话ID\r\n     * @returns {Promise<Object>} 返回请求结果\r\n     */\r\n    async loadChat({ commit }, conversationId) {\r\n        try {\r\n            // 调用真实API获取会话详情\r\n            const response = await fetchConversationDetail(conversationId);\r\n            \r\n            if (response.success) {\r\n                // 构建会话数据结构\r\n                const conversationData = {\r\n                    id: conversationId,\r\n                    messages: response.messages,\r\n                    updatedAt: new Date().toISOString()\r\n                    // 其他会话详情字段...\r\n                };\r\n                \r\n                // 更新对话详情并设置为当前活跃对话\r\n                commit('UPDATE_CONVERSATION_DETAIL', conversationData);\r\n            }\r\n            \r\n            return {\r\n                success: response.success,\r\n                data: response.messages\r\n            };\r\n        } catch (error) {\r\n            console.error('加载对话详情失败:', error);\r\n            return {\r\n                success: false,\r\n                error: error.error || error,\r\n                message: error.error?.message || '加载对话详情失败'\r\n            };\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 保存新的对话或更新现有对话\r\n     * @param {Object} context - Vuex上下文\r\n     * @param {Object} chatData - 对话数据\r\n     * @returns {Promise<Object>} 返回操作结果\r\n     */\r\n    async saveChat({ commit, state }, chatData) {\r\n        try {\r\n            // 这里可以添加API调用来保存对话到后端\r\n            // 但对于前端演示，我们只在本地更新\r\n            \r\n            const existingConversation = state.aiChat.conversations.find(\r\n                conv => conv.id === chatData.id\r\n            );\r\n            \r\n            if (existingConversation) {\r\n                // 更新已有对话\r\n                commit('UPDATE_CONVERSATION_DETAIL', {\r\n                    ...existingConversation,\r\n                    ...chatData,\r\n                    updatedAt: new Date().toISOString()\r\n                });\r\n            } else {\r\n                // 添加新对话\r\n                const newConversation = {\r\n                    id: chatData.id,\r\n                    abstract: chatData.title || '新对话',\r\n                    chatMode: chatData.chatMode || 'general',\r\n                    createdAt: chatData.createdAt?.toISOString() || new Date().toISOString(),\r\n                    updatedAt: chatData.updatedAt?.toISOString() || new Date().toISOString(),\r\n                    messages: chatData.messages || []\r\n                };\r\n                \r\n                commit('UPDATE_CONVERSATION_DETAIL', newConversation);\r\n            }\r\n            \r\n            return { success: true };\r\n        } catch (error) {\r\n            console.error('保存对话失败:', error);\r\n            return {\r\n                success: false,\r\n                message: '保存对话失败'\r\n            };\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 删除指定的对话\r\n     * @param {Object} context - Vuex上下文\r\n     * @param {string} conversationId - 对话ID\r\n     * @returns {Promise<Object>} 返回操作结果\r\n     */\r\n    async deleteChat({ commit, state }, conversationId) {\r\n        try {\r\n            // 调用真实API从后端删除对话\r\n            const response = await deleteConversation(conversationId);\r\n            \r\n            if (response.success) {\r\n                // 从本地会话列表中移除\r\n                commit('DELETE_CONVERSATION', conversationId);\r\n                \r\n                // 如果删除的是当前活跃会话，则清空当前活跃会话\r\n                if (state.aiChat.activeConversation === conversationId) {\r\n                    commit('UPDATE_CURRENT_CONVERSATION', null);\r\n                }\r\n            }\r\n            \r\n            return { \r\n                success: response.success,\r\n                message: response.message || (response.success ? '删除成功' : '删除失败')\r\n            };\r\n        } catch (error) {\r\n            console.error('删除对话失败:', error);\r\n            return {\r\n                success: false,\r\n                error: error.error || error,\r\n                message: error.error?.message || '删除对话失败'\r\n            };\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 获取对话历史列表\r\n     * @param {Object} context - Vuex上下文\r\n     * @returns {Promise<Object>} 返回请求结果\r\n     */\r\n    async loadConversationHistory({ commit }) {\r\n        try {\r\n            // 调用真实API获取对话历史\r\n            const response = await getConversationHistory();\r\n            \r\n            if (response.success && response.conversations) {\r\n                // 更新会话列表\r\n                commit('SET_CONVERSATIONS', response.conversations);\r\n            }\r\n            \r\n            return {\r\n                success: response.success,\r\n                data: response.conversations\r\n            };\r\n        } catch (error) {\r\n            console.error('获取对话历史失败:', error);\r\n            return {\r\n                success: false,\r\n                error: error.error || error,\r\n                message: error.error?.message || '获取对话历史失败'\r\n            };\r\n        }\r\n    }\r\n};"],"names":["actions","commit","chatId","state","payload","messageData","_a","response","sendMessageToAI","newMessage","aiResponse","currentChat","conv","updatedChat","newChat","error","uni","_b","conversationId","fetchConversationDetail","conversationData","chatData","existingConversation","newConversation","deleteConversation","getConversationHistory"],"mappings":"4GAaeA,EAAA,CAMX,eAAe,CAAE,OAAAC,CAAQ,EAAEC,EAAQ,CAC/BD,EAAO,8BAA+BC,CAAM,CAC/C,EAWD,MAAM,aAAa,CAAE,OAAAD,EAAQ,MAAAE,CAAK,EAAIC,EAAS,SAC3C,GAAI,CAEA,MAAMC,EAAc,CAChB,QAASD,EAAQ,SACjB,WAAUE,EAAAF,EAAQ,cAAR,YAAAE,EAAqB,OAAQH,EAAM,OAAO,SACpD,eAAgBC,EAAQ,QAAUD,EAAM,OAAO,kBAC/D,EAGkBI,EAAW,MAAMC,kBAAgBH,CAAW,EAGlD,GAAIE,EAAS,QAAS,CAElBN,EAAO,8BAA+BM,EAAS,cAAc,EAG7D,MAAME,EAAa,CACf,GAAI,OAAO,KAAK,IAAK,CAAA,GACrB,KAAM,OACN,QAASL,EAAQ,SACjB,UAAW,IAAI,KAAM,EAAC,YAAa,CACvD,EAEsBM,EAAa,CACf,GAAI,OAAO,KAAK,IAAK,EAAG,CAAC,GACzB,KAAM,KACN,QAASH,EAAS,WAClB,UAAW,IAAI,KAAM,EAAC,YAAa,CACvD,EAGsBI,EAAcR,EAAM,OAAO,cAAc,KAC3CS,GAAQA,EAAK,KAAOL,EAAS,cACjD,EAEgB,GAAII,EAAa,CAEb,MAAME,EAAc,CAChB,GAAGF,EACH,SAAU,CAAC,GAAIA,EAAY,UAAY,CAAE,EAAGF,EAAYC,CAAU,EAClE,UAAW,IAAI,KAAM,EAAC,YAAa,CAC3D,EAEoBT,EAAO,6BAA8BY,CAAW,CACpE,KAAuB,CAEH,MAAMC,EAAU,CACZ,GAAIP,EAAS,eACb,SAAUH,EAAQ,SAAS,UAAU,EAAG,EAAE,GAAKA,EAAQ,SAAS,OAAS,GAAK,MAAQ,IACtF,SAAUD,EAAM,OAAO,SACvB,UAAW,IAAI,KAAM,EAAC,YAAa,EACnC,UAAW,IAAI,KAAM,EAAC,YAAa,EACnC,SAAU,CAACM,EAAYC,CAAU,CACzD,EAEoBT,EAAO,6BAA8Ba,CAAO,CAC/C,CACJ,CAED,MAAO,CACH,QAASP,EAAS,QAClB,KAAMA,EAAS,WACf,OAAQA,EAAS,eACjB,QAASA,EAAS,OAClC,CACS,OAAQQ,EAAO,CACZC,OAAAA,EAAA,MAAA,MAAA,QAAA,uCAAc,UAAWD,CAAK,EACvB,CACH,QAAS,GACT,MAAOA,EAAM,OAASA,EACtB,UAASE,EAAAF,EAAM,QAAN,YAAAE,EAAa,UAAW,MACjD,CACS,CACJ,EASD,MAAM,SAAS,CAAE,OAAAhB,CAAQ,EAAEiB,EAAgB,OACvC,GAAI,CAEA,MAAMX,EAAW,MAAMY,wBAAwBD,CAAc,EAE7D,GAAIX,EAAS,QAAS,CAElB,MAAMa,EAAmB,CACrB,GAAIF,EACJ,SAAUX,EAAS,SACnB,UAAW,IAAI,KAAM,EAAC,YAAa,CAEvD,EAGgBN,EAAO,6BAA8BmB,CAAgB,CACxD,CAED,MAAO,CACH,QAASb,EAAS,QAClB,KAAMA,EAAS,QAC/B,CACS,OAAQQ,EAAO,CACZC,OAAAA,EAAc,MAAA,MAAA,QAAA,uCAAA,YAAaD,CAAK,EACzB,CACH,QAAS,GACT,MAAOA,EAAM,OAASA,EACtB,UAAST,EAAAS,EAAM,QAAN,YAAAT,EAAa,UAAW,UACjD,CACS,CACJ,EAQD,MAAM,SAAS,CAAE,OAAAL,EAAQ,MAAAE,CAAK,EAAIkB,EAAU,SACxC,GAAI,CAIA,MAAMC,EAAuBnB,EAAM,OAAO,cAAc,KACpDS,GAAQA,EAAK,KAAOS,EAAS,EAC7C,EAEY,GAAIC,EAEArB,EAAO,6BAA8B,CACjC,GAAGqB,EACH,GAAGD,EACH,UAAW,IAAI,KAAM,EAAC,YAAa,CACvD,CAAiB,MACE,CAEH,MAAME,EAAkB,CACpB,GAAIF,EAAS,GACb,SAAUA,EAAS,OAAS,MAC5B,SAAUA,EAAS,UAAY,UAC/B,YAAWf,EAAAe,EAAS,YAAT,YAAAf,EAAoB,gBAAiB,IAAI,KAAM,EAAC,YAAa,EACxE,YAAWW,EAAAI,EAAS,YAAT,YAAAJ,EAAoB,gBAAiB,IAAI,KAAM,EAAC,YAAa,EACxE,SAAUI,EAAS,UAAY,CAAE,CACrD,EAEgBpB,EAAO,6BAA8BsB,CAAe,CACvD,CAED,MAAO,CAAE,QAAS,GACrB,OAAQR,EAAO,CACZC,OAAAA,EAAA,MAAA,MAAA,QAAA,uCAAc,UAAWD,CAAK,EACvB,CACH,QAAS,GACT,QAAS,QACzB,CACS,CACJ,EAQD,MAAM,WAAW,CAAE,OAAAd,EAAQ,MAAAE,CAAK,EAAIe,EAAgB,OAChD,GAAI,CAEA,MAAMX,EAAW,MAAMiB,qBAAmBN,CAAc,EAExD,OAAIX,EAAS,UAETN,EAAO,sBAAuBiB,CAAc,EAGxCf,EAAM,OAAO,qBAAuBe,GACpCjB,EAAO,8BAA+B,IAAI,GAI3C,CACH,QAASM,EAAS,QAClB,QAASA,EAAS,UAAYA,EAAS,QAAU,OAAS,OAC1E,CACS,OAAQQ,EAAO,CACZC,OAAAA,EAAA,MAAA,MAAA,QAAA,uCAAc,UAAWD,CAAK,EACvB,CACH,QAAS,GACT,MAAOA,EAAM,OAASA,EACtB,UAAST,EAAAS,EAAM,QAAN,YAAAT,EAAa,UAAW,QACjD,CACS,CACJ,EAOD,MAAM,wBAAwB,CAAE,OAAAL,GAAU,OACtC,GAAI,CAEA,MAAMM,EAAW,MAAMkB,EAAAA,yBAEvB,OAAIlB,EAAS,SAAWA,EAAS,eAE7BN,EAAO,oBAAqBM,EAAS,aAAa,EAG/C,CACH,QAASA,EAAS,QAClB,KAAMA,EAAS,aAC/B,CACS,OAAQQ,EAAO,CACZC,OAAAA,EAAc,MAAA,MAAA,QAAA,uCAAA,YAAaD,CAAK,EACzB,CACH,QAAS,GACT,MAAOA,EAAM,OAASA,EACtB,UAAST,EAAAS,EAAM,QAAN,YAAAT,EAAa,UAAW,UACjD,CACS,CACJ,CACL"}