{"version":3,"file":"config.js","sources":["store/user/ai-chat/config.js"],"sourcesContent":["/**\n * AI聊天模块的配置文件\n * @module store/user/ai-chat/config\n */\n\n// 直接导入所有API实现，避免使用动态require\nimport * as realApi from './api';\nimport * as mockApi from './mock-api';\nimport * as mockDataModule from './mock-data';\n\n/**\n * 是否使用模拟API\n * 在开发/测试阶段设为true，与后端集成时设为false\n * @type {boolean}\n */\nexport const USE_MOCK_API = true;\n\n/**\n * 开发环境配置\n * @type {Object}\n */\nexport const DEV_CONFIG = {\n  // 开发环境下的其他配置项\n  useDebugLog: true,\n  mockDelay: {\n    min: 300,  // 最小延迟(ms)\n    max: 1500  // 最大延迟(ms)\n  },\n  // 控制是否使用本地缓存来模拟持久化存储\n  useLocalCache: true\n};\n\n/**\n * 生产环境配置\n * @type {Object}\n */\nexport const PROD_CONFIG = {\n  useDebugLog: false,\n  // 其他生产环境特有配置\n};\n\n/**\n * 根据当前环境返回配置\n * @returns {Object} 当前环境的配置\n */\nexport const getEnvironmentConfig = () => {\n  // 根据环境变量或其他条件判断当前环境\n  const isProd = process.env.NODE_ENV === 'production';\n  return isProd ? PROD_CONFIG : DEV_CONFIG;\n};\n\n/**\n * 获取当前应该使用的API实现\n * @returns {Object} API模块\n */\nexport const getApiImplementation = () => {\n  if (USE_MOCK_API) {\n    // 使用模拟API\n    return mockApi;\n  } else {\n    // 使用真实API\n    return realApi;\n  }\n};\n\n/**\n * 获取模拟数据\n * 仅在测试和开发环境中使用\n * @returns {Object} 模拟数据模块\n */\nexport const getMockData = () => {\n  if (USE_MOCK_API) {\n    return mockDataModule;\n  }\n  return null;\n}; "],"names":["mockApi"],"mappings":";;;AAuDO,MAAM,uBAAuB,MAAM;AACtB;AAET,WAAAA;EAIT;AACF;;"}