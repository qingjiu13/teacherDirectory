{"version":3,"file":"mock-api.js","sources":["store/user/ai-chat/mock-api.js"],"sourcesContent":["/**\r\n * AI聊天模块的模拟API实现\r\n * @module store/user/ai-chat/mock-api\r\n */\r\n\r\nimport { \r\n  MOCK_USER_ID, \r\n  MOCK_CONVERSATIONS, \r\n  MOCK_CONVERSATION_DETAILS, \r\n  generateMockAIResponse, \r\n  mockApiResponse \r\n} from './mock-data';\r\n\r\n/**\r\n * 模拟的延迟函数\r\n * @param {number} ms - 延迟毫秒数\r\n * @returns {Promise<void>}\r\n */\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n/**\r\n * 模拟发送问题到AI并获取回答\r\n * @param {Object} data - 请求数据\r\n * @param {string} data.question - 用户问题\r\n * @param {Object} data.contextInfo - 上下文信息\r\n * @param {string} data.chatId - 对话ID\r\n * @returns {Promise<Object>} 返回请求结果\r\n */\r\nexport const questionAI = async (data) => {\r\n  try {\r\n    // 模拟网络延迟\r\n    await delay(1000);\r\n    \r\n    // 模拟API处理逻辑\r\n    let chatId = data.chatId;\r\n    // 如果没有chatId，创建一个新的\r\n    if (!chatId) {\r\n      chatId = `conv-${Date.now()}`;\r\n    }\r\n    \r\n    // 使用模拟函数生成AI回答\r\n    const answer = generateMockAIResponse(data.question, data.contextInfo);\r\n    \r\n    // 返回API响应格式的数据\r\n    return {\r\n      success: true,\r\n      data: answer,\r\n      chatId: chatId\r\n    };\r\n  } catch (error) {\r\n    console.error('模拟AI问答出错:', error);\r\n    return {\r\n      success: false,\r\n      error: {\r\n        message: '请求失败'\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * 模拟中断当前请求\r\n * @param {Object} requestTask - 请求任务对象\r\n */\r\nexport const abortRequest = (requestTask) => {\r\n  console.log('模拟中断请求:', requestTask);\r\n  // 在模拟环境中不需要实际实现\r\n};\r\n\r\n/**\r\n * 模拟获取用户的对话历史记录列表\r\n * @param {Object} data - 请求数据\r\n * @returns {Promise<Object>} 返回请求结果\r\n */\r\nexport const getConversationHistory = async (data) => {\r\n  try {\r\n    // 模拟网络延迟\r\n    await delay(800);\r\n    \r\n    // 返回模拟数据\r\n    return mockApiResponse(true, MOCK_CONVERSATIONS);\r\n  } catch (error) {\r\n    console.error('模拟获取历史记录失败:', error);\r\n    return mockApiResponse(false, null, {\r\n      message: '获取历史记录失败'\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * 模拟获取特定对话的详细内容\r\n * @param {Object} data - 请求数据\r\n * @param {string} data.conversationId - 对话ID\r\n * @returns {Promise<Object>} 返回请求结果\r\n */\r\nexport const getConversationDetail = async (data) => {\r\n  try {\r\n    // 模拟网络延迟\r\n    await delay(600);\r\n    \r\n    const conversation = MOCK_CONVERSATION_DETAILS[data.conversationId];\r\n    \r\n    if (!conversation) {\r\n      return mockApiResponse(false, null, {\r\n        message: '对话不存在'\r\n      });\r\n    }\r\n    \r\n    return mockApiResponse(true, conversation);\r\n  } catch (error) {\r\n    console.error('模拟获取对话详情失败:', error);\r\n    return mockApiResponse(false, null, {\r\n      message: '获取对话详情失败'\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * 模拟删除特定对话历史记录\r\n * @param {Object} data - 请求数据\r\n * @param {string} data.conversationId - 需要删除的对话ID\r\n * @returns {Promise<Object>} 返回请求结果\r\n */\r\nexport const deleteConversationHistory = async (data) => {\r\n  try {\r\n    // 模拟网络延迟\r\n    await delay(500);\r\n    \r\n    const conversation = MOCK_CONVERSATION_DETAILS[data.conversationId];\r\n    \r\n    if (!conversation) {\r\n      return mockApiResponse(false, null, {\r\n        message: '对话不存在'\r\n      });\r\n    }\r\n    \r\n    // 在实际应用中，这里会从后端删除数据\r\n    // 在模拟环境中，我们只返回成功\r\n    return mockApiResponse(true, { message: '删除成功' });\r\n  } catch (error) {\r\n    console.error('模拟删除对话失败:', error);\r\n    return mockApiResponse(false, null, {\r\n      message: '删除对话失败'\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * 模拟保存对话\r\n * 这个API在原始代码中没有，但为了完整性添加\r\n * @param {Object} data - 对话数据\r\n * @returns {Promise<Object>} 返回请求结果\r\n */\r\nexport const saveConversation = async (data) => {\r\n  try {\r\n    // 模拟网络延迟\r\n    await delay(700);\r\n    \r\n    // 在实际应用中，这里会保存数据到后端\r\n    // 在模拟环境中，我们只返回成功\r\n    return mockApiResponse(true, { message: '保存成功', id: data.id });\r\n  } catch (error) {\r\n    console.error('模拟保存对话失败:', error);\r\n    return mockApiResponse(false, null, {\r\n      message: '保存对话失败'\r\n    });\r\n  }\r\n}; "],"names":["generateMockAIResponse","uni","mockApiResponse","MOCK_CONVERSATIONS","MOCK_CONVERSATION_DETAILS"],"mappings":";;;AAkBA,MAAM,QAAQ,CAAC,OAAO,IAAI,QAAQ,aAAW,WAAW,SAAS,EAAE,CAAC;AAU7D,MAAM,aAAa,OAAO,SAAS;AACxC,MAAI;AAEF,UAAM,MAAM,GAAI;AAGhB,QAAI,SAAS,KAAK;AAElB,QAAI,CAAC,QAAQ;AACX,eAAS,QAAQ,KAAK,IAAG,CAAE;AAAA,IAC5B;AAGD,UAAM,SAASA,2BAAAA,uBAAuB,KAAK,UAAU,KAAK,WAAW;AAGrE,WAAO;AAAA,MACL,SAAS;AAAA,MACT,MAAM;AAAA,MACN;AAAA,IACN;AAAA,EACG,SAAQ,OAAO;AACdC,kBAAc,MAAA,MAAA,SAAA,wCAAA,aAAa,KAAK;AAChC,WAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO;AAAA,QACL,SAAS;AAAA,MACV;AAAA,IACP;AAAA,EACG;AACH;AAMO,MAAM,eAAe,CAAC,gBAAgB;AAC3CA,gBAAY,MAAA,MAAA,OAAA,wCAAA,WAAW,WAAW;AAEpC;AAOO,MAAM,yBAAyB,OAAO,SAAS;AACpD,MAAI;AAEF,UAAM,MAAM,GAAG;AAGf,WAAOC,2BAAe,gBAAC,MAAMC,2BAAAA,kBAAkB;AAAA,EAChD,SAAQ,OAAO;AACdF,kBAAc,MAAA,MAAA,SAAA,wCAAA,eAAe,KAAK;AAClC,WAAOC,2BAAe,gBAAC,OAAO,MAAM;AAAA,MAClC,SAAS;AAAA,IACf,CAAK;AAAA,EACF;AACH;AAQO,MAAM,wBAAwB,OAAO,SAAS;AACnD,MAAI;AAEF,UAAM,MAAM,GAAG;AAEf,UAAM,eAAeE,2BAAAA,0BAA0B,KAAK,cAAc;AAElE,QAAI,CAAC,cAAc;AACjB,aAAOF,2BAAe,gBAAC,OAAO,MAAM;AAAA,QAClC,SAAS;AAAA,MACjB,CAAO;AAAA,IACF;AAED,WAAOA,2BAAe,gBAAC,MAAM,YAAY;AAAA,EAC1C,SAAQ,OAAO;AACdD,kBAAc,MAAA,MAAA,SAAA,yCAAA,eAAe,KAAK;AAClC,WAAOC,2BAAe,gBAAC,OAAO,MAAM;AAAA,MAClC,SAAS;AAAA,IACf,CAAK;AAAA,EACF;AACH;AAQO,MAAM,4BAA4B,OAAO,SAAS;AACvD,MAAI;AAEF,UAAM,MAAM,GAAG;AAEf,UAAM,eAAeE,2BAAAA,0BAA0B,KAAK,cAAc;AAElE,QAAI,CAAC,cAAc;AACjB,aAAOF,2BAAe,gBAAC,OAAO,MAAM;AAAA,QAClC,SAAS;AAAA,MACjB,CAAO;AAAA,IACF;AAID,WAAOA,2BAAe,gBAAC,MAAM,EAAE,SAAS,OAAQ,CAAA;AAAA,EACjD,SAAQ,OAAO;AACdD,kBAAc,MAAA,MAAA,SAAA,yCAAA,aAAa,KAAK;AAChC,WAAOC,2BAAe,gBAAC,OAAO,MAAM;AAAA,MAClC,SAAS;AAAA,IACf,CAAK;AAAA,EACF;AACH;AAQO,MAAM,mBAAmB,OAAO,SAAS;AAC9C,MAAI;AAEF,UAAM,MAAM,GAAG;AAIf,WAAOA,2BAAe,gBAAC,MAAM,EAAE,SAAS,QAAQ,IAAI,KAAK,GAAE,CAAE;AAAA,EAC9D,SAAQ,OAAO;AACdD,kBAAc,MAAA,MAAA,SAAA,yCAAA,aAAa,KAAK;AAChC,WAAOC,2BAAe,gBAAC,OAAO,MAAM;AAAA,MAClC,SAAS;AAAA,IACf,CAAK;AAAA,EACF;AACH;;;;;;;;;;;"}