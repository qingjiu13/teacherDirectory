{"version":3,"file":"actions.js","sources":["store/user/baseInfo/actions.js"],"sourcesContent":["/**\r\n * baseInfo模块的actions\r\n * @module store/user/baseInfo/actions\r\n */\r\n\r\n// 直接导入API\r\nconst { getUserInfo, updateUserInfo, updateRole } = {\r\n    // 这里可以替换为真实API实现\r\n    getUserInfo: () => Promise.resolve({ \r\n        success: true, \r\n        data: {\r\n            id: '1566454',\r\n            avatar: '/static/image/defaultAvatar/teacher-man.png',\r\n            name: '张三',\r\n            gender: '男',\r\n            selfIntroduction: '我是一个热爱学习的人',\r\n            wechatNumber: '1234567890',\r\n            phoneNumber: '1234567890',\r\n            password: '123456',\r\n            isRegistered: 0 ,\r\n            userInfo: {\r\n                certificate: 0,\r\n                role: '学生',\r\n                school: '天津大学',\r\n                major: '计算机科学与技术',\r\n                targetSchool: '清华大学',\r\n                targetMajor: '计算机科学与技术',\r\n                studentGrade: '大三',\r\n                teacherGrade: '研一',\r\n                teacherScore: 0,\r\n            }\r\n        } \r\n    }),\r\n    updateUserInfo: (userInfo) => Promise.resolve({ success: true, data: { userInfo } }),\r\n    updateRole: () => Promise.resolve({ success: true })\r\n};\r\n\r\nexport default {\r\n    /**\r\n     * @description 获取用户信息\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    async getUserInfo({ commit, state }) {\r\n        console.log('getUserInfo action开始执行, 当前state:', {\r\n            id: state.id,\r\n            name: state.name\r\n        });\r\n        \r\n        try {\r\n            // 如果本地已有数据且不是空的，则直接返回\r\n            if (state.name && state.name !== '') {\r\n                console.log('本地已有数据，直接返回state');\r\n                return {\r\n                    id: state.id,\r\n                    avatar: state.avatar,\r\n                    name: state.name,\r\n                    gender: state.gender,\r\n                    selfIntroduction: state.selfIntroduction,\r\n                    wechatNumber: state.wechatNumber,\r\n                    phoneNumber: state.phoneNumber,\r\n                    userInfo: state.userInfo\r\n                };\r\n            }\r\n            \r\n            console.log('本地无数据，请求API');\r\n            const response = await getUserInfo();\r\n            console.log('API返回结果:', response);\r\n            \r\n            if (response.success) {\r\n                // 将返回的用户信息提交到mutations处理\r\n                commit('SET_USER_INFO', response.data);\r\n                console.log('提交SET_USER_INFO后，state变为:', {\r\n                    id: state.id,\r\n                    name: state.name\r\n                });\r\n                \r\n                return response.data;\r\n            } else {\r\n                console.error('API返回失败:', response.error);\r\n                return Promise.reject(response.error || { message: '获取用户信息失败' });\r\n            }\r\n        } catch (error) {\r\n            console.error('获取用户信息失败', error);\r\n            return Promise.reject(error);\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * @description 更新用户信息\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Object} userInfo - 用户信息\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    async updateUserInfo({ commit }, userInfo) {\r\n        try {\r\n            const response = await updateUserInfo(userInfo);\r\n            \r\n            if (response.success) {\r\n                // 更新用户信息\r\n                commit('UPDATE_USER_INFO', userInfo);\r\n                \r\n                return { success: true };\r\n            } else {\r\n                return Promise.reject(response.error || { message: '更新用户信息失败' });\r\n            }\r\n        } catch (error) {\r\n            console.error('更新用户信息失败', error);\r\n            return Promise.reject(error);\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * @description 更新用户扩展信息\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Object} userInfoData - 用户扩展信息\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    async updateUserInfoData({ commit }, userInfoData) {\r\n        try {\r\n            const response = await updateUserInfo({ userInfo: userInfoData });\r\n            \r\n            if (response.success) {\r\n                // 更新用户扩展信息\r\n                commit('UPDATE_USER_INFO_DATA', userInfoData);\r\n                \r\n                return { success: true };\r\n            } else {\r\n                return Promise.reject(response.error || { message: '更新用户扩展信息失败' });\r\n            }\r\n        } catch (error) {\r\n            console.error('更新用户扩展信息失败', error);\r\n            return Promise.reject(error);\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * @description 更新用户角色\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {string} role - 用户角色\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    async updateRole({ commit, state }, role) {\r\n        console.log('updateRole action开始执行, 角色:', role, '当前role:', state.userInfo.role);\r\n        \r\n        try {\r\n            // 调用API更新角色\r\n            const response = await updateRole(role);\r\n            \r\n            if (response.success) {\r\n                // 提交角色更新到mutations\r\n                commit('updateRole', role);\r\n                console.log('角色更新成功，新角色:', state.userInfo.role);\r\n                \r\n                // 保存到本地存储\r\n                uni.setStorageSync('userRole', role);\r\n                \r\n                return { success: true, role };\r\n            } else {\r\n                return Promise.reject(response.error || { message: '更新用户角色失败' });\r\n            }\r\n        } catch (error) {\r\n            console.error('更新用户角色失败:', error);\r\n            \r\n            // 即使API调用失败，也尝试在本地更新\r\n            try {\r\n                commit('updateRole', role);\r\n                uni.setStorageSync('userRole', role);\r\n            } catch (e) {\r\n                console.error('本地更新角色失败', e);\r\n            }\r\n            \r\n            return Promise.reject(error);\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * @description 用户登出\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    async logout({ commit }) {\r\n        try {\r\n            // 清除用户信息\r\n            commit('CLEAR_USER_INFO');\r\n            \r\n            // 清除本地存储中的认证信息\r\n            uni.removeStorageSync('userId');\r\n            uni.removeStorageSync('token');\r\n            uni.removeStorageSync('userInfo');\r\n            uni.removeStorageSync('user-token');\r\n            uni.removeStorageSync('userBaseInfo');\r\n            uni.removeStorageSync('userInfoData');\r\n            uni.removeStorageSync('userRole');\r\n            \r\n            return { success: true, message: '退出登录成功' };\r\n        } catch (error) {\r\n            console.error('退出登录失败:', error);\r\n            return Promise.reject({ message: '退出登录失败' });\r\n        }\r\n    }\r\n}; "],"names":["getUserInfo","updateUserInfo","updateRole","userInfo","actions","commit","state","uni","response","error","userInfoData","role","e"],"mappings":"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"}