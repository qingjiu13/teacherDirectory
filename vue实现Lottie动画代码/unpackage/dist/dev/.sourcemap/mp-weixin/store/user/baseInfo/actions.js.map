{"version":3,"file":"actions.js","sources":["store/user/baseInfo/actions.js"],"sourcesContent":["/**\n * baseInfo模块的actions\n * @module store/user/baseInfo/actions\n */\n\n// 直接导入API\nconst { getUserInfo, updateUserInfo, updateRole } = {\n    // 这里可以替换为真实API实现\n    getUserInfo: () => Promise.resolve({ \n        success: true, \n        data: {\n            id: '1566454',\n            avatar: '/static/image/tab-bar/default_avatar.png',\n            name: '张三',\n            gender: '男',\n            selfIntroduction: '我是一个热爱学习的人',\n            wechatNumber: '1234567890',\n            phoneNumber: '1234567890',\n            password: '123456',\n            isRegistered: 0 ,\n            userInfo: {\n                certificate: 0,\n                role: '学生',\n                school: '天津大学',\n                major: '计算机科学与技术',\n                targetSchool: '清华大学',\n                targetMajor: '计算机科学与技术',\n                studentGrade: '大三',\n                teacherGrade: '研一',\n                teacherScore: 0,\n            }\n        } \n    }),\n    updateUserInfo: (userInfo) => Promise.resolve({ success: true, data: { userInfo } }),\n    updateRole: () => Promise.resolve({ success: true })\n};\n\nexport default {\n    /**\n     * @description 获取用户信息\n     * @param {Object} context - Vuex上下文对象\n     * @returns {Promise} - 返回Promise对象\n     */\n    async getUserInfo({ commit, state }) {\n        console.log('getUserInfo action开始执行, 当前state:', {\n            id: state.id,\n            name: state.name\n        });\n        \n        try {\n            // 如果本地已有数据且不是空的，则直接返回\n            if (state.name && state.name !== '') {\n                console.log('本地已有数据，直接返回state');\n                return {\n                    id: state.id,\n                    avatar: state.avatar,\n                    name: state.name,\n                    gender: state.gender,\n                    selfIntroduction: state.selfIntroduction,\n                    wechatNumber: state.wechatNumber,\n                    phoneNumber: state.phoneNumber,\n                    userInfo: state.userInfo\n                };\n            }\n            \n            console.log('本地无数据，请求API');\n            const response = await getUserInfo();\n            console.log('API返回结果:', response);\n            \n            if (response.success) {\n                // 将返回的用户信息提交到mutations处理\n                commit('SET_USER_INFO', response.data);\n                console.log('提交SET_USER_INFO后，state变为:', {\n                    id: state.id,\n                    name: state.name\n                });\n                \n                return response.data;\n            } else {\n                console.error('API返回失败:', response.error);\n                return Promise.reject(response.error || { message: '获取用户信息失败' });\n            }\n        } catch (error) {\n            console.error('获取用户信息失败', error);\n            return Promise.reject(error);\n        }\n    },\n    \n    /**\n     * @description 更新用户信息\n     * @param {Object} context - Vuex上下文对象\n     * @param {Object} userInfo - 用户信息\n     * @returns {Promise} - 返回Promise对象\n     */\n    async updateUserInfo({ commit }, userInfo) {\n        try {\n            const response = await updateUserInfo(userInfo);\n            \n            if (response.success) {\n                // 更新用户信息\n                commit('UPDATE_USER_INFO', userInfo);\n                \n                return { success: true };\n            } else {\n                return Promise.reject(response.error || { message: '更新用户信息失败' });\n            }\n        } catch (error) {\n            console.error('更新用户信息失败', error);\n            return Promise.reject(error);\n        }\n    },\n    \n    /**\n     * @description 更新用户扩展信息\n     * @param {Object} context - Vuex上下文对象\n     * @param {Object} userInfoData - 用户扩展信息\n     * @returns {Promise} - 返回Promise对象\n     */\n    async updateUserInfoData({ commit }, userInfoData) {\n        try {\n            const response = await updateUserInfo({ userInfo: userInfoData });\n            \n            if (response.success) {\n                // 更新用户扩展信息\n                commit('UPDATE_USER_INFO_DATA', userInfoData);\n                \n                return { success: true };\n            } else {\n                return Promise.reject(response.error || { message: '更新用户扩展信息失败' });\n            }\n        } catch (error) {\n            console.error('更新用户扩展信息失败', error);\n            return Promise.reject(error);\n        }\n    },\n    \n    /**\n     * @description 更新用户角色\n     * @param {Object} context - Vuex上下文对象\n     * @param {string} role - 用户角色\n     * @returns {Promise} - 返回Promise对象\n     */\n    async updateRole({ commit, state }, role) {\n        console.log('updateRole action开始执行, 角色:', role, '当前role:', state.userInfo.role);\n        \n        try {\n            // 调用API更新角色\n            const response = await updateRole(role);\n            \n            if (response.success) {\n                // 提交角色更新到mutations\n                commit('updateRole', role);\n                console.log('角色更新成功，新角色:', state.userInfo.role);\n                \n                // 保存到本地存储\n                uni.setStorageSync('userRole', role);\n                \n                return { success: true, role };\n            } else {\n                return Promise.reject(response.error || { message: '更新用户角色失败' });\n            }\n        } catch (error) {\n            console.error('更新用户角色失败:', error);\n            \n            // 即使API调用失败，也尝试在本地更新\n            try {\n                commit('updateRole', role);\n                uni.setStorageSync('userRole', role);\n            } catch (e) {\n                console.error('本地更新角色失败', e);\n            }\n            \n            return Promise.reject(error);\n        }\n    },\n    \n    /**\n     * @description 用户登出\n     * @param {Object} context - Vuex上下文对象\n     * @returns {Promise} - 返回Promise对象\n     */\n    async logout({ commit }) {\n        try {\n            // 清除用户信息\n            commit('CLEAR_USER_INFO');\n            \n            // 清除本地存储中的认证信息\n            uni.removeStorageSync('userId');\n            uni.removeStorageSync('token');\n            uni.removeStorageSync('userInfo');\n            uni.removeStorageSync('user-token');\n            uni.removeStorageSync('userBaseInfo');\n            uni.removeStorageSync('userInfoData');\n            uni.removeStorageSync('userRole');\n            \n            return { success: true, message: '退出登录成功' };\n        } catch (error) {\n            console.error('退出登录失败:', error);\n            return Promise.reject({ message: '退出登录失败' });\n        }\n    }\n}; "],"names":["uni"],"mappings":"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"}