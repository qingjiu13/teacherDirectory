{"version":3,"file":"actions.js","sources":["store/user/baseInfo/actions.js"],"sourcesContent":["/**\r\n * baseInfo模块的actions\r\n * @module store/user/baseInfo/actions\r\n */\r\n\r\nimport { getApiImplementation } from './config';\r\n\r\n// 根据配置动态导入API实现（真实API或模拟API）\r\nconst api = getApiImplementation();\r\nconst { getUserInfo, updateUserInfo, updateRole } = api;\r\n\r\nexport default {\r\n    /**\r\n     * @description 获取用户信息\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    async getUserInfo({ commit }) {\r\n        try {\r\n            const response = await getUserInfo();\r\n            \r\n            if (response.success) {\r\n                // 将返回的用户信息提交到mutations处理\r\n                commit('SET_USER_INFO', response.data);\r\n                return response.data;\r\n            } else {\r\n                return Promise.reject(response.error || { message: '获取用户信息失败' });\r\n            }\r\n        } catch (error) {\r\n            console.error('获取用户信息失败', error);\r\n            return Promise.reject(error);\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * @description 更新用户信息\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Object} userInfo - 用户信息\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    async updateUserInfo({ commit }, userInfo) {\r\n        try {\r\n            const response = await updateUserInfo(userInfo);\r\n            \r\n            if (response.success) {\r\n                // 将返回的用户信息提交到mutations处理\r\n                commit('UPDATE_USER_INFO', response.data.userInfo || userInfo);\r\n                return response.data;\r\n            } else {\r\n                return Promise.reject(response.error || { message: '更新用户信息失败' });\r\n            }\r\n        } catch (error) {\r\n            console.error('更新用户信息失败', error);\r\n            return Promise.reject(error);\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * @description 更新用户角色\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {string} role - 用户角色\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    async updateRole({ commit }, role) {\r\n        try {\r\n            // 调用API更新角色\r\n            const response = await updateRole(role);\r\n            \r\n            if (response.success) {\r\n                // 提交角色更新到mutations\r\n                commit('updateRole', role);\r\n                \r\n                // 保存到本地存储\r\n                uni.setStorageSync('userRole', role);\r\n                \r\n                return { success: true, role };\r\n            } else {\r\n                return Promise.reject(response.error || { message: '更新用户角色失败' });\r\n            }\r\n        } catch (error) {\r\n            console.error('更新用户角色失败:', error);\r\n            \r\n            // 即使API调用失败，也尝试在本地更新\r\n            try {\r\n                commit('updateRole', role);\r\n                uni.setStorageSync('userRole', role);\r\n            } catch (e) {\r\n                console.error('本地更新角色失败', e);\r\n            }\r\n            \r\n            return Promise.reject(error);\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * @description 用户登出\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @returns {Promise} - 返回Promise对象\r\n     */\r\n    async logout({ commit }) {\r\n        try {\r\n            // 清除用户信息\r\n            commit('CLEAR_USER_INFO');\r\n            \r\n            // 清除本地存储中的认证信息\r\n            uni.removeStorageSync('userId');\r\n            uni.removeStorageSync('token');\r\n            uni.removeStorageSync('userInfo');\r\n            uni.removeStorageSync('user-token');\r\n            uni.removeStorageSync('userBaseInfo');\r\n            \r\n            // 保留角色和模拟数据设置，以便体验一致性\r\n            // 不清除：userRole, use_mock_api\r\n            \r\n            return { success: true, message: '退出登录成功' };\r\n        } catch (error) {\r\n            console.error('退出登录失败:', error);\r\n            return Promise.reject({ message: '退出登录失败' });\r\n        }\r\n    }\r\n}; "],"names":["getApiImplementation","uni"],"mappings":";;;AAQA,MAAM,MAAMA,2BAAoB,qBAAA;AAChC,MAAM,EAAE,aAAa,gBAAgB,WAAU,IAAK;AAEpD,MAAe,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMX,MAAM,YAAY,EAAE,UAAU;AAC1B,QAAI;AACA,YAAM,WAAW,MAAM;AAEvB,UAAI,SAAS,SAAS;AAElB,eAAO,iBAAiB,SAAS,IAAI;AACrC,eAAO,SAAS;AAAA,MAChC,OAAmB;AACH,eAAO,QAAQ,OAAO,SAAS,SAAS,EAAE,SAAS,WAAU,CAAE;AAAA,MAClE;AAAA,IACJ,SAAQ,OAAO;AACZC,oBAAA,MAAA,MAAA,SAAA,wCAAc,YAAY,KAAK;AAC/B,aAAO,QAAQ,OAAO,KAAK;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,MAAM,eAAe,EAAE,OAAQ,GAAE,UAAU;AACvC,QAAI;AACA,YAAM,WAAW,MAAM,eAAe,QAAQ;AAE9C,UAAI,SAAS,SAAS;AAElB,eAAO,oBAAoB,SAAS,KAAK,YAAY,QAAQ;AAC7D,eAAO,SAAS;AAAA,MAChC,OAAmB;AACH,eAAO,QAAQ,OAAO,SAAS,SAAS,EAAE,SAAS,WAAU,CAAE;AAAA,MAClE;AAAA,IACJ,SAAQ,OAAO;AACZA,oBAAA,MAAA,MAAA,SAAA,wCAAc,YAAY,KAAK;AAC/B,aAAO,QAAQ,OAAO,KAAK;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,MAAM,WAAW,EAAE,OAAQ,GAAE,MAAM;AAC/B,QAAI;AAEA,YAAM,WAAW,MAAM,WAAW,IAAI;AAEtC,UAAI,SAAS,SAAS;AAElB,eAAO,cAAc,IAAI;AAGzBA,sBAAAA,MAAI,eAAe,YAAY,IAAI;AAEnC,eAAO,EAAE,SAAS,MAAM;MACxC,OAAmB;AACH,eAAO,QAAQ,OAAO,SAAS,SAAS,EAAE,SAAS,WAAU,CAAE;AAAA,MAClE;AAAA,IACJ,SAAQ,OAAO;AACZA,oBAAc,MAAA,MAAA,SAAA,wCAAA,aAAa,KAAK;AAGhC,UAAI;AACA,eAAO,cAAc,IAAI;AACzBA,sBAAAA,MAAI,eAAe,YAAY,IAAI;AAAA,MACtC,SAAQ,GAAG;AACRA,sBAAc,MAAA,MAAA,SAAA,wCAAA,YAAY,CAAC;AAAA,MAC9B;AAED,aAAO,QAAQ,OAAO,KAAK;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,OAAO,EAAE,UAAU;AACrB,QAAI;AAEA,aAAO,iBAAiB;AAGxBA,0BAAI,kBAAkB,QAAQ;AAC9BA,0BAAI,kBAAkB,OAAO;AAC7BA,0BAAI,kBAAkB,UAAU;AAChCA,0BAAI,kBAAkB,YAAY;AAClCA,0BAAI,kBAAkB,cAAc;AAKpC,aAAO,EAAE,SAAS,MAAM,SAAS,SAAQ;AAAA,IAC5C,SAAQ,OAAO;AACZA,oBAAA,MAAA,MAAA,SAAA,yCAAc,WAAW,KAAK;AAC9B,aAAO,QAAQ,OAAO,EAAE,SAAS,SAAU,CAAA;AAAA,IAC9C;AAAA,EACJ;AACL;;"}