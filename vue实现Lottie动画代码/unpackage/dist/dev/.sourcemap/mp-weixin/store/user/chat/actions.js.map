{"version":3,"file":"actions.js","sources":["store/user/chat/actions.js"],"sourcesContent":["/**\r\n * chat模块的actions\r\n * @module store/user/chat/actions\r\n */\r\n\r\nexport default {\r\n        // 初始化IM连接\r\n    async initIM({ commit, dispatch }, { userId, token }) {\r\n      commit('SET_CONNECTION_STATUS', { isConnected: false, isConnecting: true })\r\n      \r\n      try {\r\n        // 初始化IMBox SDK\r\n        await IMBox.init({\r\n          appId: 'your-app-id',\r\n          userId,\r\n          token\r\n        })\r\n        \r\n        // 设置监听器\r\n        IMBox.on('message', (message) => {\r\n          dispatch('handleNewMessage', message)\r\n        })\r\n        \r\n        IMBox.on('connection-status-changed', (status) => {\r\n          commit('SET_CONNECTION_STATUS', {\r\n            isConnected: status === 'connected',\r\n            isConnecting: status === 'connecting'\r\n          })\r\n        })\r\n        \r\n        // 连接成功\r\n        commit('SET_CONNECTION_STATUS', { isConnected: true, isConnecting: false })\r\n        \r\n        // 加载会话列表\r\n        await dispatch('loadSessions')\r\n        \r\n      } catch (error) {\r\n        commit('SET_CONNECTION_ERROR', error)\r\n        commit('SET_CONNECTION_STATUS', { isConnected: false, isConnecting: false })\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 加载会话列表\r\n    async loadSessions({ commit }) {\r\n      try {\r\n        const sessions = await IMBox.getSessions()\r\n        sessions.forEach(session => {\r\n          commit('ADD_OR_UPDATE_SESSION', {\r\n            sessionId: session.sessionId,\r\n            sessionType: session.type,\r\n            targetId: session.targetId,\r\n            title: session.title,\r\n            avatar: session.avatar,\r\n            lastMessage: session.lastMessage,\r\n            unreadCount: session.unreadCount,\r\n            lastMessageTime: session.lastMessageTime\r\n          })\r\n        })\r\n      } catch (error) {\r\n        console.error('加载会话列表失败:', error)\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 处理新消息\r\n    async handleNewMessage({ commit, state }, message) {\r\n      const { sessionId } = message\r\n      \r\n      // 添加到消息列表\r\n      commit('ADD_MESSAGE', { sessionId, message })\r\n      \r\n      // 更新会话最后消息\r\n      commit('UPDATE_SESSION_LAST_MESSAGE', { sessionId, message })\r\n      \r\n      // 如果当前不是这个会话，增加未读数\r\n      if (state.currentSession.sessionId !== sessionId || !state.currentSession.isActive) {\r\n        const session = state.sessions.byId[sessionId]\r\n        if (session) {\r\n          commit('ADD_OR_UPDATE_SESSION', {\r\n            sessionId,\r\n            unreadCount: (session.unreadCount || 0) + 1\r\n          })\r\n        }\r\n      }\r\n      \r\n      // 如果是当前会话且活跃，标记为已读\r\n      if (state.currentSession.sessionId === sessionId && state.currentSession.isActive) {\r\n        await IMBox.markAsRead(sessionId)\r\n      }\r\n    },\r\n    \r\n    // 发送消息\r\n    async sendMessage({ commit, state }, { sessionId, content, type = 'text' }) {\r\n      const message = {\r\n        id: `temp-${Date.now()}`, // 临时ID，发送成功后会替换\r\n        type,\r\n        content,\r\n        senderId: state.currentUser.userId,\r\n        time: Math.floor(Date.now() / 1000),\r\n        status: 'sending',\r\n        isSelf: true\r\n      }\r\n      \r\n      // 先添加到本地\r\n      commit('ADD_MESSAGE', { sessionId, message })\r\n      \r\n      try {\r\n        // 调用IMBox发送\r\n        const sentMessage = await IMBox.sendMessage({\r\n          sessionId,\r\n          type,\r\n          content\r\n        })\r\n        \r\n        // 更新消息状态和ID\r\n        commit('UPDATE_MESSAGE_STATUS', {\r\n          sessionId,\r\n          messageId: message.id,\r\n          status: 'sent'\r\n        })\r\n        \r\n        // 更新会话最后消息\r\n        commit('UPDATE_SESSION_LAST_MESSAGE', {\r\n          sessionId,\r\n          message: sentMessage\r\n        })\r\n        \r\n        return sentMessage\r\n      } catch (error) {\r\n        commit('UPDATE_MESSAGE_STATUS', {\r\n          sessionId,\r\n          messageId: message.id,\r\n          status: 'failed'\r\n        })\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 加载历史消息\r\n    async loadHistoryMessages({ commit, state }, { sessionId, lastMessageId }) {\r\n      if (state.messages.bySessionId[sessionId]?.isLoading) return\r\n      \r\n      commit('SET_MESSAGES_LOADING', { sessionId, isLoading: true })\r\n      \r\n      try {\r\n        const messages = await IMBox.getHistoryMessages({\r\n          sessionId,\r\n          before: lastMessageId,\r\n          limit: 20\r\n        })\r\n        \r\n        if (messages.length > 0) {\r\n          commit('PREPEND_MESSAGES', { sessionId, messages })\r\n        } else {\r\n          commit('SET_NO_MORE_MESSAGES', { sessionId })\r\n        }\r\n      } catch (error) {\r\n        console.error('加载历史消息失败:', error)\r\n        throw error\r\n      } finally {\r\n        commit('SET_MESSAGES_LOADING', { sessionId, isLoading: false })\r\n      }\r\n    },\r\n    \r\n    // 切换会话\r\n    async switchSession({ commit, dispatch }, sessionId) {\r\n      // 更新当前会话\r\n      const session = this.state.sessions.byId[sessionId]\r\n      commit('SET_CURRENT_SESSION', {\r\n        sessionId,\r\n        targetId: session.targetId,\r\n        sessionType: session.sessionType,\r\n        isActive: true,\r\n        unreadCount: 0\r\n      })\r\n      \r\n      // 重置会话未读数\r\n      commit('ADD_OR_UPDATE_SESSION', {\r\n        sessionId,\r\n        unreadCount: 0\r\n      })\r\n      \r\n      // 标记为已读\r\n      await IMBox.markAsRead(sessionId)\r\n      \r\n      // 加载消息\r\n      if (!this.state.messages.bySessionId[sessionId]) {\r\n        await dispatch('loadHistoryMessages', { sessionId })\r\n      }\r\n    }\r\n}; \r\n"],"names":["uni"],"mappings":"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"}