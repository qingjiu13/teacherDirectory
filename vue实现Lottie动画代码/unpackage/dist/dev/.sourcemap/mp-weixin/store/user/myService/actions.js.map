{"version":3,"file":"actions.js","sources":["store/user/myService/actions.js"],"sourcesContent":["/**\r\n * myService模块的actions\r\n * @module store/user/myService/actions\r\n */\r\n\r\nimport { apiRequest } from '../JWT';\r\n\r\nexport default {\r\n    /**\r\n     * 获取用户所有服务信息\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Function} context.commit - 提交mutation的函数\r\n     * @param {Object} [options={}] - 请求选项\r\n     * @returns {Promise<Object>} 包含服务数据的Promise\r\n     */\r\n    async fetchUserServices({ commit }, options = {}) {\r\n        try {\r\n            const response = await apiRequest('/api/user/services', 'GET', options);\r\n            \r\n            // 提交mutation更新状态\r\n            commit('SET_USER_SERVICES', response.data);\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('获取用户服务失败:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 获取服务详情\r\n     * @param {Object} context - Vuex上下文对象 \r\n     * @param {String} serviceId - 服务ID\r\n     * @returns {Promise<Object>} 包含服务详情的Promise\r\n     */\r\n    async getServiceDetail(_, serviceId) {\r\n        try {\r\n            const response = await apiRequest(`/api/user/services/${serviceId}`, 'GET');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('获取服务详情失败:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 更新服务信息\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Function} context.commit - 提交mutation的函数\r\n     * @param {Object} serviceData - 服务数据\r\n     * @param {String} serviceData.id - 服务ID\r\n     * @param {Object} serviceData.updatedInfo - 更新的信息\r\n     * @returns {Promise<Object>} 更新结果Promise\r\n     */\r\n    async updateService({ commit }, { id, updatedInfo }) {\r\n        try {\r\n            const response = await apiRequest(`/api/user/services/${id}`, 'PUT', updatedInfo);\r\n            \r\n            if (response.success) {\r\n                // 提交mutation更新状态\r\n                commit('UPDATE_SERVICE_BY_USER', { id, updatedInfo });\r\n            }\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('更新服务信息失败:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 添加新服务\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Function} context.commit - 提交mutation的函数\r\n     * @param {Object} serviceData - 服务数据\r\n     * @returns {Promise<Object>} 添加结果Promise\r\n     */\r\n    async addService({ commit }, serviceData) {\r\n        try {\r\n            const response = await apiRequest('/api/user/services', 'POST', serviceData);\r\n            \r\n            if (response.success) {\r\n                // 提交mutation更新状态\r\n                commit('ADD_SERVICE', response.data);\r\n            }\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('添加服务失败:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 删除服务\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Function} context.commit - 提交mutation的函数\r\n     * @param {String} serviceId - 服务ID\r\n     * @returns {Promise<Object>} 删除结果Promise\r\n     */\r\n    async deleteService({ commit }, serviceId) {\r\n        try {\r\n            const response = await apiRequest(`/api/user/services/${serviceId}`, 'DELETE');\r\n            \r\n            if (response.success) {\r\n                // 提交mutation更新状态\r\n                commit('DELETE_SERVICE', serviceId);\r\n            }\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('删除服务失败:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 设置当前正在编辑的服务\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Function} context.commit - 提交mutation的函数\r\n     * @param {Object|null} service - 服务对象或null\r\n     */\r\n    setCurrentEditingService({ commit }, service) {\r\n        commit('SET_CURRENT_EDITING_SERVICE', service);\r\n    },\r\n    \r\n    /**\r\n     * 上传服务封面图片\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Object} fileData - 文件数据\r\n     * @param {String} fileData.serviceId - 服务ID\r\n     * @param {File} fileData.file - 要上传的文件\r\n     * @returns {Promise<Object>} 上传结果Promise\r\n     */\r\n    async uploadServiceCover(_, fileData) {\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('file', fileData.file);\r\n            \r\n            const response = await apiRequest(`/api/user/services/${fileData.serviceId}/cover`, 'POST', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            });\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('上传服务封面失败:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 上传服务附件\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Object} fileData - 文件数据\r\n     * @param {String} fileData.serviceId - 服务ID\r\n     * @param {File} fileData.file - 要上传的文件\r\n     * @returns {Promise<Object>} 上传结果Promise\r\n     */\r\n    async uploadServiceAttachment(_, fileData) {\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('file', fileData.file);\r\n            \r\n            const response = await apiRequest(`/api/user/services/${fileData.serviceId}/attachment`, 'POST', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            });\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('上传服务附件失败:', error);\r\n            throw error;\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 设置服务过滤条件\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Function} context.commit - 提交mutation的函数\r\n     * @param {Object} filter - 过滤条件\r\n     */\r\n    setServiceFilter({ commit }, filter) {\r\n        commit('SET_SERVICE_FILTER', filter);\r\n    },\r\n    \r\n    /**\r\n     * 根据服务类型筛选服务\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Function} context.commit - 提交mutation的函数\r\n     * @param {String} type - 服务类型\r\n     */\r\n    filterServicesByType({ commit }, type) {\r\n        commit('SET_SERVICE_FILTER', { type });\r\n    },\r\n    \r\n    /**\r\n     * 根据关键词搜索服务\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Function} context.commit - 提交mutation的函数\r\n     * @param {String} keyword - 搜索关键词\r\n     */\r\n    searchServicesByKeyword({ commit }, keyword) {\r\n        commit('SET_SERVICE_FILTER', { keyword });\r\n    },\r\n    \r\n    /**\r\n     * 模拟加载本地服务数据\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Function} context.commit - 提交mutation的函数\r\n     */\r\n    loadLocalServices({ commit }) {\r\n        try {\r\n            // 在真实环境中，这里应该从本地存储加载数据\r\n            const servicesStr = uni.getStorageSync('services');\r\n            if (servicesStr) {\r\n                const services = JSON.parse(servicesStr);\r\n                commit('SET_USER_SERVICES', services);\r\n            }\r\n            return { success: true };\r\n        } catch (error) {\r\n            console.error('加载本地服务数据失败:', error);\r\n            return { success: false, error };\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 保存服务到本地存储\r\n     * @param {Object} context - Vuex上下文对象\r\n     * @param {Object} state - Vuex状态对象\r\n     */\r\n    saveServicesToLocal({ state }) {\r\n        try {\r\n            // 在真实环境中，这里应该保存到本地存储\r\n            uni.setStorageSync('services', JSON.stringify(state.service));\r\n            return { success: true };\r\n        } catch (error) {\r\n            console.error('保存服务到本地存储失败:', error);\r\n            return { success: false, error };\r\n        }\r\n    }\r\n}; "],"names":["actions","commit","options","response","apiRequest","error","uni","_","serviceId","id","updatedInfo","serviceData","service","fileData","formData","filter","type","keyword","servicesStr","services","state"],"mappings":"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"}