{"version":3,"file":"AIchat_api.js","sources":["store/user/APIroute/AIchat_api.js"],"sourcesContent":["/**\r\n * AI聊天API接口\r\n * @module store/user/APIroute/AIchat_api\r\n */\r\nimport {\r\n    AIQA_QUESTION_URL,\r\n    AIQA_GET_HISTORY_URL,\r\n    AIQA_DELETE_HISTORY_URL,\r\n    AIQA_GET_HISTORY_DETAIL_URL\r\n} from '../API.js';\r\nimport store from '../../index.js';\r\n\r\n/**\r\n * 封装uni.request为Promise形式\r\n * @param {Object} options - 请求配置\r\n * @returns {Promise<Object>} - 返回请求结果的Promise\r\n */\r\nconst uniRequest = (options) => {\r\n    return new Promise((resolve, reject) => {\r\n        uni.request({\r\n            url: options.url,\r\n            data: options.data || options.params,\r\n            method: options.method || 'GET',\r\n            header: options.header || {},\r\n            success: (res) => {\r\n                resolve(res);\r\n            },\r\n            fail: (err) => {\r\n                reject(err);\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * 发送消息给AI并获取回复\r\n * @param {Object} messageData - 消息数据\r\n * @param {string} messageData.content - 用户输入的消息内容\r\n * @param {string} messageData.chatMode - 聊天模式: 'general'(通用) | 'school'(择校) | 'career'(职业规划)\r\n * @param {string|null} messageData.conversationId - 对话ID，若为新对话则为null\r\n * @returns {Promise<Object>} - 返回AI回复的内容和对话ID\r\n */\r\nexport const sendMessageToAI = async (messageData) => {\r\n    try {\r\n        // 获取用户ID\r\n        const userId = store.state.user.baseInfo.id;\r\n        // 获取用户学校和专业信息\r\n        const userSchool = store.state.user.baseInfo.userInfo.school;\r\n        const userMajor = store.state.user.baseInfo.userInfo.major;\r\n        \r\n        // 构建请求数据\r\n        const requestData = {\r\n            userId: userId,\r\n            content: messageData.content,\r\n            chatMode: messageData.chatMode,\r\n            school: userSchool,\r\n            major: userMajor,\r\n            conversationId: messageData.conversationId\r\n        };\r\n        \r\n        // 发送请求\r\n        const response = await uniRequest({\r\n            url: AIQA_QUESTION_URL,\r\n            method: 'POST',\r\n            data: requestData\r\n        });\r\n        \r\n        // 检查请求是否成功\r\n        if (response.data && response.data.code === 200) {\r\n            return {\r\n                success: true,\r\n                conversationId: response.data.data.conversationId,\r\n                aiResponse: response.data.data.aiResponse,\r\n                messageId: response.data.data.messageId\r\n            };\r\n        } else {\r\n            console.error('AI回复失败:', response.data.message || '未知错误');\r\n            return {\r\n                success: false,\r\n                message: response.data.message || '获取AI回复失败'\r\n            };\r\n        }\r\n    } catch (error) {\r\n        console.error('发送消息给AI时出错:', error);\r\n        return {\r\n            success: false,\r\n            message: '网络错误，请稍后重试'\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * 获取用户的所有对话历史摘要\r\n * @returns {Promise<Object>} - 返回对话历史列表\r\n */\r\nexport const getConversationHistory = async () => {\r\n    try {\r\n        // 获取用户ID\r\n        const userId = store.state.user.baseInfo.id;\r\n        \r\n        // 发送请求\r\n        const response = await uniRequest({\r\n            url: AIQA_GET_HISTORY_URL,\r\n            method: 'GET',\r\n            data: { userId }\r\n        });\r\n        \r\n        // 检查请求是否成功\r\n        if (response.data && response.data.code === 200) {\r\n            return {\r\n                success: true,\r\n                conversations: response.data.data.conversations\r\n            };\r\n        } else {\r\n            console.error('获取对话历史失败:', response.data.message || '未知错误');\r\n            return {\r\n                success: false,\r\n                message: response.data.message || '获取对话历史失败'\r\n            };\r\n        }\r\n    } catch (error) {\r\n        console.error('获取对话历史时出错:', error);\r\n        return {\r\n            success: false,\r\n            message: '网络错误，请稍后重试'\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * 获取特定对话的详细内容\r\n * @param {string} conversationId - 对话ID\r\n * @returns {Promise<Object>} - 返回对话详细内容\r\n */\r\nexport const getConversationDetail = async (conversationId) => {\r\n    try {\r\n        // 获取用户ID\r\n        const userId = store.state.user.baseInfo.id;\r\n        \r\n        // 发送请求\r\n        const response = await uniRequest({\r\n            url: AIQA_GET_HISTORY_DETAIL_URL,\r\n            method: 'GET',\r\n            data: { \r\n                userId,\r\n                conversationId \r\n            }\r\n        });\r\n        \r\n        // 检查请求是否成功\r\n        if (response.data && response.data.code === 200) {\r\n            return {\r\n                success: true,\r\n                messages: response.data.data.messages\r\n            };\r\n        } else {\r\n            console.error('获取对话详情失败:', response.data.message || '未知错误');\r\n            return {\r\n                success: false,\r\n                message: response.data.message || '获取对话详情失败'\r\n            };\r\n        }\r\n    } catch (error) {\r\n        console.error('获取对话详情时出错:', error);\r\n        return {\r\n            success: false,\r\n            message: '网络错误，请稍后重试'\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * 删除特定对话\r\n * @param {string} conversationId - 对话ID\r\n * @returns {Promise<Object>} - 返回删除结果\r\n */\r\nexport const deleteConversation = async (conversationId) => {\r\n    try {\r\n        // 获取用户ID\r\n        const userId = store.state.user.baseInfo.id;\r\n        \r\n        // 发送请求\r\n        const response = await uniRequest({\r\n            url: AIQA_DELETE_HISTORY_URL,\r\n            method: 'POST',\r\n            data: {\r\n                userId,\r\n                conversationId\r\n            }\r\n        });\r\n        \r\n        // 检查请求是否成功\r\n        if (response.data && response.data.code === 200) {\r\n            return {\r\n                success: true,\r\n                message: '对话已成功删除'\r\n            };\r\n        } else {\r\n            console.error('删除对话失败:', response.data.message || '未知错误');\r\n            return {\r\n                success: false,\r\n                message: response.data.message || '删除对话失败'\r\n            };\r\n        }\r\n    } catch (error) {\r\n        console.error('删除对话时出错:', error);\r\n        return {\r\n            success: false,\r\n            message: '网络错误，请稍后重试'\r\n        };\r\n    }\r\n}; "],"names":["uniRequest","options","resolve","reject","uni","res","err","sendMessageToAI","messageData","userId","store","userSchool","userMajor","requestData","response","AIQA_QUESTION_URL","error","getConversationHistory","AIQA_GET_HISTORY_URL","getConversationDetail","conversationId","AIQA_GET_HISTORY_DETAIL_URL","deleteConversation","AIQA_DELETE_HISTORY_URL"],"mappings":"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"}