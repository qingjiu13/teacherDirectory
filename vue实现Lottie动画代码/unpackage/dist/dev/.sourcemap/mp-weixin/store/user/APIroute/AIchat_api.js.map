{"version":3,"file":"AIchat_api.js","sources":["store/user/APIroute/AIchat_api.js"],"sourcesContent":["/**\r\n * AI聊天API接口\r\n * @module store/user/APIroute/AIchat_api\r\n */\r\nimport {\r\n    AIQA_QUESTION_URL,\r\n    AIQA_GET_HISTORY_URL,\r\n    AIQA_DELETE_HISTORY_URL,\r\n    AIQA_GET_HISTORY_DETAIL_URL\r\n} from '../API.js';\r\nimport store from '../../index.js';\r\n\r\n/**\r\n * 封装uni.request为Promise形式\r\n * @param {Object} options - 请求配置\r\n * @returns {Promise<Object>} - 返回请求结果的Promise\r\n */\r\nconst uniRequest = (options) => {\r\n    return new Promise((resolve, reject) => {\r\n        uni.request({\r\n            url: options.url,\r\n            data: options.data || options.params,\r\n            method: options.method || 'GET',\r\n            header: options.header || {},\r\n            success: (res) => {\r\n                resolve(res);\r\n            },\r\n            fail: (err) => {\r\n                reject(err);\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * 发送消息给AI并获取回复\r\n * @param {Object} messageData - 消息数据\r\n * @param {string} messageData.content - 用户输入的消息内容\r\n * @param {string} messageData.chatMode - 聊天模式: 'general'(通用) | 'school'(择校) | 'career'(职业规划)\r\n * @param {string|null} messageData.conversationId - 对话ID，若为新对话则为null\r\n * @returns {Promise<Object>} - 返回AI回复的内容和对话ID\r\n */\r\nexport const sendMessageToAI = async (messageData) => {\r\n    try {\r\n        // 获取用户ID\r\n        const userId = store.state.user.baseInfo.id;\r\n        // 获取用户学校和专业信息\r\n        const userSchool = store.state.user.baseInfo.userInfo.school;\r\n        const userMajor = store.state.user.baseInfo.userInfo.major;\r\n        \r\n        // 构建请求数据\r\n        const requestData = {\r\n            userId: userId,\r\n            content: messageData.content,\r\n            chatMode: messageData.chatMode,\r\n            school: userSchool,\r\n            major: userMajor,\r\n            conversationId: messageData.conversationId\r\n        };\r\n        \r\n        // 发送请求\r\n        const response = await uniRequest({\r\n            url: AIQA_QUESTION_URL,\r\n            method: 'POST',\r\n            data: requestData\r\n        });\r\n        \r\n        // 检查请求是否成功\r\n        if (response.data && response.data.code === 200) {\r\n            return {\r\n                success: true,\r\n                conversationId: response.data.data.conversationId,\r\n                aiResponse: response.data.data.aiResponse,\r\n                messageId: response.data.data.messageId\r\n            };\r\n        } else {\r\n            console.error('AI回复失败:', response.data.message || '未知错误');\r\n            return {\r\n                success: false,\r\n                message: response.data.message || '获取AI回复失败'\r\n            };\r\n        }\r\n    } catch (error) {\r\n        console.error('发送消息给AI时出错:', error);\r\n        return {\r\n            success: false,\r\n            message: '网络错误，请稍后重试'\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * 获取用户的所有对话历史摘要\r\n * @returns {Promise<Object>} - 返回对话历史列表\r\n */\r\nexport const getConversationHistory = async () => {\r\n    try {\r\n        // 获取用户ID\r\n        const userId = store.state.user.baseInfo.id;\r\n        \r\n        // 发送请求\r\n        const response = await uniRequest({\r\n            url: AIQA_GET_HISTORY_URL,\r\n            method: 'GET',\r\n            data: { userId }\r\n        });\r\n        \r\n        // 检查请求是否成功\r\n        if (response.data && response.data.code === 200) {\r\n            return {\r\n                success: true,\r\n                conversations: response.data.data.conversations\r\n            };\r\n        } else {\r\n            console.error('获取对话历史失败:', response.data.message || '未知错误');\r\n            return {\r\n                success: false,\r\n                message: response.data.message || '获取对话历史失败'\r\n            };\r\n        }\r\n    } catch (error) {\r\n        console.error('获取对话历史时出错:', error);\r\n        return {\r\n            success: false,\r\n            message: '网络错误，请稍后重试'\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * 获取特定对话的详细内容\r\n * @param {string} conversationId - 对话ID\r\n * @returns {Promise<Object>} - 返回对话详细内容\r\n */\r\nexport const getConversationDetail = async (conversationId) => {\r\n    try {\r\n        // 获取用户ID\r\n        const userId = store.state.user.baseInfo.id;\r\n        \r\n        // 发送请求\r\n        const response = await uniRequest({\r\n            url: AIQA_GET_HISTORY_DETAIL_URL,\r\n            method: 'GET',\r\n            data: { \r\n                userId,\r\n                conversationId \r\n            }\r\n        });\r\n        \r\n        // 检查请求是否成功\r\n        if (response.data && response.data.code === 200) {\r\n            return {\r\n                success: true,\r\n                messages: response.data.data.messages\r\n            };\r\n        } else {\r\n            console.error('获取对话详情失败:', response.data.message || '未知错误');\r\n            return {\r\n                success: false,\r\n                message: response.data.message || '获取对话详情失败'\r\n            };\r\n        }\r\n    } catch (error) {\r\n        console.error('获取对话详情时出错:', error);\r\n        return {\r\n            success: false,\r\n            message: '网络错误，请稍后重试'\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * 删除特定对话\r\n * @param {string} conversationId - 对话ID\r\n * @returns {Promise<Object>} - 返回删除结果\r\n */\r\nexport const deleteConversation = async (conversationId) => {\r\n    try {\r\n        // 获取用户ID\r\n        const userId = store.state.user.baseInfo.id;\r\n        \r\n        // 发送请求\r\n        const response = await uniRequest({\r\n            url: AIQA_DELETE_HISTORY_URL,\r\n            method: 'POST',\r\n            data: {\r\n                userId,\r\n                conversationId\r\n            }\r\n        });\r\n        \r\n        // 检查请求是否成功\r\n        if (response.data && response.data.code === 200) {\r\n            return {\r\n                success: true,\r\n                message: '对话已成功删除'\r\n            };\r\n        } else {\r\n            console.error('删除对话失败:', response.data.message || '未知错误');\r\n            return {\r\n                success: false,\r\n                message: response.data.message || '删除对话失败'\r\n            };\r\n        }\r\n    } catch (error) {\r\n        console.error('删除对话时出错:', error);\r\n        return {\r\n            success: false,\r\n            message: '网络错误，请稍后重试'\r\n        };\r\n    }\r\n}; "],"names":["uni","store","AIQA_QUESTION_URL","AIQA_GET_HISTORY_URL","AIQA_GET_HISTORY_DETAIL_URL","AIQA_DELETE_HISTORY_URL"],"mappings":";;;;AAiBA,MAAM,aAAa,CAAC,YAAY;AAC5B,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpCA,kBAAAA,MAAI,QAAQ;AAAA,MACR,KAAK,QAAQ;AAAA,MACb,MAAM,QAAQ,QAAQ,QAAQ;AAAA,MAC9B,QAAQ,QAAQ,UAAU;AAAA,MAC1B,QAAQ,QAAQ,UAAU,CAAE;AAAA,MAC5B,SAAS,CAAC,QAAQ;AACd,gBAAQ,GAAG;AAAA,MACd;AAAA,MACD,MAAM,CAAC,QAAQ;AACX,eAAO,GAAG;AAAA,MACb;AAAA,IACb,CAAS;AAAA,EACT,CAAK;AACL;AAUY,MAAC,kBAAkB,OAAO,gBAAgB;AAClD,MAAI;AAEA,UAAM,SAASC,YAAAA,MAAM,MAAM,KAAK,SAAS;AAEzC,UAAM,aAAaA,YAAAA,MAAM,MAAM,KAAK,SAAS,SAAS;AACtD,UAAM,YAAYA,YAAAA,MAAM,MAAM,KAAK,SAAS,SAAS;AAGrD,UAAM,cAAc;AAAA,MAChB;AAAA,MACA,SAAS,YAAY;AAAA,MACrB,UAAU,YAAY;AAAA,MACtB,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,gBAAgB,YAAY;AAAA,IACxC;AAGQ,UAAM,WAAW,MAAM,WAAW;AAAA,MAC9B,KAAKC,eAAiB;AAAA,MACtB,QAAQ;AAAA,MACR,MAAM;AAAA,IAClB,CAAS;AAGD,QAAI,SAAS,QAAQ,SAAS,KAAK,SAAS,KAAK;AAC7C,aAAO;AAAA,QACH,SAAS;AAAA,QACT,gBAAgB,SAAS,KAAK,KAAK;AAAA,QACnC,YAAY,SAAS,KAAK,KAAK;AAAA,QAC/B,WAAW,SAAS,KAAK,KAAK;AAAA,MAC9C;AAAA,IACA,OAAe;AACHF,0BAAc,MAAA,SAAA,2CAAA,WAAW,SAAS,KAAK,WAAW,MAAM;AACxD,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS,SAAS,KAAK,WAAW;AAAA,MAClD;AAAA,IACS;AAAA,EACJ,SAAQ,OAAO;AACZA,kBAAA,MAAA,MAAA,SAAA,2CAAc,eAAe,KAAK;AAClC,WAAO;AAAA,MACH,SAAS;AAAA,MACT,SAAS;AAAA,IACrB;AAAA,EACK;AACL;AAMY,MAAC,yBAAyB,YAAY;AAC9C,MAAI;AAEA,UAAM,SAASC,YAAAA,MAAM,MAAM,KAAK,SAAS;AAGzC,UAAM,WAAW,MAAM,WAAW;AAAA,MAC9B,KAAKE,eAAoB;AAAA,MACzB,QAAQ;AAAA,MACR,MAAM,EAAE,OAAQ;AAAA,IAC5B,CAAS;AAGD,QAAI,SAAS,QAAQ,SAAS,KAAK,SAAS,KAAK;AAC7C,aAAO;AAAA,QACH,SAAS;AAAA,QACT,eAAe,SAAS,KAAK,KAAK;AAAA,MAClD;AAAA,IACA,OAAe;AACHH,0BAAc,MAAA,SAAA,4CAAA,aAAa,SAAS,KAAK,WAAW,MAAM;AAC1D,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS,SAAS,KAAK,WAAW;AAAA,MAClD;AAAA,IACS;AAAA,EACJ,SAAQ,OAAO;AACZA,kBAAA,MAAA,MAAA,SAAA,4CAAc,cAAc,KAAK;AACjC,WAAO;AAAA,MACH,SAAS;AAAA,MACT,SAAS;AAAA,IACrB;AAAA,EACK;AACL;AAOY,MAAC,wBAAwB,OAAO,mBAAmB;AAC3D,MAAI;AAEA,UAAM,SAASC,YAAAA,MAAM,MAAM,KAAK,SAAS;AAGzC,UAAM,WAAW,MAAM,WAAW;AAAA,MAC9B,KAAKG,eAA2B;AAAA,MAChC,QAAQ;AAAA,MACR,MAAM;AAAA,QACF;AAAA,QACA;AAAA,MACH;AAAA,IACb,CAAS;AAGD,QAAI,SAAS,QAAQ,SAAS,KAAK,SAAS,KAAK;AAC7C,aAAO;AAAA,QACH,SAAS;AAAA,QACT,UAAU,SAAS,KAAK,KAAK;AAAA,MAC7C;AAAA,IACA,OAAe;AACHJ,0BAAc,MAAA,SAAA,4CAAA,aAAa,SAAS,KAAK,WAAW,MAAM;AAC1D,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS,SAAS,KAAK,WAAW;AAAA,MAClD;AAAA,IACS;AAAA,EACJ,SAAQ,OAAO;AACZA,kBAAA,MAAA,MAAA,SAAA,4CAAc,cAAc,KAAK;AACjC,WAAO;AAAA,MACH,SAAS;AAAA,MACT,SAAS;AAAA,IACrB;AAAA,EACK;AACL;AAOY,MAAC,qBAAqB,OAAO,mBAAmB;AACxD,MAAI;AAEA,UAAM,SAASC,YAAAA,MAAM,MAAM,KAAK,SAAS;AAGzC,UAAM,WAAW,MAAM,WAAW;AAAA,MAC9B,KAAKI,eAAuB;AAAA,MAC5B,QAAQ;AAAA,MACR,MAAM;AAAA,QACF;AAAA,QACA;AAAA,MACH;AAAA,IACb,CAAS;AAGD,QAAI,SAAS,QAAQ,SAAS,KAAK,SAAS,KAAK;AAC7C,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS;AAAA,MACzB;AAAA,IACA,OAAe;AACHL,0BAAc,MAAA,SAAA,4CAAA,WAAW,SAAS,KAAK,WAAW,MAAM;AACxD,aAAO;AAAA,QACH,SAAS;AAAA,QACT,SAAS,SAAS,KAAK,WAAW;AAAA,MAClD;AAAA,IACS;AAAA,EACJ,SAAQ,OAAO;AACZA,kBAAc,MAAA,MAAA,SAAA,4CAAA,YAAY,KAAK;AAC/B,WAAO;AAAA,MACH,SAAS;AAAA,MACT,SAAS;AAAA,IACrB;AAAA,EACK;AACL;;;;;"}