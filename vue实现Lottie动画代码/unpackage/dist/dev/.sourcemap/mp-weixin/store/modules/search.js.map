{"version":3,"file":"search.js","sources":["store/modules/search.js"],"sourcesContent":["/**\r\n * @description 字段搜索Vuex模块，用于管理下拉框搜索状态和操作\r\n */\r\n\r\nconst state = {\r\n  results: [], // 搜索结果列表\r\n  loading: false, // 加载状态\r\n  error: null, // 错误信息\r\n  fieldOptions: {}, // 各字段的可选项缓存\r\n};\r\n\r\nconst mutations = {\r\n  /**\r\n   * @description 设置搜索结果\r\n   * @param {Object} state - Vuex状态\r\n   * @param {Array} results - 搜索结果数组\r\n   */\r\n  SET_SEARCH_RESULTS(state, results) {\r\n    state.results = results;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置加载状态\r\n   * @param {Object} state - Vuex状态\r\n   * @param {Boolean} status - 加载状态\r\n   */\r\n  SET_LOADING(state, status) {\r\n    state.loading = status;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置错误信息\r\n   * @param {Object} state - Vuex状态\r\n   * @param {String|null} error - 错误信息\r\n   */\r\n  SET_ERROR(state, error) {\r\n    state.error = error;\r\n  },\r\n  \r\n  /**\r\n   * @description 缓存字段选项\r\n   * @param {Object} state - Vuex状态\r\n   * @param {Object} payload - 包含字段名和选项的对象\r\n   */\r\n  CACHE_FIELD_OPTIONS(state, { fieldName, options }) {\r\n    state.fieldOptions = {\r\n      ...state.fieldOptions,\r\n      [fieldName]: options\r\n    };\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  /**\r\n   * @description 搜索字段\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} payload - 包含字段名和关键词的对象\r\n   */\r\n  async searchField({ commit }, { fieldName, keyword }) {\r\n    try {\r\n      commit('SET_LOADING', true);\r\n      commit('SET_ERROR', null);\r\n      \r\n      // 这里替换为实际的API调用\r\n      // 模拟API请求\r\n      const results = await fetchFieldData(fieldName, keyword);\r\n      \r\n      commit('SET_SEARCH_RESULTS', results);\r\n      return results;\r\n    } catch (error) {\r\n      console.error('搜索字段出错:', error);\r\n      commit('SET_ERROR', error.message || '搜索失败');\r\n      return [];\r\n    } finally {\r\n      commit('SET_LOADING', false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 获取字段初始选项\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} payload - 包含字段名的对象\r\n   */\r\n  async fetchInitialOptions({ commit, state }, { fieldName }) {\r\n    // 如果已缓存此字段的选项，直接返回\r\n    if (state.fieldOptions[fieldName]) {\r\n      commit('SET_SEARCH_RESULTS', state.fieldOptions[fieldName]);\r\n      return state.fieldOptions[fieldName];\r\n    }\r\n    \r\n    try {\r\n      commit('SET_LOADING', true);\r\n      commit('SET_ERROR', null);\r\n      \r\n      // 这里替换为实际的API调用，获取初始选项\r\n      const options = await fetchFieldInitialOptions(fieldName);\r\n      \r\n      // 缓存字段选项\r\n      commit('CACHE_FIELD_OPTIONS', { fieldName, options });\r\n      commit('SET_SEARCH_RESULTS', options);\r\n      \r\n      return options;\r\n    } catch (error) {\r\n      console.error('获取初始选项出错:', error);\r\n      commit('SET_ERROR', error.message || '获取选项失败');\r\n      return [];\r\n    } finally {\r\n      commit('SET_LOADING', false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 清空搜索结果\r\n   * @param {Object} context - Vuex上下文\r\n   */\r\n  clearSearchResults({ commit }) {\r\n    commit('SET_SEARCH_RESULTS', []);\r\n  }\r\n};\r\n\r\n/**\r\n * @description 模拟从服务器获取字段数据\r\n * @param {String} fieldName - 字段名称\r\n * @param {String} keyword - 搜索关键词\r\n * @returns {Promise<Array>} 搜索结果数组\r\n */\r\nfunction fetchFieldData(fieldName, keyword) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      // 这里模拟不同字段的数据\r\n      const mockData = {\r\n        // 模拟用户列表\r\n        user: [\r\n          { choiceItemId: 1, choiceItemContent: '张三' },\r\n          { choiceItemId: 2, choiceItemContent: '李四' },\r\n          { choiceItemId: 3, choiceItemContent: '王五' },\r\n          { choiceItemId: 4, choiceItemContent: '赵六' }\r\n        ],\r\n        // 模拟部门列表\r\n        department: [\r\n          { choiceItemId: 1, choiceItemContent: '技术部' },\r\n          { choiceItemId: 2, choiceItemContent: '市场部' },\r\n          { choiceItemId: 3, choiceItemContent: '销售部' },\r\n          { choiceItemId: 4, choiceItemContent: '人事部' }\r\n        ],\r\n        // 模拟任务类型\r\n        taskType: [\r\n          { choiceItemId: 1, choiceItemContent: '开发任务' },\r\n          { choiceItemId: 2, choiceItemContent: '设计任务' },\r\n          { choiceItemId: 3, choiceItemContent: '测试任务' },\r\n          { choiceItemId: 4, choiceItemContent: '运维任务' }\r\n        ]\r\n      };\r\n      \r\n      // 根据字段名和关键词筛选数据\r\n      const fieldData = mockData[fieldName] || [];\r\n      const filteredData = keyword \r\n        ? fieldData.filter(item => \r\n            item.choiceItemContent.toLowerCase().includes(keyword.toLowerCase())\r\n          )\r\n        : fieldData;\r\n        \r\n      resolve(filteredData);\r\n    }, 300); // 模拟网络延迟\r\n  });\r\n}\r\n\r\n/**\r\n * @description 模拟获取字段初始选项\r\n * @param {String} fieldName - 字段名称\r\n * @returns {Promise<Array>} 选项数组\r\n */\r\nfunction fetchFieldInitialOptions(fieldName) {\r\n  // 简单调用相同的数据获取函数，但不带关键词\r\n  return fetchFieldData(fieldName, '');\r\n}\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions\r\n}; "],"names":["state","uni"],"mappings":"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"}