{"version":3,"file":"websocketManager.js","sources":["utils/websocketManager.js"],"sourcesContent":["/**\r\n * 全局WebSocket状态管理器\r\n * 用于在页面间共享WebSocket连接状态\r\n */\r\n\r\nclass WebSocketManager {\r\n  constructor() {\r\n    this.isConnected = false;\r\n    this.connectionListeners = new Set();\r\n    this.currentConversationId = null;\r\n  }\r\n\r\n  /**\r\n   * 设置WebSocket连接状态\r\n   * @param {boolean} connected - 连接状态\r\n   * @param {string} conversationId - 当前会话ID\r\n   */\r\n  setConnectionStatus(connected, conversationId = null) {\r\n    const previousStatus = this.isConnected;\r\n    this.isConnected = connected;\r\n    this.currentConversationId = conversationId;\r\n\r\n    console.log(\"[WebSocket管理] 状态变更:\", {\r\n      connected,\r\n      conversationId,\r\n      previousStatus,\r\n    });\r\n\r\n    // 通知所有监听器\r\n    this.notifyListeners();\r\n  }\r\n\r\n  /**\r\n   * 获取当前连接状态\r\n   * @returns {boolean}\r\n   */\r\n  getConnectionStatus() {\r\n    return this.isConnected;\r\n  }\r\n\r\n  /**\r\n   * 获取当前会话ID\r\n   * @returns {string|null}\r\n   */\r\n  getCurrentConversationId() {\r\n    return this.currentConversationId;\r\n  }\r\n\r\n  /**\r\n   * 添加连接状态监听器\r\n   * @param {Function} listener - 监听器函数\r\n   */\r\n  addConnectionListener(listener) {\r\n    this.connectionListeners.add(listener);\r\n  }\r\n\r\n  /**\r\n   * 移除连接状态监听器\r\n   * @param {Function} listener - 监听器函数\r\n   */\r\n  removeConnectionListener(listener) {\r\n    this.connectionListeners.delete(listener);\r\n  }\r\n\r\n  /**\r\n   * 通知所有监听器\r\n   */\r\n  notifyListeners() {\r\n    this.connectionListeners.forEach((listener) => {\r\n      try {\r\n        listener(this.isConnected, this.currentConversationId);\r\n      } catch (error) {\r\n        console.error(\"[WebSocket管理] 通知监听器失败:\", error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 清理所有状态\r\n   */\r\n  cleanup() {\r\n    this.isConnected = false;\r\n    this.currentConversationId = null;\r\n    this.connectionListeners.clear();\r\n    console.log(\"[WebSocket管理] 清理完成\");\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst websocketManager = new WebSocketManager();\r\n\r\nexport default websocketManager;\r\n"],"names":["WebSocketManager","connected","conversationId","previousStatus","uni","listener","error","websocketManager"],"mappings":"oDAKA,MAAMA,CAAiB,CACrB,aAAc,CACZ,KAAK,YAAc,GACnB,KAAK,oBAAsB,IAAI,IAC/B,KAAK,sBAAwB,IAC9B,CAOD,oBAAoBC,EAAWC,EAAiB,KAAM,CACpD,MAAMC,EAAiB,KAAK,YAC5B,KAAK,YAAcF,EACnB,KAAK,sBAAwBC,EAE7BE,EAAAA,MAAA,MAAA,MAAA,kCAAY,sBAAuB,CACjC,UAAAH,EACA,eAAAC,EACA,eAAAC,CACN,CAAK,EAGD,KAAK,gBAAe,CACrB,CAMD,qBAAsB,CACpB,OAAO,KAAK,WACb,CAMD,0BAA2B,CACzB,OAAO,KAAK,qBACb,CAMD,sBAAsBE,EAAU,CAC9B,KAAK,oBAAoB,IAAIA,CAAQ,CACtC,CAMD,yBAAyBA,EAAU,CACjC,KAAK,oBAAoB,OAAOA,CAAQ,CACzC,CAKD,iBAAkB,CAChB,KAAK,oBAAoB,QAASA,GAAa,CAC7C,GAAI,CACFA,EAAS,KAAK,YAAa,KAAK,qBAAqB,CACtD,OAAQC,EAAO,CACdF,EAAc,MAAA,MAAA,QAAA,kCAAA,yBAA0BE,CAAK,CAC9C,CACP,CAAK,CACF,CAKD,SAAU,CACR,KAAK,YAAc,GACnB,KAAK,sBAAwB,KAC7B,KAAK,oBAAoB,QACzBF,EAAAA,MAAY,MAAA,MAAA,kCAAA,oBAAoB,CACjC,CACH,CAGK,MAACG,EAAmB,IAAIP"}