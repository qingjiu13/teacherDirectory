{"version":3,"file":"pageStateManager.js","sources":["utils/pageStateManager.js"],"sourcesContent":["/**\r\n * 全局页面状态管理器\r\n * 用于管理应用级别的页面状态，包括当前页面、页面栈等\r\n */\r\n\r\nclass PageStateManager {\r\n  constructor() {\r\n    this.currentPage = null;\r\n    this.pageStack = [];\r\n    this.pageListeners = new Set();\r\n  }\r\n\r\n  /**\r\n   * 设置当前页面\r\n   * @param {string} pageName - 页面名称\r\n   * @param {Object} options - 页面选项\r\n   */\r\n  setCurrentPage(pageName, options = {}) {\r\n    const previousPage = this.currentPage;\r\n    this.currentPage = pageName;\r\n\r\n    console.log(\"[页面状态管理] 页面切换:\", {\r\n      from: previousPage,\r\n      to: pageName,\r\n      options,\r\n    });\r\n\r\n    // 更新页面栈\r\n    this.updatePageStack(pageName, options);\r\n\r\n    // 通知所有监听器\r\n    this.notifyListeners();\r\n  }\r\n\r\n  /**\r\n   * 获取当前页面\r\n   * @returns {string|null}\r\n   */\r\n  getCurrentPage() {\r\n    return this.currentPage;\r\n  }\r\n\r\n  /**\r\n   * 获取页面栈\r\n   * @returns {Array}\r\n   */\r\n  getPageStack() {\r\n    return [...this.pageStack];\r\n  }\r\n\r\n  /**\r\n   * 更新页面栈\r\n   * @param {string} pageName - 页面名称\r\n   * @param {Object} options - 页面选项\r\n   */\r\n  updatePageStack(pageName, options = {}) {\r\n    // 如果是返回操作，移除栈顶页面\r\n    if (options.isBack) {\r\n      this.pageStack.pop();\r\n    } else {\r\n      // 添加新页面到栈顶\r\n      this.pageStack.push({\r\n        name: pageName,\r\n        timestamp: Date.now(),\r\n        options,\r\n      });\r\n    }\r\n\r\n    // 限制栈的大小，防止内存泄漏\r\n    if (this.pageStack.length > 10) {\r\n      this.pageStack = this.pageStack.slice(-10);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加页面状态监听器\r\n   * @param {Function} listener - 监听器函数\r\n   */\r\n  addPageListener(listener) {\r\n    this.pageListeners.add(listener);\r\n  }\r\n\r\n  /**\r\n   * 移除页面状态监听器\r\n   * @param {Function} listener - 监听器函数\r\n   */\r\n  removePageListener(listener) {\r\n    this.pageListeners.delete(listener);\r\n  }\r\n\r\n  /**\r\n   * 通知所有监听器\r\n   */\r\n  notifyListeners() {\r\n    this.pageListeners.forEach((listener) => {\r\n      try {\r\n        listener(this.currentPage, this.pageStack);\r\n      } catch (error) {\r\n        console.error(\"[页面状态管理] 通知监听器失败:\", error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 判断是否在指定页面\r\n   * @param {string} pageName - 页面名称\r\n   * @returns {boolean}\r\n   */\r\n  isInPage(pageName) {\r\n    return this.currentPage === pageName;\r\n  }\r\n\r\n  /**\r\n   * 判断是否在聊天相关页面\r\n   * @returns {boolean}\r\n   */\r\n  isInChatPage() {\r\n    return this.currentPage === \"chat-box\" || this.currentPage === \"chat-list\";\r\n  }\r\n\r\n  /**\r\n   * 清理所有状态\r\n   */\r\n  cleanup() {\r\n    this.currentPage = null;\r\n    this.pageStack = [];\r\n    this.pageListeners.clear();\r\n    console.log(\"[页面状态管理] 清理完成\");\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst pageStateManager = new PageStateManager();\r\n\r\nexport default pageStateManager;\r\n"],"names":["PageStateManager","pageName","options","previousPage","uni","listener","error","pageStateManager"],"mappings":"oDAKA,MAAMA,CAAiB,CACrB,aAAc,CACZ,KAAK,YAAc,KACnB,KAAK,UAAY,GACjB,KAAK,cAAgB,IAAI,GAC1B,CAOD,eAAeC,EAAUC,EAAU,GAAI,CACrC,MAAMC,EAAe,KAAK,YAC1B,KAAK,YAAcF,EAEnBG,EAAAA,MAAA,MAAA,MAAA,kCAAY,iBAAkB,CAC5B,KAAMD,EACN,GAAIF,EACJ,QAAAC,CACN,CAAK,EAGD,KAAK,gBAAgBD,EAAUC,CAAO,EAGtC,KAAK,gBAAe,CACrB,CAMD,gBAAiB,CACf,OAAO,KAAK,WACb,CAMD,cAAe,CACb,MAAO,CAAC,GAAG,KAAK,SAAS,CAC1B,CAOD,gBAAgBD,EAAUC,EAAU,GAAI,CAElCA,EAAQ,OACV,KAAK,UAAU,MAGf,KAAK,UAAU,KAAK,CAClB,KAAMD,EACN,UAAW,KAAK,IAAK,EACrB,QAAAC,CACR,CAAO,EAIC,KAAK,UAAU,OAAS,KAC1B,KAAK,UAAY,KAAK,UAAU,MAAM,GAAG,EAE5C,CAMD,gBAAgBG,EAAU,CACxB,KAAK,cAAc,IAAIA,CAAQ,CAChC,CAMD,mBAAmBA,EAAU,CAC3B,KAAK,cAAc,OAAOA,CAAQ,CACnC,CAKD,iBAAkB,CAChB,KAAK,cAAc,QAASA,GAAa,CACvC,GAAI,CACFA,EAAS,KAAK,YAAa,KAAK,SAAS,CAC1C,OAAQC,EAAO,CACdF,EAAA,MAAA,MAAA,QAAA,kCAAc,oBAAqBE,CAAK,CACzC,CACP,CAAK,CACF,CAOD,SAASL,EAAU,CACjB,OAAO,KAAK,cAAgBA,CAC7B,CAMD,cAAe,CACb,OAAO,KAAK,cAAgB,YAAc,KAAK,cAAgB,WAChE,CAKD,SAAU,CACR,KAAK,YAAc,KACnB,KAAK,UAAY,GACjB,KAAK,cAAc,QACnBG,EAAAA,MAAA,MAAA,MAAA,mCAAY,eAAe,CAC5B,CACH,CAGK,MAACG,EAAmB,IAAIP"}