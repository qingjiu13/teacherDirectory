{"version":3,"file":"pollingManager.js","sources":["utils/pollingManager.js"],"sourcesContent":["/**\r\n * 全局轮询管理器\r\n * 用于管理聊天相关的轮询状态，确保只在特定条件下进行轮询\r\n */\r\n\r\nimport websocketManager from \"./websocketManager.js\";\r\nimport pageStateManager from \"./pageStateManager.js\";\r\n\r\nclass PollingManager {\r\n  constructor() {\r\n    this.isPolling = false;\r\n    this.pollingInterval = null;\r\n    this.pollingCallbacks = new Map(); // 存储轮询回调函数\r\n\r\n    // 监听WebSocket状态变化\r\n    websocketManager.addConnectionListener((connected) => {\r\n      this.updatePollingState();\r\n    });\r\n\r\n    // 监听页面状态变化\r\n    pageStateManager.addPageListener((currentPage) => {\r\n      this.updatePollingState();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 设置当前页面\r\n   * @param {string} pageName - 页面名称 ('chat-box', 'chat-list', 'other')\r\n   */\r\n  setCurrentPage(pageName) {\r\n    console.log(\"[轮询管理] 设置当前页面:\", pageName);\r\n    pageStateManager.setCurrentPage(pageName);\r\n  }\r\n\r\n  /**\r\n   * 更新轮询状态\r\n   */\r\n  updatePollingState() {\r\n    const shouldPoll = this.shouldStartPolling();\r\n\r\n    if (shouldPoll && !this.isPolling) {\r\n      this.startPolling();\r\n    } else if (!shouldPoll && this.isPolling) {\r\n      this.stopPolling();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 判断是否应该开始轮询\r\n   * @returns {boolean}\r\n   */\r\n  shouldStartPolling() {\r\n    const websocketConnected = websocketManager.getConnectionStatus();\r\n    const currentPage = pageStateManager.getCurrentPage();\r\n\r\n    console.log(\"[轮询调试] 判断是否应该轮询:\", {\r\n      websocketConnected,\r\n      currentPage,\r\n      shouldPoll: false,\r\n    });\r\n\r\n    // 规则1: 在chat-box页面时，如果WebSocket断开则轮询\r\n    if (currentPage === \"chat-box\") {\r\n      const shouldPoll = !websocketConnected;\r\n      console.log(\r\n        \"[轮询调试] chat-box页面，WebSocket断开:\",\r\n        !websocketConnected,\r\n        \"应该轮询:\",\r\n        shouldPoll\r\n      );\r\n      return shouldPoll;\r\n    }\r\n\r\n    // 规则2: 在chat-list页面时，如果WebSocket断开则轮询\r\n    if (currentPage === \"chat-list\") {\r\n      const shouldPoll = !websocketConnected;\r\n      console.log(\r\n        \"[轮询调试] chat-list页面，WebSocket断开:\",\r\n        !websocketConnected,\r\n        \"应该轮询:\",\r\n        shouldPoll\r\n      );\r\n      return shouldPoll;\r\n    }\r\n\r\n    // 规则3: 其他页面不轮询\r\n    console.log(\"[轮询调试] 其他页面，不轮询\");\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 开始轮询\r\n   */\r\n  startPolling() {\r\n    if (this.isPolling) {\r\n      console.log(\"[轮询管理] 轮询已在进行中，跳过\");\r\n      return;\r\n    }\r\n\r\n    const currentPage = pageStateManager.getCurrentPage();\r\n    console.log(\"[轮询管理] 开始轮询，当前页面:\", currentPage);\r\n    this.isPolling = true;\r\n\r\n    this.pollingInterval = setInterval(() => {\r\n      this.executePollingCallbacks();\r\n    }, 2000); // 每2秒轮询一次\r\n  }\r\n\r\n  /**\r\n   * 停止轮询\r\n   */\r\n  stopPolling() {\r\n    if (!this.isPolling) {\r\n      return;\r\n    }\r\n\r\n    console.log(\"[轮询管理] 停止轮询\");\r\n    this.isPolling = false;\r\n\r\n    if (this.pollingInterval) {\r\n      clearInterval(this.pollingInterval);\r\n      this.pollingInterval = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册轮询回调函数\r\n   * @param {string} key - 回调标识\r\n   * @param {Function} callback - 回调函数\r\n   */\r\n  registerPollingCallback(key, callback) {\r\n    this.pollingCallbacks.set(key, callback);\r\n    console.log(\"[轮询管理] 注册轮询回调:\", key);\r\n  }\r\n\r\n  /**\r\n   * 注销轮询回调函数\r\n   * @param {string} key - 回调标识\r\n   */\r\n  unregisterPollingCallback(key) {\r\n    this.pollingCallbacks.delete(key);\r\n    console.log(\"[轮询管理] 注销轮询回调:\", key);\r\n  }\r\n\r\n  /**\r\n   * 执行所有注册的轮询回调\r\n   */\r\n  executePollingCallbacks() {\r\n    if (this.pollingCallbacks.size === 0) {\r\n      return;\r\n    }\r\n\r\n    console.log(\"[轮询管理] 执行轮询回调，数量:\", this.pollingCallbacks.size);\r\n\r\n    this.pollingCallbacks.forEach((callback, key) => {\r\n      try {\r\n        callback();\r\n      } catch (error) {\r\n        console.error(\"[轮询管理] 执行回调失败:\", key, error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取当前轮询状态\r\n   * @returns {Object}\r\n   */\r\n  getStatus() {\r\n    return {\r\n      isPolling: this.isPolling,\r\n      currentPage: pageStateManager.getCurrentPage(),\r\n      websocketConnected: websocketManager.getConnectionStatus(),\r\n      callbackCount: this.pollingCallbacks.size,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 清理所有状态\r\n   */\r\n  cleanup() {\r\n    this.stopPolling();\r\n    this.pollingCallbacks.clear();\r\n    console.log(\"[轮询管理] 清理完成\");\r\n  }\r\n\r\n  /**\r\n   * 手动触发某个轮询回调（如发送消息后立即刷新会话列表）\r\n   * @param {string} key - 回调标识\r\n   */\r\n  triggerPollingCallback(key) {\r\n    const callback = this.pollingCallbacks.get(key);\r\n    if (callback) {\r\n      try {\r\n        callback();\r\n      } catch (error) {\r\n        console.error(\"[轮询管理] 手动触发回调失败:\", key, error);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst pollingManager = new PollingManager();\r\n\r\nexport default pollingManager;\r\n"],"names":["PollingManager","websocketManager","connected","pageStateManager","currentPage","pageName","uni","shouldPoll","websocketConnected","key","callback","error","pollingManager"],"mappings":"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"}