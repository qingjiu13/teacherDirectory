{"version":3,"file":"safeJsonParse.js","sources":["utils/safeJsonParse.js"],"sourcesContent":["/**\r\n * 安全的JSON解析工具函数\r\n * @module utils/safeJsonParse\r\n */\r\n\r\n/**\r\n * 安全地解析JSON字符串\r\n * @param {string|any} data - 要解析的数据\r\n * @param {any} defaultValue - 解析失败时的默认值\r\n * @returns {any} 解析后的数据或默认值\r\n */\r\nexport function safeJsonParse(data, defaultValue = null) {\r\n  if (!data) {\r\n    return defaultValue;\r\n  }\r\n\r\n  // 如果已经是对象，直接返回\r\n  if (typeof data === \"object\" && data !== null) {\r\n    return data;\r\n  }\r\n\r\n  // 如果不是字符串，返回默认值\r\n  if (typeof data !== \"string\") {\r\n    return defaultValue;\r\n  }\r\n\r\n  try {\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    console.error(\"JSON解析失败:\", error, \"原始数据:\", data);\r\n    return defaultValue;\r\n  }\r\n}\r\n\r\n/**\r\n * 安全地从uni.getStorageSync获取并解析JSON数据\r\n * @param {string} key - 存储键名\r\n * @param {any} defaultValue - 解析失败时的默认值\r\n * @returns {any} 解析后的数据或默认值\r\n */\r\nexport function safeGetStorageJson(key, defaultValue = null) {\r\n  try {\r\n    const data = uni.getStorageSync(key);\r\n    return safeJsonParse(data, defaultValue);\r\n  } catch (error) {\r\n    console.error(`获取存储数据失败 (key: ${key}):`, error);\r\n    return defaultValue;\r\n  }\r\n}\r\n\r\n/**\r\n * 安全地设置JSON数据到uni存储\r\n * @param {string} key - 存储键名\r\n * @param {any} data - 要存储的数据\r\n * @returns {boolean} 是否成功\r\n */\r\nexport function safeSetStorageJson(key, data) {\r\n  try {\r\n    const jsonString = JSON.stringify(data);\r\n    uni.setStorageSync(key, jsonString);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`设置存储数据失败 (key: ${key}):`, error);\r\n    return false;\r\n  }\r\n}\r\n"],"names":["safeJsonParse","data","defaultValue","error","uni"],"mappings":"oDAWO,SAASA,EAAcC,EAAMC,EAAe,KAAM,CACvD,GAAI,CAACD,EACH,OAAOC,EAIT,GAAI,OAAOD,GAAS,UAAYA,IAAS,KACvC,OAAOA,EAIT,GAAI,OAAOA,GAAS,SAClB,OAAOC,EAGT,GAAI,CACF,OAAO,KAAK,MAAMD,CAAI,CACvB,OAAQE,EAAO,CACdC,OAAAA,QAAc,MAAA,QAAA,+BAAA,YAAaD,EAAO,QAASF,CAAI,EACxCC,CACR,CACH"}