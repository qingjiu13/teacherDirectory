{"version":3,"file":"digit.js","sources":["uni_modules/uview-plus/libs/function/digit.js"],"sourcesContent":["let _boundaryCheckingState = true; // 是否进行越界检查的全局开关\n\n/**\n * 把错误的数据转正\n * @private\n * @example strip(0.09999999999999998)=0.1\n */\nexport function strip(num, precision = 15) {\n  return +parseFloat(Number(num).toPrecision(precision));\n}\n\n/**\n * Return digits length of a number\n * @private\n * @param {*number} num Input number\n */\nexport function digitLength(num) {\n  // Get digit length of e\n  const eSplit = num.toString().split(/[eE]/);\n  const len = (eSplit[0].split('.')[1] || '').length - +(eSplit[1] || 0);\n  return len > 0 ? len : 0;\n}\n\n/**\n * 把小数转成整数,如果是小数则放大成整数\n * @private\n * @param {*number} num 输入数\n */\nexport function float2Fixed(num) {\n  if (num.toString().indexOf('e') === -1) {\n    return Number(num.toString().replace('.', ''));\n  }\n  const dLen = digitLength(num);\n  return dLen > 0 ? strip(Number(num) * Math.pow(10, dLen)) : Number(num);\n}\n\n/**\n * 检测数字是否越界，如果越界给出提示\n * @private\n * @param {*number} num 输入数\n */\nexport function checkBoundary(num) {\n  if (_boundaryCheckingState) {\n    if (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) {\n      console.warn(`${num} 超出了精度限制，结果可能不正确`);\n    }\n  }\n}\n\n/**\n * 把递归操作扁平迭代化\n * @param {number[]} arr 要操作的数字数组\n * @param {function} operation 迭代操作\n * @private\n */\nexport function iteratorOperation(arr, operation) {\n  const [num1, num2, ...others] = arr;\n  let res = operation(num1, num2);\n\n  others.forEach((num) => {\n    res = operation(res, num);\n  });\n\n  return res;\n}\n\n/**\n * 高精度乘法\n * @export\n */\nexport function times(...nums) {\n  if (nums.length > 2) {\n    return iteratorOperation(nums, times);\n  }\n\n  const [num1, num2] = nums;\n  const num1Changed = float2Fixed(num1);\n  const num2Changed = float2Fixed(num2);\n  const baseNum = digitLength(num1) + digitLength(num2);\n  const leftValue = num1Changed * num2Changed;\n\n  checkBoundary(leftValue);\n\n  return leftValue / Math.pow(10, baseNum);\n}\n\n/**\n * 高精度加法\n * @export\n */\nexport function plus(...nums) {\n  if (nums.length > 2) {\n    return iteratorOperation(nums, plus);\n  }\n\n  const [num1, num2] = nums;\n  // 取最大的小数位\n  const baseNum = Math.pow(10, Math.max(digitLength(num1), digitLength(num2)));\n  // 把小数都转为整数然后再计算\n  return (times(num1, baseNum) + times(num2, baseNum)) / baseNum;\n}\n\n/**\n * 高精度减法\n * @export\n */\nexport function minus(...nums) {\n  if (nums.length > 2) {\n    return iteratorOperation(nums, minus);\n  }\n\n  const [num1, num2] = nums;\n  const baseNum = Math.pow(10, Math.max(digitLength(num1), digitLength(num2)));\n  return (times(num1, baseNum) - times(num2, baseNum)) / baseNum;\n}\n\n/**\n * 高精度除法\n * @export\n */\nexport function divide(...nums) {\n  if (nums.length > 2) {\n    return iteratorOperation(nums, divide);\n  }\n\n  const [num1, num2] = nums;\n  const num1Changed = float2Fixed(num1);\n  const num2Changed = float2Fixed(num2);\n  checkBoundary(num1Changed);\n  checkBoundary(num2Changed);\n  // 重要，这里必须用strip进行修正\n  return times(num1Changed / num2Changed, strip(Math.pow(10, digitLength(num2) - digitLength(num1))));\n}\n\n/**\n * 四舍五入\n * @export\n */\nexport function round(num, ratio) {\n  const base = Math.pow(10, ratio);\n  let result = divide(Math.round(Math.abs(times(num, base))), base);\n  if (num < 0 && result !== 0) {\n    result = times(result, -1);\n  }\n  // 位数不足则补0\n  return result;\n}\n\n/**\n * 是否进行边界检查，默认开启\n * @param flag 标记开关，true 为开启，false 为关闭，默认为 true\n * @export\n */\nexport function enableBoundaryChecking(flag = true) {\n  _boundaryCheckingState = flag;\n}\n\n\nexport default {\n  times,\n  plus,\n  minus,\n  divide,\n  round,\n  enableBoundaryChecking,\n};\n\n"],"names":["strip","num","precision","digitLength","eSplit","len","float2Fixed","dLen","checkBoundary","uni","iteratorOperation","arr","operation","num1","num2","others","res","times","nums","num1Changed","num2Changed","baseNum","leftValue","divide","round","ratio","base","result"],"mappings":"6DAOO,SAASA,EAAMC,EAAKC,EAAY,GAAI,CACzC,MAAO,CAAC,WAAW,OAAOD,CAAG,EAAE,YAAYC,CAAS,CAAC,CACvD,CAOO,SAASC,EAAYF,EAAK,CAE/B,MAAMG,EAASH,EAAI,SAAU,EAAC,MAAM,MAAM,EACpCI,GAAOD,EAAO,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,GAAK,IAAI,OAAS,EAAEA,EAAO,CAAC,GAAK,GACpE,OAAOC,EAAM,EAAIA,EAAM,CACzB,CAOO,SAASC,EAAYL,EAAK,CAC/B,GAAIA,EAAI,SAAU,EAAC,QAAQ,GAAG,IAAM,GAClC,OAAO,OAAOA,EAAI,SAAQ,EAAG,QAAQ,IAAK,EAAE,CAAC,EAE/C,MAAMM,EAAOJ,EAAYF,CAAG,EAC5B,OAAOM,EAAO,EAAIP,EAAM,OAAOC,CAAG,EAAI,KAAK,IAAI,GAAIM,CAAI,CAAC,EAAI,OAAON,CAAG,CACxE,CAOO,SAASO,EAAcP,EAAK,EAE3BA,EAAM,OAAO,kBAAoBA,EAAM,OAAO,mBAChDQ,EAAA,MAAA,MAAA,OAAA,sDAAa,GAAGR,CAAG,kBAAkB,CAG3C,CAQO,SAASS,EAAkBC,EAAKC,EAAW,CAChD,KAAM,CAACC,EAAMC,EAAM,GAAGC,CAAM,EAAIJ,EAChC,IAAIK,EAAMJ,EAAUC,EAAMC,CAAI,EAE9B,OAAAC,EAAO,QAASd,GAAQ,CACtBe,EAAMJ,EAAUI,EAAKf,CAAG,CAC5B,CAAG,EAEMe,CACT,CAMO,SAASC,KAASC,EAAM,CAC7B,GAAIA,EAAK,OAAS,EAChB,OAAOR,EAAkBQ,EAAMD,CAAK,EAGtC,KAAM,CAACJ,EAAMC,CAAI,EAAII,EACfC,EAAcb,EAAYO,CAAI,EAC9BO,EAAcd,EAAYQ,CAAI,EAC9BO,EAAUlB,EAAYU,CAAI,EAAIV,EAAYW,CAAI,EAC9CQ,EAAYH,EAAcC,EAEhC,OAAAZ,EAAcc,CAAS,EAEhBA,EAAY,KAAK,IAAI,GAAID,CAAO,CACzC,CAoCO,SAASE,KAAUL,EAAM,CAC9B,GAAIA,EAAK,OAAS,EAChB,OAAOR,EAAkBQ,EAAMK,CAAM,EAGvC,KAAM,CAACV,EAAMC,CAAI,EAAII,EACfC,EAAcb,EAAYO,CAAI,EAC9BO,EAAcd,EAAYQ,CAAI,EACpC,OAAAN,EAAcW,CAAW,EACzBX,EAAcY,CAAW,EAElBH,EAAME,EAAcC,EAAapB,EAAM,KAAK,IAAI,GAAIG,EAAYW,CAAI,EAAIX,EAAYU,CAAI,CAAC,CAAC,CAAC,CACpG,CAMO,SAASW,EAAMvB,EAAKwB,EAAO,CAChC,MAAMC,EAAO,KAAK,IAAI,GAAID,CAAK,EAC/B,IAAIE,EAASJ,EAAO,KAAK,MAAM,KAAK,IAAIN,EAAMhB,EAAKyB,CAAI,CAAC,CAAC,EAAGA,CAAI,EAChE,OAAIzB,EAAM,GAAK0B,IAAW,IACxBA,EAASV,EAAMU,EAAQ,EAAE,GAGpBA,CACT"}