{"version":3,"file":"buildURL.js","sources":["uni_modules/uview-plus/libs/luch-request/helpers/buildURL.js"],"sourcesContent":["'use strict'\n\nimport * as utils from '../utils'\n\nfunction encode(val) {\n    return encodeURIComponent(val)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%20/g, '+')\n        .replace(/%5B/gi, '[')\n        .replace(/%5D/gi, ']')\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params) {\n    /* eslint no-param-reassign:0 */\n    if (!params) {\n        return url\n    }\n\n    let serializedParams\n    if (utils.isURLSearchParams(params)) {\n        serializedParams = params.toString()\n    } else {\n        const parts = []\n\n        utils.forEach(params, (val, key) => {\n            if (val === null || typeof val === 'undefined') {\n                return\n            }\n\n            if (utils.isArray(val)) {\n                key = `${key}[]`\n            } else {\n                val = [val]\n            }\n\n            utils.forEach(val, (v) => {\n                if (utils.isDate(v)) {\n                    v = v.toISOString()\n                } else if (utils.isObject(v)) {\n                    v = JSON.stringify(v)\n                }\n                parts.push(`${encode(key)}=${encode(v)}`)\n            })\n        })\n\n        serializedParams = parts.join('&')\n    }\n\n    if (serializedParams) {\n        const hashmarkIndex = url.indexOf('#')\n        if (hashmarkIndex !== -1) {\n            url = url.slice(0, hashmarkIndex)\n        }\n\n        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams\n    }\n\n    return url\n}\n"],"names":["encode","val","buildURL","url","params","serializedParams","utils.isURLSearchParams","parts","utils.forEach","key","utils.isArray","v","utils.isDate","utils.isObject","hashmarkIndex"],"mappings":"4CAIA,SAASA,EAAOC,EAAK,CACjB,OAAO,mBAAmBA,CAAG,EACxB,QAAQ,QAAS,GAAG,EACpB,QAAQ,QAAS,GAAG,EACpB,QAAQ,OAAQ,GAAG,EACnB,QAAQ,QAAS,GAAG,EACpB,QAAQ,OAAQ,GAAG,EACnB,QAAQ,QAAS,GAAG,EACpB,QAAQ,QAAS,GAAG,CAC7B,CASe,SAASC,EAASC,EAAKC,EAAQ,CAE1C,GAAI,CAACA,EACD,OAAOD,EAGX,IAAIE,EACJ,GAAIC,EAAAA,kBAAwBF,CAAM,EAC9BC,EAAmBD,EAAO,SAAU,MACjC,CACH,MAAMG,EAAQ,CAAE,EAEhBC,EAAAA,QAAcJ,EAAQ,CAACH,EAAKQ,IAAQ,CAC5BR,IAAQ,MAAQ,OAAOA,EAAQ,MAI/BS,EAAAA,QAAcT,CAAG,EACjBQ,EAAM,GAAGA,CAAG,KAEZR,EAAM,CAACA,CAAG,EAGdO,UAAcP,EAAMU,GAAM,CAClBC,EAAAA,OAAaD,CAAC,EACdA,EAAIA,EAAE,YAAa,EACZE,EAAAA,SAAeF,CAAC,IACvBA,EAAI,KAAK,UAAUA,CAAC,GAExBJ,EAAM,KAAK,GAAGP,EAAOS,CAAG,CAAC,IAAIT,EAAOW,CAAC,CAAC,EAAE,CACxD,CAAa,EACb,CAAS,EAEDN,EAAmBE,EAAM,KAAK,GAAG,CACpC,CAED,GAAIF,EAAkB,CAClB,MAAMS,EAAgBX,EAAI,QAAQ,GAAG,EACjCW,IAAkB,KAClBX,EAAMA,EAAI,MAAM,EAAGW,CAAa,GAGpCX,IAAQA,EAAI,QAAQ,GAAG,IAAM,GAAK,IAAM,KAAOE,CAClD,CAED,OAAOF,CACX"}