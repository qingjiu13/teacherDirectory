{"version":3,"file":"InterceptorManager.js","sources":["uni_modules/uview-plus/libs/luch-request/core/InterceptorManager.js"],"sourcesContent":["'use strict'\n\nfunction InterceptorManager() {\n    this.handlers = []\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n    this.handlers.push({\n        fulfilled,\n        rejected\n    })\n    return this.handlers.length - 1\n}\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n    if (this.handlers[id]) {\n        this.handlers[id] = null\n    }\n}\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n    this.handlers.forEach((h) => {\n        if (h !== null) {\n            fn(h)\n        }\n    })\n}\n\nexport default InterceptorManager\n"],"names":["InterceptorManager","fulfilled","rejected","id","fn","h"],"mappings":"aAEA,SAASA,GAAqB,CAC1B,KAAK,SAAW,CAAE,CACtB,CAUAA,EAAmB,UAAU,IAAM,SAAaC,EAAWC,EAAU,CACjE,YAAK,SAAS,KAAK,CACf,UAAAD,EACA,SAAAC,CACR,CAAK,EACM,KAAK,SAAS,OAAS,CAClC,EAOAF,EAAmB,UAAU,MAAQ,SAAeG,EAAI,CAChD,KAAK,SAASA,CAAE,IAChB,KAAK,SAASA,CAAE,EAAI,KAE5B,EAUAH,EAAmB,UAAU,QAAU,SAAiBI,EAAI,CACxD,KAAK,SAAS,QAASC,GAAM,CACrBA,IAAM,MACND,EAAGC,CAAC,CAEhB,CAAK,CACL"}