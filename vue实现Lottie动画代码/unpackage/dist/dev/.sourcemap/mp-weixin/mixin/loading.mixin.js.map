{"version":3,"file":"loading.mixin.js","sources":["mixin/loading.mixin.js"],"sourcesContent":["// mixin/loading.mixin.js\r\nlet timer = null\r\nlet retryTimer = null\r\nlet initRetryCount = 0\r\nconst MAX_RETRY = 3\r\n\r\n/**\r\n * 全局加载动画混入\r\n * 在页面加载时自动显示和隐藏加载动画\r\n * @type {import('vue').ComponentOptions}\r\n */\r\nexport default {\r\n  data() {\r\n    return {\r\n      /**\r\n       * 是否已预初始化加载动画\r\n       * @type {Boolean}\r\n       */\r\n      hasInitLoading: false,\r\n      \r\n      /**\r\n       * 动画加载状态\r\n       * @type {Object}\r\n       */\r\n      animationLoadingState: {\r\n        isAllLoaded: false,\r\n        isCaching: false,\r\n        failedSources: [],\r\n        currentPageSrc: ''\r\n      },\r\n      \r\n      /**\r\n       * 全局加载控制是否可用\r\n       * @type {Boolean}\r\n       */\r\n      isLoadingControlAvailable: false,\r\n      \r\n      /**\r\n       * 是否当前页面已尝试显示loading\r\n       * @type {Boolean}\r\n       */\r\n      hasTriedShowLoading: false\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * 创建组件实例时尝试预加载\r\n   */\r\n  created() {\r\n    this.initLoadingControl()\r\n  },\r\n  \r\n  /**\r\n   * 页面加载时显示加载动画\r\n   */\r\n  onLoad() {\r\n    this.initLoadingControl()\r\n    \r\n    // 获取动画状态\r\n    this.checkAnimationStatus()\r\n    \r\n    // 尝试显示加载动画\r\n    this.tryShowLoading()\r\n    \r\n    // 标记已尝试显示loading\r\n    this.hasTriedShowLoading = true\r\n  },\r\n  \r\n  /**\r\n   * 页面准备就绪时隐藏加载动画\r\n   */\r\n  onReady() {\r\n    // 清除所有定时器\r\n    this.clearAllTimers()\r\n    \r\n    // 更新一次状态\r\n    this.checkAnimationStatus()\r\n    \r\n    // 尝试隐藏加载动画\r\n    this.tryHideLoading()\r\n  },\r\n  \r\n  /**\r\n   * 页面卸载时清理资源\r\n   */\r\n  onUnload() {\r\n    // 清除所有定时器\r\n    this.clearAllTimers()\r\n    \r\n    // 尝试隐藏加载动画\r\n    this.tryHideLoading()\r\n  },\r\n  \r\n  methods: {\r\n    /**\r\n     * 初始化全局加载控制\r\n     */\r\n    initLoadingControl() {\r\n      if (this.hasInitLoading) return\r\n      \r\n      const app = getApp()\r\n      if (!app || !app.globalData) {\r\n        this.retryInitLoadingControl()\r\n        return\r\n      }\r\n      \r\n      // 检查$loading是否可用\r\n      if (!app.globalData.$loading) {\r\n        // 如果不可用，尝试创建一个基本结构\r\n        try {\r\n          // 尝试先从App.vue中获取全局状态\r\n          let globalState = null;\r\n          \r\n          // 尝试从animationState获取globalState\r\n          if (app.globalData.$animationState?.globalState) {\r\n            globalState = app.globalData.$animationState.globalState;\r\n            console.log('从$animationState获取到全局状态');\r\n          }\r\n          \r\n          // 如果没有全局状态，尝试创建一个最基本的\r\n          if (!globalState) {\r\n            globalState = {\r\n              loadedSources: new Set(),\r\n              cachedSources: new Set(),\r\n              loadingSources: new Set(),\r\n              failedSources: new Set()\r\n            };\r\n            console.log('创建了基础全局状态对象');\r\n          }\r\n          \r\n          // 检查是否已有中转方法\r\n          if (app.globalData._tempLoadingMethods) {\r\n            app.globalData.$loading = {\r\n              show: app.globalData._tempLoadingMethods.show,\r\n              hide: app.globalData._tempLoadingMethods.hide,\r\n              preload: app.globalData._tempLoadingMethods.preload,\r\n              isPreloaded: { value: false },\r\n              getStatus: () => ({ allLoaded: false, stats: null }),\r\n              globalState: globalState  // 确保添加全局状态\r\n            }\r\n          } else {\r\n            // 创建新的临时方法，收集调用以便后续处理\r\n            const pendingCalls = [];\r\n            \r\n            app.globalData._tempLoadingMethods = {\r\n              show: () => {\r\n                console.log('临时$loading: 延迟执行show方法')\r\n                pendingCalls.push({ method: 'show', time: Date.now() })\r\n                \r\n                // 检查是否可以处理待处理的调用\r\n                this.setupPendingCallsCheck(pendingCalls);\r\n              },\r\n              hide: () => {\r\n                console.log('临时$loading: 延迟执行hide方法')\r\n                pendingCalls.push({ method: 'hide', time: Date.now() })\r\n                \r\n                // 检查是否可以处理待处理的调用\r\n                this.setupPendingCallsCheck(pendingCalls);\r\n              },\r\n              preload: () => {\r\n                console.log('临时$loading: 延迟执行preload方法')\r\n                pendingCalls.push({ method: 'preload', time: Date.now() })\r\n                \r\n                // 返回一个Promise，保持接口一致性\r\n                return Promise.resolve(false)\r\n              }\r\n            }\r\n            \r\n            app.globalData.$loading = {\r\n              show: app.globalData._tempLoadingMethods.show,\r\n              hide: app.globalData._tempLoadingMethods.hide,\r\n              preload: app.globalData._tempLoadingMethods.preload,\r\n              isPreloaded: { value: false },\r\n              getStatus: () => ({ allLoaded: false, stats: null }),\r\n              globalState: globalState  // 确保添加全局状态\r\n            }\r\n          }\r\n          \r\n          console.log('已创建自动延迟的临时$loading对象 (包含全局状态)')\r\n        } catch (err) {\r\n          console.error('创建临时$loading对象失败:', err)\r\n          this.retryInitLoadingControl()\r\n          return\r\n        }\r\n      }\r\n      \r\n      this.isLoadingControlAvailable = true\r\n      this.hasInitLoading = true\r\n      \r\n      // 检查是否有全局状态\r\n      if (app.globalData.$loading.globalState) {\r\n        console.log('全局状态已绑定，开始预加载')\r\n        this.preloadLoading()\r\n      } else {\r\n        console.log('全局状态仍未就绪，尝试添加一个基础状态')\r\n        app.globalData.$loading.globalState = {\r\n          loadedSources: new Set(),\r\n          cachedSources: new Set(),\r\n          loadingSources: new Set(),\r\n          failedSources: new Set()\r\n        };\r\n        this.preloadLoading()\r\n      }\r\n      \r\n      // 如果页面已尝试显示loading但失败，现在再试一次\r\n      if (this.hasTriedShowLoading) {\r\n        console.log('再次尝试显示loading')\r\n        this.tryShowLoading()\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 设置检查待处理调用的定时器\r\n     * @param {Array} pendingCalls - 待处理的调用数组\r\n     */\r\n    setupPendingCallsCheck(pendingCalls) {\r\n      setTimeout(() => {\r\n        const app = getApp();\r\n        if (app?.globalData?.$loading?.componentMounted) {\r\n          console.log('处理待处理的loading调用:', pendingCalls.length);\r\n          \r\n          // 复制待处理调用到全局对象\r\n          app.globalData._pendingLoadingCalls = app.globalData._pendingLoadingCalls || [];\r\n          app.globalData._pendingLoadingCalls.push(...pendingCalls);\r\n          \r\n          // 清空本地待处理调用\r\n          pendingCalls.length = 0;\r\n        } else {\r\n          // 如果组件仍未挂载，重新安排检查\r\n          if (pendingCalls.length > 0) {\r\n            setTimeout(() => this.setupPendingCallsCheck(pendingCalls), 500);\r\n          }\r\n        }\r\n      }, 500); // 半秒后检查\r\n    },\r\n    \r\n    /**\r\n     * 重试初始化加载控制\r\n     */\r\n    retryInitLoadingControl() {\r\n      // 避免无限重试\r\n      if (initRetryCount >= MAX_RETRY) {\r\n        console.warn(`初始化加载控制失败，已达到最大重试次数(${MAX_RETRY})`)\r\n        return\r\n      }\r\n      \r\n      initRetryCount++\r\n      console.log(`正在重试初始化加载控制 (${initRetryCount}/${MAX_RETRY})`)\r\n      \r\n      // 延迟200ms后重试\r\n      clearTimeout(retryTimer)\r\n      retryTimer = setTimeout(() => {\r\n        this.initLoadingControl()\r\n      }, 200)\r\n    },\r\n    \r\n    /**\r\n     * 尝试显示全局加载动画\r\n     */\r\n    tryShowLoading() {\r\n      const app = getApp()\r\n      if (!app || !app.globalData) {\r\n        console.warn('全局App对象不可用，无法显示加载动画')\r\n        this.retryInitLoadingControl()\r\n        return\r\n      }\r\n      \r\n      // 即使$loading不存在，也尝试创建一个临时对象并收集调用\r\n      if (!app.globalData.$loading) {\r\n        console.warn('$loading对象不可用，创建临时对象')\r\n        this.initLoadingControl()\r\n        \r\n        // 如果临时对象创建成功，使用它\r\n        if (app.globalData.$loading) {\r\n          try {\r\n            app.globalData.$loading.show()\r\n          } catch (err) {\r\n            console.error('调用临时show方法失败:', err)\r\n          }\r\n        } else {\r\n          // 记录我们尝试了显示loading\r\n          this.hasTriedShowLoading = true\r\n        }\r\n        return\r\n      }\r\n      \r\n      // 如果动画已预加载，则直接显示，否则延迟显示\r\n      try {\r\n        if (app.globalData.$loading.isPreloaded?.value) {\r\n          app.globalData.$loading.show()\r\n        } else {\r\n          // 延迟 100ms 显示 Loading，给预加载一些时间\r\n          clearTimeout(timer)\r\n          timer = setTimeout(() => {\r\n            try {\r\n              // 重新获取app对象，防止在延迟期间app变化\r\n              const currentApp = getApp()\r\n              if (currentApp?.globalData?.$loading?.show) {\r\n                currentApp.globalData.$loading.show()\r\n              }\r\n            } catch (err) {\r\n              console.error('显示加载动画失败:', err)\r\n            }\r\n          }, 100)\r\n        }\r\n      } catch (err) {\r\n        console.error('显示加载动画操作失败:', err)\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 尝试隐藏全局加载动画\r\n     */\r\n    tryHideLoading() {\r\n      const app = getApp()\r\n      if (!app || !app.globalData) {\r\n        console.warn('全局App对象不可用，无法隐藏加载动画')\r\n        return\r\n      }\r\n      \r\n      // 即使$loading不存在，也尝试创建一个临时对象\r\n      if (!app.globalData.$loading) {\r\n        this.initLoadingControl()\r\n        \r\n        // 如果临时对象创建成功，使用它\r\n        if (app.globalData.$loading) {\r\n          try {\r\n            app.globalData.$loading.hide()\r\n          } catch (err) {\r\n            console.error('调用临时hide方法失败:', err)\r\n          }\r\n        }\r\n        return\r\n      }\r\n      \r\n      try {\r\n        if (typeof app.globalData.$loading.hide === 'function') {\r\n          app.globalData.$loading.hide()\r\n        }\r\n      } catch (err) {\r\n        console.error('隐藏加载动画失败:', err)\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 清除所有定时器\r\n     */\r\n    clearAllTimers() {\r\n      if (timer) {\r\n        clearTimeout(timer)\r\n        timer = null\r\n      }\r\n      \r\n      if (retryTimer) {\r\n        clearTimeout(retryTimer)\r\n        retryTimer = null\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 尝试预加载加载动画\r\n     */\r\n    preloadLoading() {\r\n      const app = getApp()\r\n      if (!app || !app.globalData || !app.globalData.$loading) {\r\n        console.warn('全局加载控制尚未初始化，无法预加载')\r\n        this.retryInitLoadingControl()\r\n        return\r\n      }\r\n      \r\n      try {\r\n        // 检查是否有全局状态\r\n        if (!app.globalData.$loading.globalState) {\r\n          console.warn('预加载前添加临时全局状态')\r\n          app.globalData.$loading.globalState = {\r\n            loadedSources: new Set(),\r\n            cachedSources: new Set(),\r\n            loadingSources: new Set(),\r\n            failedSources: new Set()\r\n          };\r\n        }\r\n        \r\n        if (typeof app.globalData.$loading.preload === 'function') {\r\n          console.log('开始预加载全局动画')\r\n          app.globalData.$loading.preload()\r\n          \r\n          // 预加载后检查状态\r\n          this.checkAnimationStatus()\r\n        }\r\n      } catch (err) {\r\n        console.error('预加载加载动画失败:', err)\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 检查动画状态\r\n     * 获取动画加载统计信息和缓存状态\r\n     */\r\n    checkAnimationStatus() {\r\n      const app = getApp()\r\n      if (!app?.globalData?.$loading) return\r\n      \r\n      // 如果getStatus不可用，尝试从globalState直接获取\r\n      if (!app.globalData.$loading.getStatus && app.globalData.$loading.globalState) {\r\n        const { loadedSources, loadingSources, failedSources } = app.globalData.$loading.globalState\r\n        this.animationLoadingState.isAllLoaded = loadingSources.size === 0\r\n        this.animationLoadingState.isCaching = loadingSources.size > 0\r\n        this.animationLoadingState.failedSources = Array.from(failedSources || [])\r\n        return\r\n      }\r\n      \r\n      // 正常使用getStatus\r\n      try {\r\n        const status = app.globalData.$loading.getStatus()\r\n        if (status) {\r\n          this.animationLoadingState.isAllLoaded = status.allLoaded\r\n          \r\n          if (status.stats) {\r\n            this.animationLoadingState.isCaching = status.stats.totalLoading > 0\r\n            this.animationLoadingState.failedSources = status.stats.failedSources || []\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('获取动画状态失败:', err)\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 检查当前页面使用的动画源状态\r\n     * @param {String} src - 动画源地址\r\n     * @returns {Object} 动画源状态\r\n     */\r\n    checkAnimationSourceStatus(src) {\r\n      if (!src) return null\r\n      \r\n      const app = getApp()\r\n      if (!app?.globalData?.$loading?.globalState) {\r\n        console.warn('全局状态不可用，无法检查源状态')\r\n        return null\r\n      }\r\n      \r\n      this.animationLoadingState.currentPageSrc = src\r\n      \r\n      try {\r\n        const { globalState } = app.globalData.$loading\r\n        \r\n        return {\r\n          isLoaded: globalState.loadedSources.has(src),\r\n          isCached: globalState.cachedSources.has(src),\r\n          isLoading: globalState.loadingSources.has(src),\r\n          hasFailed: globalState.failedSources.has(src)\r\n        }\r\n      } catch (err) {\r\n        console.error('获取动画源状态失败:', err)\r\n        return null\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":["uni","_a"],"mappings":"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"}