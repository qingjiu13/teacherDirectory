{"version":3,"file":"combobox.js","sources":["pagesMine/components/combobox/combobox.vue"],"sourcesContent":["<template name=\"ChoiceSelected\">\r\n    <!-- 自定义下拉选择框 start-->\r\n    <view class=\"selected-all\" @click.stop @touchmove=\"handlePageScroll\">\r\n        <view :class=\"isShowChoice ? 'drop-down-box-selected' : 'drop-down-box'\" @click=\"btnShowHideClick\" ref=\"dropdownTrigger\">\r\n            <!-- 统一的内容容器 -->\r\n            <view class=\"input-content-wrapper\">\r\n                <!-- 纯下拉选择模式 -->\r\n                <text v-if=\"mode === 'select'\" :class=\"[choiceIndex === -1 ? 'input-placeholder' : 'input-placeholder-selected']\" >{{displayContent}}</text>\r\n                \r\n                <!-- 搜索筛选模式 -->\r\n                <input \r\n                    v-else\r\n                    type=\"text\" \r\n                    class=\"input-text\" \r\n                    v-model=\"searchKeyword\" \r\n                    :placeholder=\"searchPlaceholder\" \r\n                    @input=\"onSearchInput\" \r\n                    @focus=\"onInputFocus\"/>\r\n            </view>\r\n            \r\n            <!-- 统一的箭头图标 -->\r\n            <view class=\"arrow-container\">\r\n                <image class=\"dropdown-icon\" :class=\"{'dropdown-icon-rotate': isShowChoice}\" src=\"/static/image/arrow/arrow_down.svg\" mode=\"widthFix\"></image>\r\n            </view>\r\n        </view>\r\n        <!-- 弹框内容 -->\r\n        <view class=\"dialog-view\" :class=\"{active: isShowChoice}\" v-if=\"isShowChoice\" :style=\"{\r\n            top: dropdownTop + 'px',\r\n            left: dropdownLeft + 'px',\r\n            width: dropdownWidth + 'px'\r\n        }\" @click.stop>\r\n            <scroll-view \r\n                scroll-y=\"true\" \r\n                class=\"dialog-scroll\" \r\n                @scrolltolower=\"onScrollToBottom\" \r\n                ref=\"scrollView\">\r\n                <view v-if=\"pagedChoiceList.length > 0\">\r\n                    <text class=\"dialog-title\" :class=\"{'dialog-title-selected': choiceIndex == findOriginalIndex(item)}\"\r\n                        v-for=\"(item, index) in pagedChoiceList\" :key=\"index\" @click=\"btnChoiceClick(index)\">\r\n                        {{typeof item === 'string' ? item : item.choiceItemContent}}\r\n                    </text>\r\n                </view>\r\n                <view v-else class=\"empty-result\">\r\n                    <text class=\"empty-result-text\">无匹配数据</text>\r\n                </view>\r\n                \r\n                <!-- 加载更多提示 -->\r\n                <view v-if=\"isLoadingMore\" class=\"loading-more\">\r\n                    <text class=\"loading-text\">加载中...</text>\r\n                </view>\r\n            </scroll-view>\r\n        </view>\r\n    </view>\r\n    <!-- 自定义下拉选择框 end -->\r\n</template>\r\n\r\n<script lang=\"uts\">\r\n    \r\n    let dropdownInstances = [];\r\n    \r\n    export default {\r\n        name: \"ChoiceSelected\",\r\n        components: {\r\n        },\r\n        data() {\r\n            return {\r\n                isShowChoice: false,\r\n                dropdownTop: 0,\r\n                dropdownLeft: 0,\r\n                dropdownWidth: 0,\r\n                displayContent: this.defaultText, // 使用传入的默认文本\r\n                searchKeyword: this.defaultSearchValue || '', // 初始化搜索关键词，优先使用defaultSearchValue\r\n                searchTimer: null, // 防抖定时器\r\n                isFocused: false, // 是否处于聚焦状态\r\n                lastSelectedValue: null, // 上次选中的值，用于检测变化\r\n                \r\n                // 分页相关\r\n                pageSize: 10, // 每页显示数量\r\n                currentPage: 1, // 当前页码\r\n                isLoadingMore: false, // 是否正在加载更多\r\n                hasMoreItems: true, // 是否还有更多数据\r\n                \r\n                // 滚动监听\r\n                pageScrollListener: null // 页面滚动监听器\r\n            };\r\n        },\r\n        props: {\r\n            choiceIndex: {\r\n                type: Number,\r\n                default: -1 // 默认-1表示未选择\r\n            },\r\n            choiceList: {\r\n                type: Array,\r\n                default: () => []\r\n            },\r\n            defaultText: {\r\n                type: String,\r\n                default: '请选择'\r\n            },\r\n            mode: {\r\n                type: String,\r\n                default: 'select', // 'select' | 'search'\r\n                validator: (value) => ['select', 'search'].includes(value)\r\n            },\r\n            debounce: {\r\n                type: Number,\r\n                default: 300\r\n            },\r\n            searchPlaceholder: {\r\n                type: String,\r\n                default: '请输入关键词'\r\n            },\r\n            // 新增属性：组件类型，用于区分不同数据模式\r\n            componentType: {\r\n                type: String,\r\n                default: 'default', // 'default' | 'undergraduate' | 'graduateSchool' | 'graduateMajor'\r\n                validator: (value) => ['default', 'undergraduate', 'graduateSchool', 'graduateMajor'].includes(value)\r\n            },\r\n            // 新增属性：父级选择的值，用于联动模式\r\n            parentValue: {\r\n                type: [String, Object, Number],\r\n                default: null\r\n            },\r\n            // 新增属性：是否属于联动模式\r\n            isLinkage: {\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            // 新增属性：是否自动关闭其他下拉框\r\n            autoCloseOthers: {\r\n                type: Boolean,\r\n                default: true\r\n            },\r\n            // 新增属性：是否启用分页加载功能\r\n            enablePagination: {\r\n                type: Boolean,\r\n                default: true\r\n            },\r\n            // 新增属性：默认搜索值，当有值时直接显示但保持搜索功能\r\n            defaultSearchValue: {\r\n                type: String,\r\n                default: ''\r\n            }\r\n        },\r\n        created() {\r\n            // 将当前实例添加到实例数组，便于全局管理\r\n            dropdownInstances.push(this);\r\n            \r\n            // 注册全局触摸开始事件用于检测滚动\r\n            uni.$on('page-scroll', this.handlePageScroll);\r\n        },\r\n        beforeUnmount() {\r\n            // 解绑全局事件\r\n            uni.$off('page-scroll', this.handlePageScroll);\r\n            \r\n            // 移除当前实例\r\n            const index = dropdownInstances.indexOf(this);\r\n            if (index > -1) {\r\n                dropdownInstances.splice(index, 1);\r\n            }\r\n            // 清除防抖定时器\r\n            if (this.searchTimer) {\r\n                clearTimeout(this.searchTimer);\r\n            }\r\n        },\r\n        computed: {\r\n            /**\r\n             * @description 获取当前页的选项列表\r\n             * @returns {Array} 分页后的选项列表\r\n             */\r\n            pagedChoiceList() {\r\n                if (!this.enablePagination) {\r\n                    return this.choiceList;\r\n                }\r\n                \r\n                const startIndex = 0;\r\n                const endIndex = this.currentPage * this.pageSize;\r\n                \r\n                return this.choiceList.slice(startIndex, endIndex);\r\n            }\r\n        },\r\n        watch: {\r\n            choiceIndex(newVal) {\r\n                // 当choiceIndex变化时更新显示内容\r\n                if (newVal >= 0 && newVal < this.choiceList.length) {\r\n                    const selectedItem = this.choiceList[newVal];\r\n                    this.displayContent = typeof selectedItem === 'string' ? selectedItem : selectedItem.choiceItemContent;\r\n                    \r\n                    // 保存上次选中的值\r\n                    this.lastSelectedValue = selectedItem;\r\n                    \r\n                    // 在搜索模式下，设置搜索关键词为选中项\r\n                    if (this.mode === 'search') {\r\n                        this.searchKeyword = typeof selectedItem === 'string' ? selectedItem : selectedItem.choiceItemContent;\r\n                    }\r\n                    \r\n                    // 如果是联动模式的父级组件，触发联动事件\r\n                    if (this.componentType === 'graduateSchool') {\r\n                        this.$emit('linkage-change', selectedItem);\r\n                    }\r\n                } else {\r\n                    this.displayContent = this.defaultText;\r\n                    this.lastSelectedValue = null;\r\n                    if (this.mode === 'search') {\r\n                        this.searchKeyword = this.defaultSearchValue || '';\r\n                    }\r\n                    \r\n                    // 如果是联动模式的父级组件，触发联动事件（清空）\r\n                    if (this.componentType === 'graduateSchool') {\r\n                        this.$emit('linkage-change', null);\r\n                    }\r\n                }\r\n            },\r\n            defaultText(newVal) {\r\n                // 如果当前没有选择任何选项，更新默认文本\r\n                if (this.choiceIndex < 0 || this.choiceIndex >= this.choiceList.length) {\r\n                    this.displayContent = newVal;\r\n                }\r\n            },\r\n            // 监听父级选择变化，适用于联动模式\r\n            parentValue(newVal) {\r\n                if (this.isLinkage && this.componentType === 'graduateMajor') {\r\n                    // 父级值变化，清空当前选择\r\n                    this.searchKeyword = this.defaultSearchValue || '';\r\n                    this.displayContent = this.defaultText;\r\n                    this.$emit('reset-selection');\r\n                }\r\n            },\r\n            // 监听选项列表变化，重新计算显示内容\r\n            choiceList() {\r\n                // 如果选项列表变化，且当前有选中项，更新显示内容\r\n                this.updateDisplayContent();\r\n            },\r\n            // 监听搜索关键词变化，重置分页\r\n            searchKeyword() {\r\n                this.resetPagination();\r\n            },\r\n            // 监听defaultSearchValue变化\r\n            defaultSearchValue(newVal) {\r\n                // 仅当没有选中项或搜索关键词为空时更新搜索关键词\r\n                if ((this.choiceIndex < 0 || this.choiceIndex >= this.choiceList.length) && !this.searchKeyword) {\r\n                    this.searchKeyword = newVal || '';\r\n                    \r\n                    // 如果有新的默认值，并且当前下拉列表已打开，则触发一次搜索\r\n                    if (newVal && this.isShowChoice) {\r\n                        this.onSearchInput({});\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * @description 处理页面滚动事件\r\n             * 当页面滚动时关闭下拉框\r\n             */\r\n            handlePageScroll() {\r\n                if (this.isShowChoice) {\r\n                    this.closeDropdown();\r\n                }\r\n            },\r\n            \r\n            /**\r\n             * @description 重置分页状态\r\n             */\r\n            resetPagination() {\r\n                this.currentPage = 1;\r\n                this.isLoadingMore = false;\r\n                this.hasMoreItems = this.choiceList.length > this.pageSize;\r\n            },\r\n            \r\n            /**\r\n             * @description 加载更多数据\r\n             */\r\n            loadMore() {\r\n                if (!this.hasMoreItems || this.isLoadingMore) return;\r\n                \r\n                this.isLoadingMore = true;\r\n                \r\n                // 模拟异步加载更多数据\r\n                setTimeout(() => {\r\n                    this.currentPage++;\r\n                    this.isLoadingMore = false;\r\n                    \r\n                    // 更新是否还有更多数据的状态\r\n                    this.hasMoreItems = this.choiceList.length > this.currentPage * this.pageSize;\r\n                }, 300);\r\n            },\r\n            \r\n            /**\r\n             * @description 处理滚动到底部事件\r\n             */\r\n            onScrollToBottom() {\r\n                if (this.enablePagination) {\r\n                    this.loadMore();\r\n                }\r\n            },\r\n            \r\n            /**\r\n             * @description 查找选项在原始列表中的索引\r\n             * @param {*} item - 选项项\r\n             * @returns {Number} 原始索引位置\r\n             */\r\n            findOriginalIndex(item) {\r\n                if (typeof item === 'string') {\r\n                    return this.choiceList.findIndex(originalItem => \r\n                        typeof originalItem === 'string' && originalItem === item\r\n                    );\r\n                } else if (item && item.choiceItemId) {\r\n                    return this.choiceList.findIndex(originalItem => \r\n                        originalItem && originalItem.choiceItemId && originalItem.choiceItemId === item.choiceItemId\r\n                    );\r\n                }\r\n                return -1;\r\n            },\r\n            \r\n            /**\r\n             * @description 更新显示内容，在选项列表变化时调用\r\n             */\r\n            updateDisplayContent() {\r\n                if (this.choiceIndex >= 0 && this.choiceIndex < this.choiceList.length) {\r\n                    const selectedItem = this.choiceList[this.choiceIndex];\r\n                    this.displayContent = typeof selectedItem === 'string' ? selectedItem : selectedItem.choiceItemContent;\r\n                } else {\r\n                    this.displayContent = this.defaultText;\r\n                }\r\n            },\r\n            \r\n            /**\r\n             * @description 处理选项点击事件，关闭下拉框并触发选择事件\r\n             * @param {Number} position - 选中项的索引位置\r\n             */\r\n            btnChoiceClick: function(position) {\r\n                var _this = this;\r\n                _this.isShowChoice = false;\r\n                \r\n                const selectedItem = _this.pagedChoiceList[position];\r\n                \r\n                // 在搜索模式下，我们需要找出在原始列表中的实际位置\r\n                if (_this.mode === 'search' && _this.searchKeyword) {\r\n                    if (typeof selectedItem === 'string') {\r\n                        // 字符串项，直接查找原始列表中的匹配项\r\n                        const originalIndex = _this.choiceList.findIndex(item => \r\n                            typeof item === 'string' && item === selectedItem\r\n                        );\r\n                        if (originalIndex !== -1) {\r\n                            _this.$emit(\"onChoiceClick\", originalIndex, selectedItem);\r\n                            return;\r\n                        }\r\n                    } else if (selectedItem && selectedItem.choiceItemId) {\r\n                        // 对象项，通过ID查找\r\n                        const originalIndex = _this.choiceList.findIndex(item => \r\n                            item && item.choiceItemId && item.choiceItemId === selectedItem.choiceItemId\r\n                        );\r\n                        if (originalIndex !== -1) {\r\n                            _this.$emit(\"onChoiceClick\", originalIndex, selectedItem);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                // 对于普通模式或未找到匹配项，使用当前位置\r\n                _this.$emit(\"onChoiceClick\", position, selectedItem);\r\n            },\r\n            \r\n            /**\r\n             * @description 切换下拉框的显示与隐藏状态\r\n             * @param {Event} event - 点击事件对象\r\n             */\r\n            btnShowHideClick: function(event) {\r\n                // 阻止事件冒泡\r\n                event.stopPropagation();\r\n                \r\n                var _this = this;\r\n                if (_this.isShowChoice) {\r\n                    _this.isShowChoice = false;\r\n                } else {\r\n                    // 关闭其他所有下拉框（如果启用了自动关闭）\r\n                    if (this.autoCloseOthers) {\r\n                        this.closeOtherDropdowns();\r\n                    }\r\n                    \r\n                    // 重置分页状态\r\n                    this.resetPagination();\r\n                    \r\n                    // 使用uni.createSelectorQuery获取触发按钮的位置和尺寸\r\n                    const query = uni.createSelectorQuery().in(this);\r\n                    query.select('.drop-down-box, .drop-down-box-selected').boundingClientRect(data => {\r\n                        if (data) {\r\n                            _this.dropdownTop = data.top + data.height;\r\n                            _this.dropdownLeft = data.left;\r\n                            _this.dropdownWidth = data.width;\r\n                            _this.isShowChoice = true;\r\n                            \r\n                            // 如果有默认搜索值并且当前没有搜索关键词，则立即触发一次搜索\r\n                            if (_this.defaultSearchValue && !_this.searchKeyword) {\r\n                                _this.searchKeyword = _this.defaultSearchValue;\r\n                                _this.onSearchInput(event);\r\n                            }\r\n                        }\r\n                    }).exec();\r\n                }\r\n            },\r\n            \r\n            /**\r\n             * @description 关闭其他下拉框，只保留当前实例的下拉框\r\n             */\r\n            closeOtherDropdowns() {\r\n                dropdownInstances.forEach(instance => {\r\n                    if (instance !== this && instance.isShowChoice) {\r\n                        instance.isShowChoice = false;\r\n                    }\r\n                });\r\n            },\r\n            \r\n            /**\r\n             * @description 处理搜索输入事件，带防抖\r\n             * @param {Event} event - 输入事件对象\r\n             */\r\n            onSearchInput(event) {\r\n                const _this = this;\r\n                \r\n                // 清除之前的定时器\r\n                if (_this.searchTimer) {\r\n                    clearTimeout(_this.searchTimer);\r\n                }\r\n                \r\n                // 设置防抖定时器\r\n                _this.searchTimer = setTimeout(() => {\r\n                    uni.__f__('log','at pagesMine/components/combobox/combobox.vue:429','发送搜索请求:', _this.searchKeyword);\r\n                    \r\n                    // 触发搜索输入事件\r\n                    _this.$emit('search-input', _this.searchKeyword);\r\n                    \r\n                    // 确保下拉框处于打开状态\r\n                    if (!_this.isShowChoice) {\r\n                        _this.btnShowHideClick(event);\r\n                    }\r\n                }, _this.debounce);\r\n            },\r\n            \r\n            /**\r\n             * @description 处理输入框聚焦事件\r\n             * @param {Event} event - 聚焦事件对象\r\n             */\r\n            onInputFocus(event) {\r\n                this.isFocused = true;\r\n                // 如果下拉框未显示，阻止下拉框被关闭\r\n                event.stopPropagation();\r\n                \r\n                // 使用KeyboardWatcher的openWhenReady方法\r\n                if (!this.isShowChoice && this.$refs.keyboardWatcher) {\r\n                    this.$refs.keyboardWatcher.openWhenReady(this);\r\n                }\r\n            },\r\n            \r\n            /**\r\n             * @description 关闭当前下拉框\r\n             * @public 供外部调用\r\n             */\r\n            closeDropdown() {\r\n                if (this.isShowChoice) {\r\n                    this.isShowChoice = false;\r\n                }\r\n            },\r\n            \r\n            /**\r\n             * @description 重置组件状态\r\n             * @public 供外部调用\r\n             */\r\n            reset() {\r\n                this.searchKeyword = this.defaultSearchValue || '';\r\n                this.displayContent = this.defaultText;\r\n                this.isShowChoice = false;\r\n                this.lastSelectedValue = null;\r\n                this.resetPagination();\r\n                this.$emit('reset-selection');\r\n            },\r\n            \r\n            /**\r\n             * @description 获取当前选中的值\r\n             * @returns {*} 当前选中的值\r\n             * @public 供外部调用\r\n             */\r\n            getSelectedValue() {\r\n                if (this.choiceIndex >= 0 && this.choiceIndex < this.choiceList.length) {\r\n                    return this.choiceList[this.choiceIndex];\r\n                }\r\n                return null;\r\n            },\r\n            \r\n            /**\r\n             * @description 公开方法，供KeyboardWatcher调用以打开下拉框\r\n             * @public\r\n             */\r\n            openDropdown() {\r\n                // 使用现有的按钮点击方法，但创建一个合成事件对象\r\n                const syntheticEvent = {\r\n                    stopPropagation: () => {}\r\n                };\r\n                this.btnShowHideClick(syntheticEvent);\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    /* end */\r\n    .dialog-title-selected {\r\n        color: white;\r\n        font-size: 28rpx;\r\n        padding-left: 20rpx;\r\n        padding-top: 8rpx;\r\n        padding-bottom: 8rpx;\r\n        padding-right: 15rpx;\r\n        background-color: #55ffff;\r\n    }\r\n\r\n    .dialog-title {\r\n        color: black;\r\n        font-size: 28rpx;\r\n        padding-left: 20rpx;\r\n        padding-top: 8rpx;\r\n        padding-bottom: 8rpx;\r\n        padding-right: 15rpx;\r\n        background-color: white;\r\n    }\r\n    \r\n    .dialog-scroll {\r\n        width: 100%;\r\n        max-height: 300rpx; /* 限制滚动区域的最大高度 */\r\n        -webkit-overflow-scrolling: touch; /* 提升iOS滚动体验 */\r\n    }\r\n\r\n    .dialog-view {\r\n        display: flex;\r\n        flex-direction: column;\r\n        border: 2rpx solid #F0AD4E;\r\n        box-sizing: border-box;\r\n        position: fixed;\r\n        z-index: 9999;\r\n        background-color: #ffffff;\r\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n        max-height: 400rpx; /* 限制整个下拉框的最大高度 */\r\n        transform-origin: top center;\r\n        opacity: 0;\r\n        transform: scaleY(0);\r\n        transition: all 0.2s ease;\r\n        overflow: hidden; /* 确保内容不会溢出 */\r\n        border-radius: 0 0 10rpx 10rpx; /* 增加底部圆角 */\r\n    }\r\n    \r\n    .dialog-view.active {\r\n        opacity: 1;\r\n        transform: scaleY(1);\r\n    }\r\n\r\n    .dropdown-icon {\r\n        width: 26rpx;\r\n        height: 26rpx;\r\n        margin-left: 5rpx;\r\n        margin-right: 10rpx;\r\n        transition: transform 0.3s ease;\r\n        flex-shrink: 0;\r\n    }\r\n    \r\n    .dropdown-icon-rotate {\r\n        transform: rotate(180deg);\r\n    }\r\n\r\n    /* 统一的内容容器 */\r\n    .input-content-wrapper {\r\n        flex: 1;\r\n        height: 70rpx;\r\n        display: flex;\r\n        align-items: center;\r\n        box-sizing: border-box;\r\n    }\r\n    \r\n    /* 统一的文本样式 */\r\n    .input-text {\r\n        font-family: PingFang SC;\r\n        flex: 1;\r\n        font-size: 28rpx;\r\n        color: rgba(0, 0, 0, 1);\r\n        height: 50rpx;\r\n        line-height: 50rpx;\r\n        padding-left: 20rpx;\r\n        text-align: left;\r\n        width: 100%;\r\n        box-sizing: border-box;\r\n    }\r\n    \r\n    .input-placeholder {\r\n        flex: 1;\r\n        font-size: 28rpx;\r\n        color: rgba(0, 0, 0, 0.5);\r\n        height: 50rpx;\r\n        line-height: 50rpx;\r\n        padding-left: 20rpx;\r\n        text-align: left;\r\n        width: 100%;\r\n        box-sizing: border-box;\r\n        margin-top: 10rpx;\r\n    }\r\n    .input-placeholder-selected {\r\n        flex: 1;\r\n        font-size: 28rpx;\r\n        color: rgba(0, 0, 0, 1);\r\n        height: 50rpx;\r\n        line-height: 50rpx;\r\n        padding-left: 20rpx;\r\n        text-align: left;\r\n        width: 100%;\r\n        box-sizing: border-box;\r\n        margin-top: 10rpx;\r\n    }\r\n\r\n    .drop-down-box-selected {\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n        height: 70rpx;\r\n        width: 100%;\r\n        border: 2rpx solid #F0AD4E;\r\n        box-sizing: border-box;\r\n        padding: 0 10rpx;\r\n        border-radius: 10rpx;\r\n    }\r\n\r\n    .drop-down-box {\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n        height: 70rpx;\r\n        width: 100%;\r\n        border-radius: 10rpx;\r\n        box-sizing: border-box;\r\n        padding: 0 10rpx;\r\n    }\r\n\r\n    .selected-all {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        width: 100%;\r\n        background-color: rgba(255, 255, 255, 1);\r\n        border: 2rpx solid rgba(151, 151, 151, 1);\r\n        border-radius: 8rpx;\r\n    }\r\n    \r\n    /* 箭头容器 */\r\n    .arrow-container {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin-left: 5rpx;\r\n        width: 30rpx;\r\n        height: 10rpx;\r\n        flex-shrink: 0;\r\n        z-index: 2;\r\n    }\r\n    \r\n    .empty-result {\r\n        display: flex;\r\n        justify-content: center;\r\n        padding: 20rpx 0;\r\n    }\r\n    \r\n    .empty-result-text {\r\n        color: #999;\r\n        font-size: 28rpx;\r\n    }\r\n    \r\n    /* 加载更多样式 */\r\n    .loading-more {\r\n        display: flex;\r\n        justify-content: center;\r\n        padding: 10rpx 0;\r\n        background-color: #f8f8f8;\r\n    }\r\n    \r\n    .loading-text {\r\n        color: #999;\r\n        font-size: 24rpx;\r\n    }\r\n\r\n    /* start */\r\n</style>\r\n "],"names":["dropdownInstances","_sfc_main","defineComponent","value","uni","index","startIndex","endIndex","newVal","selectedItem","item","originalItem","position","_this","originalIndex","event","data","instance","syntheticEvent"],"mappings":"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"}