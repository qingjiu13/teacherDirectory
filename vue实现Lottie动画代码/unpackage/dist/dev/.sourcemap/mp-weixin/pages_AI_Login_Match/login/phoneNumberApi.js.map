{"version":3,"file":"phoneNumberApi.js","sources":["pages_AI_Login_Match/login/phoneNumberApi.js"],"sourcesContent":["/**\n * 微信手机号获取API\n * 处理微信手机号授权、解密等相关接口\n */\n\n/**\n * 获取微信登录code\n * @returns {Promise} 返回包含code的Promise对象\n */\nexport function getWechatLoginCode() {\n  return new Promise((resolve, reject) => {\n    uni.login({\n      provider: 'weixin',\n      success: (res) => {\n        if (res.code) {\n          resolve(res.code);\n        } else {\n          reject(new Error('获取微信登录code失败'));\n        }\n      },\n      fail: (err) => {\n        reject(err);\n      }\n    });\n  });\n}\n\n/**\n * 通过code获取openid和session_key\n * @param {string} code - 微信登录code\n * @returns {Promise} 返回包含openid和sessionkey的Promise对象\n */\nexport function getOpenidAndSessionKey(code) {\n  return new Promise((resolve, reject) => {\n    uni.request({\n      url: '登录接口', // 需替换为实际接口\n      method: 'POST',\n      data: {\n        account: '1514382701',\n        jscode: code\n      },\n      header: {\n        'content-type': 'application/json'\n      },\n      success: (res) => {\n        if (res.data.r === \"T\") {\n          // 存储到本地缓存\n          uni.setStorage({\n            key: \"openid\",\n            data: res.data.openid\n          });\n          uni.setStorage({\n            key: \"sessionkey\",\n            data: res.data.sessionkey\n          });\n          \n          resolve({\n            openid: res.data.openid,\n            sessionkey: res.data.sessionkey\n          });\n        } else {\n          reject(new Error('获取openid失败'));\n        }\n      },\n      fail: (err) => {\n        reject(err);\n      }\n    });\n  });\n}\n\n/**\n * 解密微信手机号\n * @param {string} encryptedData - 加密数据\n * @param {string} iv - 初始向量\n * @param {string} sessionkey - 会话密钥\n * @returns {Promise} 返回解密后的手机号\n */\nexport function decryptPhoneNumber(encryptedData, iv, sessionkey) {\n  return new Promise((resolve, reject) => {\n    uni.request({\n      url: '自己的解密接口', // 需替换为实际接口\n      method: 'POST',\n      data: {\n        encryptedData: encryptedData,\n        iv: iv,\n        code: sessionkey\n      },\n      header: {\n        'content-type': 'application/json'\n      },\n      success: (res) => {\n        if (res.data.r === \"T\") {\n          resolve(res.data.d.phoneNumber);\n        } else {\n          reject(new Error('解密手机号失败'));\n        }\n      },\n      fail: (err) => {\n        reject(err);\n      }\n    });\n  });\n}\n\n\n\n/**\n * 检查微信会话是否有效\n * @returns {Promise} 返回会话状态\n */\nexport function checkWechatSession() {\n  return new Promise((resolve, reject) => {\n    uni.checkSession({\n      success: () => {\n        resolve(true);\n      },\n      fail: () => {\n        resolve(false);\n      }\n    });\n  });\n}\n\n/**\n * 获取存储的openid\n * @returns {Promise} 返回openid\n */\nexport function getStoredOpenid() {\n  return new Promise((resolve, reject) => {\n    uni.getStorage({\n      key: 'openid',\n      success: (res) => {\n        resolve(res.data);\n      },\n      fail: () => {\n        reject(new Error('未找到存储的openid'));\n      }\n    });\n  });\n}\n\n/**\n * 获取微信绑定的遮罩手机号（用于弹窗显示）\n * @returns {Promise} 返回遮罩手机号信息\n */\nexport function getMaskedPhone() {\n  return new Promise((resolve, reject) => {\n    uni.request({\n      url: '获取遮罩手机号接口', // 需替换为实际接口\n      method: 'GET',\n      header: {\n        'content-type': 'application/json'\n      },\n      success: (res) => {\n        if (res.data.r === \"T\") {\n          resolve({\n            maskedPhone: res.data.maskedPhone,\n            isWechatBound: res.data.isWechatBound\n          });\n        } else {\n          reject(new Error('获取遮罩手机号失败'));\n        }\n      },\n      fail: (err) => {\n        reject(err);\n      }\n    });\n  });\n}\n\nexport default {\n  getWechatLoginCode,\n  getOpenidAndSessionKey,\n  decryptPhoneNumber,\n  checkWechatSession,\n  getStoredOpenid,\n  getMaskedPhone\n};\n"],"names":["uni"],"mappings":";;AASO,SAAS,qBAAqB;AACnC,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCA,kBAAAA,MAAI,MAAM;AAAA,MACR,UAAU;AAAA,MACV,SAAS,CAAC,QAAQ;AAChB,YAAI,IAAI,MAAM;AACZ,kBAAQ,IAAI,IAAI;AAAA,QAC1B,OAAe;AACL,iBAAO,IAAI,MAAM,cAAc,CAAC;AAAA,QACjC;AAAA,MACF;AAAA,MACD,MAAM,CAAC,QAAQ;AACb,eAAO,GAAG;AAAA,MACX;AAAA,IACP,CAAK;AAAA,EACL,CAAG;AACH;AAOO,SAAS,uBAAuB,MAAM;AAC3C,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCA,kBAAAA,MAAI,QAAQ;AAAA,MACV,KAAK;AAAA;AAAA,MACL,QAAQ;AAAA,MACR,MAAM;AAAA,QACJ,SAAS;AAAA,QACT,QAAQ;AAAA,MACT;AAAA,MACD,QAAQ;AAAA,QACN,gBAAgB;AAAA,MACjB;AAAA,MACD,SAAS,CAAC,QAAQ;AAChB,YAAI,IAAI,KAAK,MAAM,KAAK;AAEtBA,wBAAAA,MAAI,WAAW;AAAA,YACb,KAAK;AAAA,YACL,MAAM,IAAI,KAAK;AAAA,UAC3B,CAAW;AACDA,wBAAAA,MAAI,WAAW;AAAA,YACb,KAAK;AAAA,YACL,MAAM,IAAI,KAAK;AAAA,UAC3B,CAAW;AAED,kBAAQ;AAAA,YACN,QAAQ,IAAI,KAAK;AAAA,YACjB,YAAY,IAAI,KAAK;AAAA,UACjC,CAAW;AAAA,QACX,OAAe;AACL,iBAAO,IAAI,MAAM,YAAY,CAAC;AAAA,QAC/B;AAAA,MACF;AAAA,MACD,MAAM,CAAC,QAAQ;AACb,eAAO,GAAG;AAAA,MACX;AAAA,IACP,CAAK;AAAA,EACL,CAAG;AACH;AA2DO,SAAS,kBAAkB;AAChC,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCA,kBAAAA,MAAI,WAAW;AAAA,MACb,KAAK;AAAA,MACL,SAAS,CAAC,QAAQ;AAChB,gBAAQ,IAAI,IAAI;AAAA,MACjB;AAAA,MACD,MAAM,MAAM;AACV,eAAO,IAAI,MAAM,cAAc,CAAC;AAAA,MACjC;AAAA,IACP,CAAK;AAAA,EACL,CAAG;AACH;AAMO,SAAS,iBAAiB;AAC/B,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCA,kBAAAA,MAAI,QAAQ;AAAA,MACV,KAAK;AAAA;AAAA,MACL,QAAQ;AAAA,MACR,QAAQ;AAAA,QACN,gBAAgB;AAAA,MACjB;AAAA,MACD,SAAS,CAAC,QAAQ;AAChB,YAAI,IAAI,KAAK,MAAM,KAAK;AACtB,kBAAQ;AAAA,YACN,aAAa,IAAI,KAAK;AAAA,YACtB,eAAe,IAAI,KAAK;AAAA,UACpC,CAAW;AAAA,QACX,OAAe;AACL,iBAAO,IAAI,MAAM,WAAW,CAAC;AAAA,QAC9B;AAAA,MACF;AAAA,MACD,MAAM,CAAC,QAAQ;AACb,eAAO,GAAG;AAAA,MACX;AAAA,IACP,CAAK;AAAA,EACL,CAAG;AACH;;;;;"}