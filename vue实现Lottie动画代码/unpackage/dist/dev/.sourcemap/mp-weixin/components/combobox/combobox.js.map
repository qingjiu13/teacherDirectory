<<<<<<< HEAD
{"version":3,"file":"combobox.js","sources":["components/combobox/combobox.vue","../../../HBuilderX.4.45.2025010502/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/RDovZ2l0aHViL3RlYWNoZXJEaXJlY3RvcnkvdnVl5a6e546wTG90dGll5Yqo55S75Luj56CBL2NvbXBvbmVudHMvY29tYm9ib3gvY29tYm9ib3gudnVl"],"sourcesContent":["<template name=\"ChoiceSelected\">\r\n    <!-- 自定义下拉选择框 start-->\r\n    <view class=\"selected-all\" @click.stop>\r\n        <view :class=\"isShowChoice ? 'drop-down-box-selected' : 'drop-down-box'\" @click=\"btnShowHideClick\" ref=\"dropdownTrigger\">\r\n            <!-- 统一的内容容器 -->\r\n            <view class=\"input-content-wrapper\">\r\n                <!-- 纯下拉选择模式 -->\r\n                <text v-if=\"mode === 'select'\" :class=\"[choiceIndex === -1 ? 'input-placeholder' : 'input-text']\">{{displayContent}}</text>\r\n                \r\n                <!-- 搜索筛选模式 -->\r\n                <input \r\n                    v-else\r\n                    type=\"text\" \r\n                    class=\"input-text\" \r\n                    v-model=\"searchKeyword\" \r\n                    :placeholder=\"searchPlaceholder\" \r\n                    @input=\"onSearchInput\" \r\n                    @focus=\"onInputFocus\"/>\r\n            </view>\r\n            \r\n            <!-- 统一的箭头图标 -->\r\n            <view class=\"arrow-container\">\r\n                <image class=\"dropdown-icon\" :class=\"{'dropdown-icon-rotate': isShowChoice}\" src=\"../../static/image/arrow/arrow_down.svg\" mode=\"widthFix\"></image>\r\n            </view>\r\n        </view>\r\n        <!-- 弹框内容 -->\r\n        <view class=\"dialog-view\" :class=\"{active: isShowChoice}\" v-if=\"isShowChoice\" :style=\"{\r\n            top: dropdownTop + 'px',\r\n            left: dropdownLeft + 'px',\r\n            width: dropdownWidth + 'px'\r\n        }\" @click.stop>\r\n            <scroll-view scroll-y=\"true\" class=\"dialog-scroll\">\r\n                <view v-if=\"filteredChoiceList.length > 0\">\r\n                    <text class=\"dialog-title\" :class=\"{'dialog-title-selected': choiceIndex == index}\"\r\n                        v-for=\"(item, index) in filteredChoiceList\" :key=\"index\" @click=\"btnChoiceClick(index)\">\r\n                        {{typeof item === 'string' ? item : item.choiceItemContent}}\r\n                    </text>\r\n                </view>\r\n                <view v-else class=\"empty-result\">\r\n                    <text class=\"empty-result-text\">无匹配数据</text>\r\n                </view>\r\n            </scroll-view>\r\n        </view>\r\n    </view>\r\n    <!-- 自定义下拉选择框 end -->\r\n</template>\r\n\r\n<script lang=\"uts\">\r\n    let dropdownInstances = [];\r\n    \r\n    export default {\r\n        name: \"ChoiceSelected\",\r\n        data() {\r\n            return {\r\n                isShowChoice: false,\r\n                dropdownTop: 0,\r\n                dropdownLeft: 0,\r\n                dropdownWidth: 0,\r\n                displayContent: this.defaultText, // 使用传入的默认文本\r\n                searchKeyword: '', // 搜索关键词\r\n                searchTimer: null, // 防抖定时器\r\n                filteredList: [], // 过滤后的列表\r\n                isFocused: false // 是否处于聚焦状态\r\n            };\r\n        },\r\n        props: {\r\n            choiceIndex: {\r\n                type: Number,\r\n                default: -1 // 默认-1表示未选择\r\n            },\r\n            choiceList: {\r\n                type: Array,\r\n                default: () => []\r\n            },\r\n            defaultText: {\r\n                type: String,\r\n                default: '请选择'\r\n            },\r\n            mode: {\r\n                type: String,\r\n                default: 'select', // 'select' | 'search'\r\n                validator: (value) => ['select', 'search'].includes(value)\r\n            },\r\n            debounce: {\r\n                type: Number,\r\n                default: 300\r\n            },\r\n            searchPlaceholder: {\r\n                type: String,\r\n                default: '请输入关键词'\r\n            }\r\n        },\r\n        created() {\r\n            // 将当前实例添加到实例数组，便于全局管理\r\n            dropdownInstances.push(this);\r\n        },\r\n        beforeDestroy() {\r\n            // 移除当前实例\r\n            const index = dropdownInstances.indexOf(this);\r\n            if (index > -1) {\r\n                dropdownInstances.splice(index, 1);\r\n            }\r\n            // 清除防抖定时器\r\n            if (this.searchTimer) {\r\n                clearTimeout(this.searchTimer);\r\n            }\r\n        },\r\n        computed: {\r\n            /**\r\n             * @description 根据搜索关键词过滤选项列表\r\n             * @returns {Array} 过滤后的选项列表\r\n             */\r\n            filteredChoiceList() {\r\n                if (!this.searchKeyword || this.mode === 'select') {\r\n                    return this.choiceList;\r\n                }\r\n                \r\n                const keyword = this.searchKeyword.toLowerCase();\r\n                \r\n                // 根据关键词过滤选项\r\n                return this.choiceList.filter(item => {\r\n                    if (typeof item === 'string') {\r\n                        // 字符串类型选项\r\n                        return item.toLowerCase().includes(keyword);\r\n                    } else if (item && item.choiceItemContent) {\r\n                        // 对象类型选项\r\n                        return item.choiceItemContent.toLowerCase().includes(keyword);\r\n                    }\r\n                    return false; // 对于其他类型的项，排除\r\n                });\r\n            }\r\n        },\r\n        watch: {\r\n            choiceIndex(newVal) {\r\n                // 当choiceIndex变化时更新显示内容\r\n                if (newVal >= 0 && newVal < this.choiceList.length) {\r\n                    const selectedItem = this.choiceList[newVal];\r\n                    this.displayContent = typeof selectedItem === 'string' ? selectedItem : selectedItem.choiceItemContent;\r\n                    \r\n                    // 在搜索模式下，设置搜索关键词为选中项\r\n                    if (this.mode === 'search') {\r\n                        this.searchKeyword = typeof selectedItem === 'string' ? selectedItem : selectedItem.choiceItemContent;\r\n                    }\r\n                } else {\r\n                    this.displayContent = this.defaultText;\r\n                    if (this.mode === 'search') {\r\n                        this.searchKeyword = '';\r\n                    }\r\n                }\r\n            },\r\n            defaultText(newVal) {\r\n                // 如果当前没有选择任何选项，更新默认文本\r\n                if (this.choiceIndex < 0 || this.choiceIndex >= this.choiceList.length) {\r\n                    this.displayContent = newVal;\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            /**\r\n             * @description 处理选项点击事件，关闭下拉框并触发选择事件\r\n             * @param {Number} position - 选中项的索引位置\r\n             */\r\n            btnChoiceClick: function(position) {\r\n                var _this = this;\r\n                _this.isShowChoice = false;\r\n                \r\n                // 在搜索模式下，我们需要找出在原始列表中的实际位置\r\n                if (_this.mode === 'search' && _this.searchKeyword) {\r\n                    const selectedItem = _this.filteredChoiceList[position];\r\n                    \r\n                    if (typeof selectedItem === 'string') {\r\n                        // 字符串项，直接查找原始列表中的匹配项\r\n                        const originalIndex = _this.choiceList.findIndex(item => \r\n                            typeof item === 'string' && item === selectedItem\r\n                        );\r\n                        if (originalIndex !== -1) {\r\n                            _this.$emit(\"onChoiceClick\", originalIndex);\r\n                            return;\r\n                        }\r\n                    } else if (selectedItem && selectedItem.choiceItemId) {\r\n                        // 对象项，通过ID查找\r\n                        const originalIndex = _this.choiceList.findIndex(item => \r\n                            item && item.choiceItemId && item.choiceItemId === selectedItem.choiceItemId\r\n                        );\r\n                        if (originalIndex !== -1) {\r\n                            _this.$emit(\"onChoiceClick\", originalIndex);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                // 对于普通模式或未找到匹配项\r\n                _this.$emit(\"onChoiceClick\", position);\r\n            },\r\n            \r\n            /**\r\n             * @description 切换下拉框的显示与隐藏状态\r\n             * @param {Event} event - 点击事件对象\r\n             */\r\n            btnShowHideClick: function(event) {\r\n                // 阻止事件冒泡\r\n                event.stopPropagation();\r\n                \r\n                var _this = this;\r\n                if (_this.isShowChoice) {\r\n                    _this.isShowChoice = false;\r\n                } else {\r\n                    // 关闭其他所有下拉框\r\n                    this.closeOtherDropdowns();\r\n                    \r\n                    // 使用uni.createSelectorQuery获取触发按钮的位置和尺寸\r\n                    const query = uni.createSelectorQuery().in(this);\r\n                    query.select('.drop-down-box, .drop-down-box-selected').boundingClientRect(data => {\r\n                        if (data) {\r\n                            _this.dropdownTop = data.top + data.height;\r\n                            _this.dropdownLeft = data.left;\r\n                            _this.dropdownWidth = data.width;\r\n                            _this.isShowChoice = true;\r\n                        }\r\n                    }).exec();\r\n                }\r\n            },\r\n            \r\n            /**\r\n             * @description 关闭其他下拉框，只保留当前实例的下拉框\r\n             */\r\n            closeOtherDropdowns() {\r\n                dropdownInstances.forEach(instance => {\r\n                    if (instance !== this && instance.isShowChoice) {\r\n                        instance.isShowChoice = false;\r\n                    }\r\n                });\r\n            },\r\n            \r\n            /**\r\n             * @description 处理搜索输入事件，带防抖\r\n             * @param {Event} event - 输入事件对象\r\n             */\r\n            onSearchInput(event) {\r\n                const _this = this;\r\n                \r\n                // 清除之前的定时器\r\n                if (_this.searchTimer) {\r\n                    clearTimeout(_this.searchTimer);\r\n                }\r\n                \r\n                // 设置防抖定时器\r\n                _this.searchTimer = setTimeout(() => {\r\n                    // 触发搜索输入事件\r\n                    _this.$emit('search-input', _this.searchKeyword);\r\n                    \r\n                    // 确保下拉框处于打开状态\r\n                    if (!_this.isShowChoice) {\r\n                        _this.btnShowHideClick(event);\r\n                    }\r\n                }, _this.debounce);\r\n            },\r\n            \r\n            /**\r\n             * @description 处理输入框聚焦事件\r\n             * @param {Event} event - 聚焦事件对象\r\n             */\r\n            onInputFocus(event) {\r\n                this.isFocused = true;\r\n                // 如果下拉框未显示，阻止下拉框被关闭\r\n                event.stopPropagation();\r\n                \r\n                // 如果下拉框未显示，则显示\r\n                if (!this.isShowChoice) {\r\n                    this.btnShowHideClick(event);\r\n                }\r\n            },\r\n            \r\n            /**\r\n             * @description 关闭当前下拉框\r\n             * @public 供外部调用\r\n             */\r\n            closeDropdown() {\r\n                if (this.isShowChoice) {\r\n                    this.isShowChoice = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    /* end */\r\n    .dialog-title-selected {\r\n        color: white;\r\n        font-size: 28rpx;\r\n        padding-left: 20rpx;\r\n        padding-top: 8rpx;\r\n        padding-bottom: 8rpx;\r\n        padding-right: 15rpx;\r\n        background-color: #55ffff;\r\n    }\r\n\r\n    .dialog-title {\r\n        color: black;\r\n        font-size: 28rpx;\r\n        padding-left: 20rpx;\r\n        padding-top: 8rpx;\r\n        padding-bottom: 8rpx;\r\n        padding-right: 15rpx;\r\n        background-color: white;\r\n    }\r\n    \r\n    .dialog-scroll {\r\n        width: 100%;\r\n        max-height: 300rpx; /* 限制滚动区域的最大高度 */\r\n        -webkit-overflow-scrolling: touch; /* 提升iOS滚动体验 */\r\n    }\r\n\r\n    .dialog-view {\r\n        display: flex;\r\n        flex-direction: column;\r\n        border: 2rpx solid #F0AD4E;\r\n        box-sizing: border-box;\r\n        position: fixed;\r\n        z-index: 9999;\r\n        background-color: #ffffff;\r\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n        max-height: 400rpx; /* 限制整个下拉框的最大高度 */\r\n        transform-origin: top center;\r\n        opacity: 0;\r\n        transform: scaleY(0);\r\n        transition: all 0.2s ease;\r\n        overflow: hidden; /* 确保内容不会溢出 */\r\n        border-radius: 0 0 10rpx 10rpx; /* 增加底部圆角 */\r\n    }\r\n    \r\n    .dialog-view.active {\r\n        opacity: 1;\r\n        transform: scaleY(1);\r\n    }\r\n\r\n    .dropdown-icon {\r\n        width: 26rpx;\r\n        height: 26rpx;\r\n        margin-left: 5rpx;\r\n        margin-right: 10rpx;\r\n        transition: transform 0.3s ease;\r\n        flex-shrink: 0;\r\n    }\r\n    \r\n    .dropdown-icon-rotate {\r\n        transform: rotate(180deg);\r\n    }\r\n\r\n    /* 统一的内容容器 */\r\n    .input-content-wrapper {\r\n        flex: 1;\r\n        height: 60rpx;\r\n        display: flex;\r\n        align-items: center;\r\n        box-sizing: border-box;\r\n    }\r\n    \r\n    /* 统一的文本样式 */\r\n    .input-text {\r\n        flex: 1;\r\n        font-size: 28rpx;\r\n        color: #333;\r\n        height: 50rpx;\r\n        line-height: 50rpx;\r\n        padding-left: 20rpx;\r\n        text-align: left;\r\n        width: 100%;\r\n        box-sizing: border-box;\r\n    }\r\n    \r\n    .input-placeholder {\r\n        flex: 1;\r\n        font-size: 28rpx;\r\n        color: #999;\r\n        height: 50rpx;\r\n        line-height: 50rpx;\r\n        padding-left: 20rpx;\r\n        text-align: left;\r\n        width: 100%;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    .drop-down-box-selected {\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n        height: 60rpx;\r\n        width: 100%;\r\n        border: 2rpx solid #F0AD4E;\r\n        box-sizing: border-box;\r\n        padding: 0 10rpx;\r\n        border-radius: 10rpx;\r\n    }\r\n\r\n    .drop-down-box {\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n        height: 60rpx;\r\n        width: 100%;\r\n        border: 2rpx solid gray;\r\n        border-radius: 10rpx;\r\n        box-sizing: border-box;\r\n        padding: 0 10rpx;\r\n    }\r\n\r\n    .selected-all {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        width: 100%;\r\n    }\r\n    \r\n    /* 箭头容器 */\r\n    .arrow-container {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin-left: 5rpx;\r\n        width: 30rpx;\r\n        height: 60rpx;\r\n        flex-shrink: 0;\r\n        z-index: 2;\r\n    }\r\n    \r\n    .empty-result {\r\n        display: flex;\r\n        justify-content: center;\r\n        padding: 20rpx 0;\r\n    }\r\n    \r\n    .empty-result-text {\r\n        color: #999;\r\n        font-size: 28rpx;\r\n    }\r\n\r\n    /* start */\r\n</style>\r\n ","import Component from 'D:/github/teacherDirectory/vue实现Lottie动画代码/components/combobox/combobox.vue'\nwx.createComponent(Component)"],"names":["defineComponent","uni"],"mappings":"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"}
=======
{"version":3,"file":"combobox.js","sources":["../../HBuilderX/HBuilderX.4.45.2025010502/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/RToveWFuc2hpbHXph43mlrDmnaXov4cvdnVl5a6e546wTG90dGll5Yqo55S75Luj56CBL2NvbXBvbmVudHMvY29tYm9ib3gvY29tYm9ib3gudnVl"],"sourcesContent":["import Component from 'E:/yanshilu重新来过/vue实现Lottie动画代码/components/combobox/combobox.vue'\nwx.createComponent(Component)"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,GAAG,gBAAgB,SAAS;"}
>>>>>>> a2bf9657a39810a133593f8de99b785a81f8875d
