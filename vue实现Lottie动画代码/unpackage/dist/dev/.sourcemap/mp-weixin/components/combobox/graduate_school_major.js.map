{"version":3,"file":"graduate_school_major.js","sources":["components/combobox/graduate_school_major.js"],"sourcesContent":["import Fuse from 'fuse.js'\r\nimport schoolData from '/pages_AI_Login_Match/static/data/school_graduate_changed.json'\r\n\r\nexport default {\r\n  state: {\r\n    schools: schoolData,        // 原始学校+专业数据\r\n    schoolKeyword: '',          // 搜索学校的关键词\r\n    selectedSchool: '',         // 选择的学校名\r\n    majorKeyword: '',           // 搜索专业的关键词\r\n    schoolFuse: null,           // 学校搜索 Fuse 实例\r\n    majorFuse: null             // 专业搜索 Fuse 实例\r\n  },\r\n  \r\n  mutations: {\r\n    setSchoolKeyword(state, keyword) {\r\n      state.schoolKeyword = keyword\r\n    },\r\n    \r\n    setSelectedSchool(state, schoolName) {\r\n      state.selectedSchool = schoolName\r\n      state.majorKeyword = '' // 切换学校时，清空专业搜索\r\n      \r\n      // 初始化当前学校的专业搜索\r\n      if (schoolName) {\r\n        const majors = state.schools[schoolName] || []\r\n        \r\n        // 为专业数据增加扩展属性以提高搜索准确性\r\n        const majorItems = majors.map(major => {\r\n          // 提取专业简称和关键词\r\n          let shortNames = []\r\n          \r\n          // 如果专业名称中包含\"学\"字，可能是某种学科\r\n          if (major.includes('学')) {\r\n            // 提取学科名称，例如\"计算机科学\" -> \"计算机\"\r\n            const subjectName = major.split('学')[0]\r\n            if (subjectName.length >= 2) {\r\n              shortNames.push(subjectName)\r\n            }\r\n          }\r\n          \r\n          // 处理带有方向描述的专业名称\r\n          if (major.includes('（') || major.includes('(')) {\r\n            // 提取主专业名称，例如\"软件工程（人工智能方向）\" -> \"软件工程\"\r\n            const mainMajor = major.split(/[（(]/)[0]\r\n            if (mainMajor.length >= 2) {\r\n              shortNames.push(mainMajor)\r\n            }\r\n          }\r\n          \r\n          return {\r\n            name: major,           // 原始专业名称\r\n            short: shortNames.join(' '), // 可能的简称组合\r\n            display: major         // 显示名称\r\n          }\r\n        })\r\n        \r\n        // 创建增强型Fuse实例\r\n        state.majorFuse = new Fuse(majorItems, {\r\n          keys: [\r\n            { name: 'name', weight: 0.7 },   // 完整专业名称权重最高\r\n            { name: 'short', weight: 0.3 }   // 简称权重次之\r\n          ],\r\n          // Fuse配置 - 专业搜索\r\n          threshold: 0.5,          // 中等宽松的阈值，平衡精确度和召回率\r\n          includeScore: true,      // 包含分数以便排序\r\n          shouldSort: true,        // 确保按相关性排序\r\n          minMatchCharLength: 1,   // 最小匹配长度\r\n          ignoreLocation: true,    // 忽略位置限制，适合中文\r\n          findAllMatches: true,    // 找到所有匹配项\r\n          useExtendedSearch: false, // 不使用扩展搜索语法\r\n          distance: 500,           // 降低距离值，让匹配更精确\r\n          location: 0,\r\n          includeMatches: true     // 包含匹配详细信息\r\n        })\r\n        \r\n        console.log('专业搜索引擎初始化完成，包含专业:', majorItems.length)\r\n      }\r\n    },\r\n    \r\n    setMajorKeyword(state, keyword) {\r\n      state.majorKeyword = keyword\r\n    },\r\n    \r\n    // 初始化学校搜索 Fuse 实例，增强模糊搜索能力\r\n    initSchoolFuse(state) {\r\n      // 对每个学校添加额外的搜索字段，帮助匹配简称和拼音首字母\r\n      const schoolItems = Object.keys(state.schools).map(name => {\r\n        // 生成可能的简称组合\r\n        const shortNames = generateShortNames(name)\r\n        \r\n        return {\r\n          name: name,          // 原始学校名\r\n          short: shortNames,   // 可能的简称\r\n          display: name        // 显示名称\r\n        }\r\n      })\r\n      \r\n      // 创建具有高级配置的Fuse实例\r\n      state.schoolFuse = new Fuse(schoolItems, {\r\n        keys: [\r\n          { name: 'name', weight: 0.7 },    // 学校全名权重较高\r\n          { name: 'short', weight: 0.3 }     // 简称权重次之\r\n        ],\r\n        // Fuse配置 - 高度宽松以便能匹配简称\r\n        threshold: 0.6,          // 非常宽松的阈值，允许更多模糊匹配\r\n        includeScore: true,      // 包含分数以便排序\r\n        shouldSort: true,        // 确保按相关性排序\r\n        minMatchCharLength: 1,   // 最小匹配长度\r\n        ignoreLocation: true,    // 忽略位置限制，更宽松\r\n        findAllMatches: true,    // 找到所有匹配项\r\n        useExtendedSearch: false, // 不使用扩展搜索语法\r\n        distance: 1000,          // 大的距离值\r\n        location: 0,\r\n        includeMatches: true     // 包含匹配详细信息\r\n      })\r\n      \r\n      console.log('搜索引擎初始化完成，包含学校:', schoolItems.length)\r\n    }\r\n  },\r\n  \r\n  getters: {\r\n    // 学校列表（使用 Fuse.js 模糊搜索）\r\n    filteredSchoolList(state) {\r\n      if (!state.schoolKeyword) {\r\n        return Object.keys(state.schools).slice(0, 50) // 限制初始显示数量\r\n      }\r\n      \r\n      if (!state.schoolFuse) {\r\n        // 如果 Fuse 未初始化，立即初始化\r\n        this.mutations.initSchoolFuse(state)\r\n      }\r\n\r\n      // 优化关键词处理，移除多余空格\r\n      let keyword = state.schoolKeyword.trim()\r\n      \r\n      // 使用 Fuse.js 搜索并排序\r\n      const results = state.schoolFuse.search(keyword)\r\n      \r\n      // 详细记录结果信息，用于调试\r\n      console.log('Fuse原始结果:', keyword, results.length)\r\n      \r\n      if (results.length > 0) {\r\n        // 输出前5个结果及其匹配分数，帮助调试\r\n        console.log('前5个结果:', results.slice(0, 5).map(r => ({\r\n          name: r.item.name, \r\n          score: r.score,\r\n          matches: r.matches\r\n        })))\r\n      }\r\n      \r\n      // 提取名称并返回 - 注意这里会保留Fuse返回的排序\r\n      const names = results.map(result => result.item.name)\r\n      \r\n      return names\r\n    },\r\n    \r\n    // 当前学校下的专业列表（使用 Fuse.js 模糊搜索）\r\n    filteredMajorList(state) {\r\n      if (!state.selectedSchool) {\r\n        return []\r\n      }\r\n      \r\n      const majors = state.schools[state.selectedSchool] || []\r\n      \r\n      // 如果没有搜索关键词，返回原始列表\r\n      if (!state.majorKeyword) {\r\n        return majors\r\n      }\r\n      \r\n      // 如果 Fuse 未初始化，立即初始化\r\n      if (!state.majorFuse) {\r\n        this.mutations.setSelectedSchool(state, state.selectedSchool)\r\n      }\r\n\r\n      // 优化关键词处理，移除多余空格\r\n      let keyword = state.majorKeyword.trim()\r\n      \r\n      // 使用 Fuse.js 搜索并按相关性排序\r\n      const results = state.majorFuse.search(keyword)\r\n      \r\n      // 打印搜索相关信息（调试用）\r\n      console.log('专业搜索结果数量:', results.length, '关键词:', keyword)\r\n      \r\n      if (results.length > 0) {\r\n        // 输出前5个结果及其分数，帮助调试\r\n        console.log('专业搜索前5个结果:', results.slice(0, 5).map(r => ({\r\n          name: r.item.name, \r\n          score: r.score,\r\n          matches: r.matches ? r.matches.map(m => m.key) : 'N/A'\r\n        })))\r\n      }\r\n      \r\n      // 应用自定义排序策略\r\n      // 1. 精确匹配优先显示在最前面\r\n      // 2. 其次是以关键词开头的专业\r\n      // 3. 然后按Fuse分数排序（分数越低越相关）\r\n      const exactMatch = []\r\n      const beginsWith = []\r\n      const otherMatches = []\r\n      \r\n      results.forEach(result => {\r\n        const major = result.item.name\r\n        // 精确匹配\r\n        if (major.toLowerCase() === keyword.toLowerCase()) {\r\n          exactMatch.push(major)\r\n        } \r\n        // 以关键词开头的匹配\r\n        else if (major.toLowerCase().startsWith(keyword.toLowerCase())) {\r\n          beginsWith.push(major)\r\n        } \r\n        // 其他匹配结果\r\n        else {\r\n          otherMatches.push(major)\r\n        }\r\n      })\r\n      \r\n      // 组合搜索结果，确保保持各自的相关性排序\r\n      return [...exactMatch, ...beginsWith, ...otherMatches]\r\n    },\r\n    \r\n    // 获取匹配度最高的学校（用于自动选择）\r\n    bestMatchedSchool(state, getters) {\r\n      if (!state.schoolKeyword || !state.schoolFuse) {\r\n        return ''\r\n      }\r\n      \r\n      const results = state.schoolFuse.search(state.schoolKeyword.trim())\r\n      return results.length > 0 ? results[0].item.name : ''\r\n    }\r\n  },\r\n  \r\n  actions: {\r\n    // 初始化学校搜索\r\n    initSearch({ commit }) {\r\n      commit('initSchoolFuse')\r\n    },\r\n    \r\n    // 更新学校关键词\r\n    updateSchoolKeyword({ commit }, keyword) {\r\n      commit('setSchoolKeyword', keyword)\r\n    },\r\n    \r\n    // 选择学校\r\n    selectSchool({ commit }, schoolName) {\r\n      commit('setSelectedSchool', schoolName)\r\n    },\r\n    \r\n    // 更新专业关键词\r\n    updateMajorKeyword({ commit }, keyword) {\r\n      commit('setMajorKeyword', keyword)\r\n    },\r\n    \r\n    // 自动选择最佳匹配学校\r\n    autoSelectSchool({ commit, getters }) {\r\n      const bestMatch = getters.bestMatchedSchool\r\n      if (bestMatch) {\r\n        commit('setSelectedSchool', bestMatch)\r\n      }\r\n    },\r\n    \r\n    // 强制重新初始化搜索引擎\r\n    reinitializeSearch({ commit, state }) {\r\n      // 清除现有实例\r\n      state.schoolFuse = null\r\n      // 重新初始化\r\n      commit('initSchoolFuse')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @description 为学校名称生成可能的简称和缩写，用于提高模糊搜索能力\r\n * @param {String} name - 学校完整名称\r\n * @returns {String} - 可能的简称组合\r\n */\r\nfunction generateShortNames(name) {\r\n  let shortNames = []\r\n  \r\n  // 提取每个字的首字母\r\n  const initials = name.split('').filter(char => /[\\u4e00-\\u9fa5]/.test(char)).join('')\r\n  \r\n  // 处理常见模式\r\n  // 例如：\"北京理工大学\" => \"北理\" \"北理工\" \"理工大\"\r\n  if (name.length >= 2) {\r\n    // 取前两个字作为简称\r\n    shortNames.push(name.substring(0, 2))\r\n  }\r\n  \r\n  if (name.length >= 3) {\r\n    // 取前三个字作为简称\r\n    shortNames.push(name.substring(0, 3))\r\n    \r\n    // 地名+关键词，如\"北京理工\"\r\n    const locationKeyword = name.match(/^([\\u4e00-\\u9fa5]{2})([\\u4e00-\\u9fa5]{1,3})/)\r\n    if (locationKeyword) {\r\n      shortNames.push(locationKeyword[1][0] + locationKeyword[2])\r\n    }\r\n  }\r\n  \r\n  if (name.length >= 4) {\r\n    // 跳过地名，如\"北京理工大学\" => \"理工大学\"\r\n    if (name.includes('大学') || name.includes('学院')) {\r\n      const skipLocation = name.substring(2)\r\n      shortNames.push(skipLocation)\r\n    }\r\n  }\r\n  \r\n  // 合并所有可能的简称\r\n  return shortNames.join(' ')\r\n}"],"names":["GraduateStore","schoolData","state","keyword","schoolName","majorItems","major","shortNames","subjectName","mainMajor","Fuse","uni","schoolItems","name","generateShortNames","results","r","result","majors","m","exactMatch","beginsWith","otherMatches","getters","commit","bestMatch","char","locationKeyword","skipLocation"],"mappings":"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"}