{"version":3,"file":"index.js","sources":["components/loading/GlobalLoading.vue","components/loading/LoadingAnimation.vue","components/loading/index.js"],"sourcesContent":["<template>\r\n  <view class=\"global-loading-wrapper\" :style=\"wrapperStyle\" :class=\"{ 'visible': visible, 'fullscreen': fullscreen }\">\r\n    <LoadingAnimation \r\n      ref=\"loadingRef\"\r\n      :src=\"src\"\r\n      :width=\"width\"\r\n      :height=\"height\" \r\n      :showText=\"showText\"\r\n      :text=\"text\"\r\n      :autoPlay=\"autoPlay\"\r\n      @dataReady=\"onDataReady\"\r\n      @error=\"onError\"\r\n      @timeout=\"onTimeout\"\r\n      @mounted=\"onMounted\"\r\n    />\r\n  </view>\r\n</template>\r\n\r\n<script setup lang=\"uts\">\r\nimport { ref, computed, onMounted, provide, onBeforeUnmount } from 'vue'\r\nimport LoadingAnimation from './LoadingAnimation.vue'\r\nimport { useGlobalAnimationState } from './useAnimationCache.js'\r\n\r\n/**\r\n * @typedef {Object} GlobalLoadingProps\r\n * @property {String} src - 动画源文件地址\r\n * @property {String} width - 动画宽度\r\n * @property {String} height - 动画高度\r\n * @property {Boolean} fullscreen - 是否全屏显示\r\n * @property {Boolean} transparent - 背景是否透明\r\n * @property {String} backgroundColor - 背景颜色\r\n * @property {Boolean} autoPlay - 是否自动播放\r\n * @property {Boolean} preload - 是否预加载\r\n * @property {Boolean} showText - 是否显示加载文字\r\n * @property {String} text - 加载文字内容\r\n * @property {Number} zIndex - 层级\r\n */\r\n\r\n/**\r\n * 组件属性\r\n * @type {GlobalLoadingProps}\r\n */\r\nconst props = defineProps({\r\n  src: {\r\n    type: String,\r\n    default: 'https://lottie.host/1f64310d-d1a9-44c9-ac77-3c29ae849559/c3yfKGAzCm.json'\r\n  },\r\n  width: {\r\n    type: String,\r\n    default: '200rpx'\r\n  },\r\n  height: {\r\n    type: String,\r\n    default: '200rpx'\r\n  },\r\n  fullscreen: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  transparent: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  backgroundColor: {\r\n    type: String,\r\n    default: 'rgba(255, 255, 255, 0.9)'\r\n  },\r\n  autoPlay: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  preload: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  showText: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  text: {\r\n    type: String,\r\n    default: '加载中...'\r\n  },\r\n  zIndex: {\r\n    type: Number,\r\n    default: 9999\r\n  }\r\n})\r\n\r\n/**\r\n * 组件事件\r\n * @type {Object}\r\n */\r\nconst emit = defineEmits(['mounted', 'dataReady', 'error', 'timeout'])\r\n\r\n// 组件内部状态\r\nconst loadingRef = ref(null)\r\nconst visible = ref(false)\r\nconst isPreloaded = ref(false)\r\n\r\n// 获取全局动画状态\r\nconst { \r\n  globalState, \r\n  getGlobalStats, \r\n  isAllAnimationsLoaded,\r\n} = useGlobalAnimationState()\r\n\r\n/**\r\n * 计算包装器样式\r\n */\r\nconst wrapperStyle = computed(() => {\r\n  return {\r\n    backgroundColor: props.transparent ? 'transparent' : props.backgroundColor,\r\n    zIndex: props.zIndex\r\n  }\r\n})\r\n\r\n/**\r\n * 显示加载动画\r\n */\r\nconst show = () => {\r\n  visible.value = true\r\n  if (loadingRef.value) {\r\n    loadingRef.value.show()\r\n  }\r\n}\r\n\r\n/**\r\n * 隐藏加载动画\r\n */\r\nconst hide = () => {\r\n  visible.value = false\r\n  if (loadingRef.value) {\r\n    loadingRef.value.hide()\r\n  }\r\n}\r\n\r\n/**\r\n * 预加载动画资源\r\n * @returns {Promise<boolean>} 预加载结果\r\n */\r\nconst preload = async () => {\r\n  if (isPreloaded.value) {\r\n    return true\r\n  }\r\n  \r\n  try {\r\n    if (loadingRef.value) {\r\n      const result = await loadingRef.value.preload()\r\n      if (result) {\r\n        isPreloaded.value = true\r\n      }\r\n      return result\r\n    }\r\n    return false\r\n  } catch (error) {\r\n    uni.__f__('error','at components/loading/GlobalLoading.vue:157','预加载全局动画失败', error)\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * 获取动画组件\r\n * @returns {Object|null} 动画组件实例\r\n */\r\nconst getLottieRef = () => {\r\n  if (loadingRef.value && loadingRef.value.lottieRef) {\r\n    return loadingRef.value.lottieRef.value\r\n  }\r\n  return null\r\n}\r\n\r\n/**\r\n * 获取动画统计信息\r\n * @returns {Object} 统计信息\r\n */\r\nconst getAnimationStats = () => {\r\n  return getGlobalStats()\r\n}\r\n\r\n/**\r\n * 动画数据准备完成回调\r\n */\r\nconst onDataReady = () => {\r\n  isPreloaded.value = true\r\n  emit('dataReady')\r\n}\r\n\r\n/**\r\n * 处理错误\r\n * @param {Error} error - 错误信息\r\n */\r\nconst onError = (error) => {\r\n  emit('error', error)\r\n}\r\n\r\n/**\r\n * 处理超时\r\n * @param {String} src - 动画源\r\n */\r\nconst onTimeout = (src) => {\r\n  emit('timeout', src)\r\n}\r\n\r\n/**\r\n * 动画组件挂载完成\r\n */\r\nconst onMounted = () => {\r\n  // 如果设置了预加载，则自动预加载\r\n  if (props.preload) {\r\n    preload()\r\n  }\r\n  \r\n  emit('mounted')\r\n}\r\n\r\n/**\r\n * 提供给外部的组件方法\r\n */\r\ndefineExpose({\r\n  show,\r\n  hide,\r\n  preload,\r\n  isPreloaded: computed(() => isPreloaded.value),\r\n  getLottieRef,\r\n  getAnimationStats\r\n})\r\n\r\n// 全局状态注入\r\nprovide('globalLoading', {\r\n  show,\r\n  hide,\r\n  preload,\r\n  isPreloaded: computed(() => isPreloaded.value),\r\n  stats: getGlobalStats\r\n})\r\n\r\n// 组件挂载\r\nonMounted(() => {\r\n  // 注册全局实例\r\n  const globalApp = getApp()\r\n  if (globalApp) {\r\n    globalApp.globalData = globalApp.globalData || {}\r\n    \r\n    // 更新全局$loading对象\r\n    globalApp.globalData.$loading = {\r\n      show,\r\n      hide,\r\n      preload,\r\n      isPreloaded: { value: isPreloaded.value },\r\n      getStatus: getAnimationStats,\r\n      globalState,\r\n      isReady: true,\r\n      componentMounted: true\r\n    }\r\n    \r\n    uni.__f__('log','at components/loading/GlobalLoading.vue:257','全局$loading对象已更新')\r\n  }\r\n})\r\n\r\n// 组件卸载\r\nonBeforeUnmount(() => {\r\n  // 清理全局引用\r\n  const globalApp = getApp()\r\n  if (globalApp && globalApp.globalData && globalApp.globalData.$loading) {\r\n    // 保留引用但标记为未挂载\r\n    globalApp.globalData.$loading.componentMounted = false\r\n  }\r\n})\r\n</script>\r\n\r\n<style>\r\n.global-loading-wrapper {\r\n  position: fixed;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  transition: opacity 0.3s, visibility 0.3s;\r\n}\r\n\r\n.global-loading-wrapper.fullscreen {\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.global-loading-wrapper.visible {\r\n  opacity: 1;\r\n  visibility: visible;\r\n}\r\n</style> ","<template>\r\n  <view class=\"loading-animation-container\" :class=\"{ 'visible': visible }\">\r\n    <view class=\"animation-wrapper\">\r\n      <view class=\"lottie-container\">\r\n        <c-lottie\r\n          ref=\"lottieRef\"\r\n          :src=\"animationSrc\"\r\n          :width=\"width\"\r\n          :height=\"height\"\r\n          :loop=\"true\"\r\n          :autoPlay=\"autoPlay\"\r\n          @dataReady=\"onDataReady\"\r\n        ></c-lottie>\r\n      </view>\r\n      <text v-if=\"showText\" class=\"loading-text\">{{ text }}</text>\r\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<script setup lang=\"uts\">\r\nimport { ref, onMounted, computed, watch, onBeforeUnmount } from 'vue';\r\nimport { useAnimationCache } from './useAnimationCache.js';\r\n\r\n/**\r\n * @typedef {Object} LoadingAnimationProps\r\n * @property {String} src - 动画源文件地址\r\n * @property {String} width - 动画宽度\r\n * @property {String} height - 动画高度\r\n * @property {Boolean} autoPlay - 是否自动播放\r\n * @property {Boolean} showText - 是否显示加载文字\r\n * @property {String} text - 加载文字内容\r\n */\r\n\r\n/**\r\n * 组件属性\r\n * @type {LoadingAnimationProps}\r\n */\r\nconst props = defineProps({\r\n  src: {\r\n    type: String,\r\n    default: 'https://lottie.host/1f64310d-d1a9-44c9-ac77-3c29ae849559/c3yfKGAzCm.json'\r\n  },\r\n  width: {\r\n    type: String,\r\n    default: '200rpx'\r\n  },\r\n  height: {\r\n    type: String,\r\n    default: '200rpx'\r\n  },\r\n  autoPlay: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  showText: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  text: {\r\n    type: String,\r\n    default: '加载中...'\r\n  }\r\n})\r\n\r\n/**\r\n * 组件事件\r\n * @type {Object}\r\n */\r\nconst emit = defineEmits(['mounted', 'dataReady', 'error', 'timeout'])\r\n\r\n// 组件内部状态\r\nconst lottieRef = ref(null)\r\nconst visible = ref(false)\r\nconst animationSrc = ref(props.src)\r\nconst isLoaded = ref(false)\r\nconst isPlaying = ref(false)\r\nconst loadingTimeout = ref(null)\r\n\r\n// 使用动画缓存功能\r\nconst { \r\n  isAnimationCached, \r\n  loadAnimationData, \r\n  getAnimationFromCache,\r\n  getAnimationStats\r\n} = useAnimationCache()\r\n\r\n/**\r\n * 显示加载动画\r\n */\r\nconst show = () => {\r\n  if (!isLoaded.value) {\r\n    preload()\r\n  }\r\n  visible.value = true\r\n  if (lottieRef.value && isLoaded.value) {\r\n    lottieRef.value.call('play')\r\n    isPlaying.value = true\r\n  }\r\n}\r\n\r\n/**\r\n * 隐藏加载动画\r\n */\r\nconst hide = () => {\r\n  visible.value = false\r\n  if (lottieRef.value && isPlaying.value) {\r\n    lottieRef.value.call('stop')\r\n    isPlaying.value = false\r\n  }\r\n}\r\n\r\n/**\r\n * 预加载动画资源\r\n * @returns {Promise<boolean>} 预加载结果\r\n */\r\nconst preload = async () => {\r\n  if (isLoaded.value) {\r\n    return true\r\n  }\r\n  \r\n  try {\r\n    // 设置加载超时处理\r\n    if (loadingTimeout.value) {\r\n      clearTimeout(loadingTimeout.value)\r\n    }\r\n    \r\n    loadingTimeout.value = setTimeout(() => {\r\n      uni.__f__('warn','at components/loading/LoadingAnimation.vue:128','动画加载超时', animationSrc.value)\r\n      emit('timeout', animationSrc.value)\r\n    }, 5000)\r\n    \r\n    // 预加载动画数据\r\n    const animationData = await loadAnimationData(animationSrc.value)\r\n    \r\n    if (animationData) {\r\n      if (loadingTimeout.value) {\r\n        clearTimeout(loadingTimeout.value)\r\n        loadingTimeout.value = null\r\n      }\r\n      \r\n      isLoaded.value = true\r\n      return true\r\n    }\r\n    \r\n    return false\r\n  } catch (error) {\r\n    uni.__f__('error','at components/loading/LoadingAnimation.vue:147','预加载动画失败', error)\r\n    emit('error', error)\r\n    \r\n    if (loadingTimeout.value) {\r\n      clearTimeout(loadingTimeout.value)\r\n      loadingTimeout.value = null\r\n    }\r\n    \r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * 动画数据准备完成回调\r\n */\r\nconst onDataReady = () => {\r\n  uni.__f__('log','at components/loading/LoadingAnimation.vue:163','动画数据准备完成')\r\n  isLoaded.value = true\r\n  \r\n  if (loadingTimeout.value) {\r\n    clearTimeout(loadingTimeout.value)\r\n    loadingTimeout.value = null\r\n  }\r\n  \r\n  emit('dataReady')\r\n  \r\n  // 如果当前应该显示动画，则播放\r\n  if (visible.value && !isPlaying.value) {\r\n    lottieRef.value.call('play')\r\n    isPlaying.value = true\r\n  }\r\n}\r\n\r\n/**\r\n * 监听src属性变化\r\n */\r\nwatch(() => props.src, (newSrc) => {\r\n  if (newSrc !== animationSrc.value) {\r\n    animationSrc.value = newSrc\r\n    isLoaded.value = false\r\n    \r\n    // 如果当前正在显示，需要重新加载\r\n    if (visible.value) {\r\n      preload()\r\n    }\r\n  }\r\n})\r\n\r\n/**\r\n * 提供给外部的组件方法\r\n */\r\ndefineExpose({\r\n  show,\r\n  hide,\r\n  preload,\r\n  isLoaded: computed(() => isLoaded.value),\r\n  isPlaying: computed(() => isPlaying.value),\r\n  lottieRef,\r\n  getAnimationStats\r\n})\r\n\r\n// 组件挂载时预加载\r\nonMounted(() => {\r\n  uni.__f__('log','at components/loading/LoadingAnimation.vue:210','加载动画组件已挂载')\r\n  \r\n  // 检查是否已缓存\r\n  if (isAnimationCached(animationSrc.value)) {\r\n    uni.__f__('log','at components/loading/LoadingAnimation.vue:214','动画已缓存，直接标记为已加载')\r\n    isLoaded.value = true\r\n  } else {\r\n    // 自动预加载但不显示\r\n    preload().then(() => {\r\n      uni.__f__('log','at components/loading/LoadingAnimation.vue:219','动画预加载完成', isLoaded.value)\r\n    })\r\n  }\r\n  \r\n  emit('mounted')\r\n})\r\n\r\n// 组件卸载前清理\r\nonBeforeUnmount(() => {\r\n  if (loadingTimeout.value) {\r\n    clearTimeout(loadingTimeout.value)\r\n    loadingTimeout.value = null\r\n  }\r\n  \r\n  // 停止播放\r\n  if (lottieRef.value && isPlaying.value) {\r\n    lottieRef.value.call('stop')\r\n    isPlaying.value = false\r\n  }\r\n})\r\n</script>\r\n\r\n<style>\r\n.loading-animation-container {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(255, 255, 255, 0.9);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 9999;\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  transition: opacity 0.3s, visibility 0.3s;\r\n}\r\n\r\n.loading-animation-container.visible {\r\n  opacity: 1;\r\n  visibility: visible;\r\n}\r\n\r\n.animation-wrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.lottie-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.loading-text {\r\n  margin-top: 20rpx;\r\n  font-size: 28rpx;\r\n  color: #666;\r\n}\r\n</style> ","import GlobalLoading from './GlobalLoading.vue'\r\nimport LoadingAnimation from './LoadingAnimation.vue'\r\nimport { useAnimationCache, useGlobalAnimationState, preloadAnimations } from './useAnimationCache.js'\r\n\r\n/**\r\n * 安装全局加载插件\r\n * @param {Object} app - Vue应用实例\r\n * @param {Object} options - 插件选项\r\n */\r\nexport function install(app, options = {}) {\r\n  // 注册组件\r\n  app.component('GlobalLoading', GlobalLoading)\r\n  app.component('LottieLoading', LoadingAnimation)\r\n  \r\n  // 注册全局属性\r\n  app.config.globalProperties.$loading = {\r\n    show: () => {\r\n      // 访问全局App对象获取loading控制\r\n      const globalApp = getApp()\r\n      if (globalApp && globalApp.globalData && globalApp.globalData.$loading) {\r\n        return globalApp.globalData.$loading.show()\r\n      }\r\n      return false\r\n    },\r\n    hide: () => {\r\n      const globalApp = getApp()\r\n      if (globalApp && globalApp.globalData && globalApp.globalData.$loading) {\r\n        return globalApp.globalData.$loading.hide()\r\n      }\r\n      return false\r\n    },\r\n    preload: async () => {\r\n      const globalApp = getApp()\r\n      if (globalApp && globalApp.globalData && globalApp.globalData.$loading) {\r\n        return await globalApp.globalData.$loading.preload()\r\n      }\r\n      return false\r\n    }\r\n  }\r\n  \r\n  // 注入全局动画状态对象\r\n  const { \r\n    globalState, \r\n    getGlobalStats, \r\n    isAllAnimationsLoaded,\r\n    preloadAnimation\r\n  } = useGlobalAnimationState()\r\n  \r\n  app.provide('animationState', {\r\n    globalState,\r\n    getStats: getGlobalStats,\r\n    isAllLoaded: isAllAnimationsLoaded,\r\n    preload: preloadAnimation\r\n  })\r\n  \r\n  // 注册mixin\r\n  app.mixin({\r\n    beforeCreate() {\r\n      this.$animationState = {\r\n        globalState,\r\n        getStats: getGlobalStats,\r\n        isAllLoaded: isAllAnimationsLoaded,\r\n        preload: preloadAnimation\r\n      }\r\n    }\r\n  })\r\n  \r\n  // 如果有预加载选项，执行\r\n  if (options.preload) {\r\n    const { animations } = options.preload\r\n    if (animations && Array.isArray(animations) && animations.length > 0) {\r\n      // 延迟执行，以确保应用已完全初始化\r\n      setTimeout(() => {\r\n        preloadAnimations(animations, (progress) => {\r\n          console.log(`预加载进度: ${progress.progress.toFixed(2)}%`)\r\n        })\r\n        .then(result => {\r\n          console.log(`预加载完成: 成功${result.totalSuccess}个, 失败${result.totalFailed}个`)\r\n        })\r\n      }, 100)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 创建加载组件插件\r\n * @param {Object} options - 插件选项\r\n * @returns {Object} 插件对象\r\n */\r\nexport function createLoadingPlugin(options = {}) {\r\n  return {\r\n    install: (app) => install(app, options)\r\n  }\r\n}\r\n\r\n// 直接导出组件和钩子\r\nexport {\r\n  GlobalLoading,\r\n  LoadingAnimation,\r\n  useAnimationCache,\r\n  useGlobalAnimationState,\r\n  preloadAnimations\r\n}\r\n\r\n// 导出默认插件\r\nexport default {\r\n  install\r\n} "],"names":["LoadingAnimation","props","__props","emit","__emit","loadingRef","ref","visible","isPreloaded","_b","useGlobalAnimationState","getGlobalStats","wrapperStyle","computed","show","hide","preload","__awaiter","result","error","uni","getLottieRef","getAnimationStats","onDataReady","onError","onTimeout","src","onMounted","__expose","provide","onBeforeUnmount","globalApp","lottieRef","animationSrc","isLoaded","isPlaying","loadingTimeout","useAnimationCache","isAnimationCached","loadAnimationData","watch","newSrc","install","app","options","GlobalLoading","globalState","isAllAnimationsLoaded","preloadAnimation","animations","preloadAnimations","progress","LoadingPlugin"],"mappings":"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"}