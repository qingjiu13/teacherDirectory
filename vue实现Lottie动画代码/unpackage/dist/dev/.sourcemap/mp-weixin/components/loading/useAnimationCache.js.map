{"version":3,"file":"useAnimationCache.js","sources":["components/loading/useAnimationCache.js"],"sourcesContent":["import { ref } from 'vue'\r\n\r\n// 创建全局状态对象\r\nconst globalAnimationCache = new Map()\r\nconst globalStats = ref({\r\n  totalCached: 0,\r\n  totalLoaded: 0,\r\n  totalFailed: 0,\r\n  animations: []\r\n})\r\nconst globalLoading = ref(false)\r\n\r\n/**\r\n * 从URL中提取唯一键\r\n * @param {String} url - 动画URL\r\n * @returns {String} 唯一键\r\n */\r\nconst getAnimationKey = (url) => {\r\n  return url.split('/').pop().split('.')[0]\r\n}\r\n\r\n/**\r\n * 使用动画缓存功能\r\n * @returns {Object} 缓存相关的方法集合\r\n */\r\nexport const useAnimationCache = () => {\r\n  /**\r\n   * 检查动画是否已缓存\r\n   * @param {String} url - 动画URL\r\n   * @returns {Boolean} 是否已缓存\r\n   */\r\n  const isAnimationCached = (url) => {\r\n    return globalAnimationCache.has(url)\r\n  }\r\n  \r\n  /**\r\n   * 从缓存中获取动画数据\r\n   * @param {String} url - 动画URL\r\n   * @returns {Object|null} 动画数据或null\r\n   */\r\n  const getAnimationFromCache = (url) => {\r\n    return globalAnimationCache.get(url) || null\r\n  }\r\n  \r\n  /**\r\n   * 将动画数据存入缓存\r\n   * @param {String} url - 动画URL\r\n   * @param {Object} data - 动画数据\r\n   */\r\n  const saveAnimationToCache = (url, data) => {\r\n    globalAnimationCache.set(url, data)\r\n    \r\n    // 更新统计信息\r\n    const animIndex = globalStats.value.animations.findIndex(a => a.url === url)\r\n    if (animIndex === -1) {\r\n      globalStats.value.animations.push({\r\n        url,\r\n        key: getAnimationKey(url),\r\n        cached: true,\r\n        loadTime: Date.now()\r\n      })\r\n    } else {\r\n      globalStats.value.animations[animIndex].cached = true\r\n      globalStats.value.animations[animIndex].loadTime = Date.now()\r\n    }\r\n    \r\n    globalStats.value.totalCached = globalAnimationCache.size\r\n    \r\n    // 同时保存到本地存储，以便下次应用启动时可以恢复\r\n    try {\r\n      const key = `lottie_${getAnimationKey(url)}`\r\n      uni.setStorageSync(key, data)\r\n      console.log('动画数据已保存到本地存储', key)\r\n    } catch (e) {\r\n      console.error('保存到本地存储失败', e)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 恢复本地存储中的动画数据到缓存\r\n   * @param {String} url - 动画URL\r\n   * @returns {Boolean} 是否成功恢复\r\n   */\r\n  const restoreAnimationFromStorage = (url) => {\r\n    const key = `lottie_${getAnimationKey(url)}`\r\n    try {\r\n      const data = uni.getStorageSync(key)\r\n      if (data) {\r\n        globalAnimationCache.set(url, data)\r\n        \r\n        // 更新统计信息\r\n        const animIndex = globalStats.value.animations.findIndex(a => a.url === url)\r\n        if (animIndex === -1) {\r\n          globalStats.value.animations.push({\r\n            url,\r\n            key: getAnimationKey(url),\r\n            cached: true,\r\n            loadTime: Date.now(),\r\n            fromStorage: true\r\n          })\r\n        } else {\r\n          globalStats.value.animations[animIndex].cached = true\r\n          globalStats.value.animations[animIndex].loadTime = Date.now()\r\n          globalStats.value.animations[animIndex].fromStorage = true\r\n        }\r\n        \r\n        globalStats.value.totalCached = globalAnimationCache.size\r\n        \r\n        console.log('已从本地存储恢复动画数据到缓存', key)\r\n        return true\r\n      }\r\n    } catch (e) {\r\n      console.error('从本地存储恢复失败', e)\r\n    }\r\n    return false\r\n  }\r\n  \r\n  /**\r\n   * 加载动画数据\r\n   * @param {String} url - 动画URL\r\n   * @returns {Promise<Object>} 动画数据\r\n   */\r\n  const loadAnimationData = async (url) => {\r\n    if (globalLoading.value) {\r\n      console.log('已有加载任务正在进行')\r\n      return null\r\n    }\r\n    \r\n    globalLoading.value = true\r\n    \r\n    // 记录加载开始\r\n    const startTime = Date.now()\r\n    const animIndex = globalStats.value.animations.findIndex(a => a.url === url)\r\n    if (animIndex === -1) {\r\n      globalStats.value.animations.push({\r\n        url,\r\n        key: getAnimationKey(url),\r\n        cached: false,\r\n        loading: true,\r\n        startTime\r\n      })\r\n    } else {\r\n      globalStats.value.animations[animIndex].loading = true\r\n      globalStats.value.animations[animIndex].startTime = startTime\r\n    }\r\n    \r\n    // 首先检查内存缓存\r\n    if (isAnimationCached(url)) {\r\n      console.log('从内存缓存获取动画数据')\r\n      \r\n      // 更新统计信息\r\n      const idx = globalStats.value.animations.findIndex(a => a.url === url)\r\n      if (idx !== -1) {\r\n        globalStats.value.animations[idx].loading = false\r\n        globalStats.value.animations[idx].loadedFromCache = true\r\n        globalStats.value.animations[idx].loadTime = Date.now() - startTime\r\n      }\r\n      \r\n      globalLoading.value = false\r\n      return getAnimationFromCache(url)\r\n    }\r\n    \r\n    // 然后检查本地存储\r\n    if (restoreAnimationFromStorage(url)) {\r\n      console.log('从本地存储恢复动画数据')\r\n      \r\n      // 更新统计信息\r\n      const idx = globalStats.value.animations.findIndex(a => a.url === url)\r\n      if (idx !== -1) {\r\n        globalStats.value.animations[idx].loading = false\r\n        globalStats.value.animations[idx].loadedFromStorage = true\r\n        globalStats.value.animations[idx].loadTime = Date.now() - startTime\r\n      }\r\n      \r\n      globalStats.value.totalLoaded++\r\n      globalLoading.value = false\r\n      return getAnimationFromCache(url)\r\n    }\r\n    \r\n    // 最后从网络加载\r\n    console.log('从网络加载动画数据', url)\r\n    try {\r\n      const { data } = await uni.request({\r\n        url: url,\r\n        method: 'GET'\r\n      })\r\n      \r\n      // 保存到缓存\r\n      saveAnimationToCache(url, data)\r\n      \r\n      // 更新统计信息\r\n      const idx = globalStats.value.animations.findIndex(a => a.url === url)\r\n      if (idx !== -1) {\r\n        globalStats.value.animations[idx].loading = false\r\n        globalStats.value.animations[idx].loadedFromNetwork = true\r\n        globalStats.value.animations[idx].loadTime = Date.now() - startTime\r\n      }\r\n      \r\n      globalStats.value.totalLoaded++\r\n      globalLoading.value = false\r\n      return data\r\n    } catch (e) {\r\n      console.error('网络加载动画数据失败', e)\r\n      \r\n      // 更新统计信息\r\n      const idx = globalStats.value.animations.findIndex(a => a.url === url)\r\n      if (idx !== -1) {\r\n        globalStats.value.animations[idx].loading = false\r\n        globalStats.value.animations[idx].failed = true\r\n        globalStats.value.animations[idx].error = e.message || '未知错误'\r\n      }\r\n      \r\n      globalStats.value.totalFailed++\r\n      globalLoading.value = false\r\n      return null\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 清除特定动画的缓存\r\n   * @param {String} url - 动画URL\r\n   * @returns {Boolean} 是否成功清除\r\n   */\r\n  const clearAnimationCache = (url) => {\r\n    const key = `lottie_${getAnimationKey(url)}`\r\n    \r\n    try {\r\n      // 删除内存缓存\r\n      const deleted = globalAnimationCache.delete(url)\r\n      \r\n      // 删除本地存储\r\n      uni.removeStorageSync(key)\r\n      \r\n      // 更新统计信息\r\n      if (deleted) {\r\n        const idx = globalStats.value.animations.findIndex(a => a.url === url)\r\n        if (idx !== -1) {\r\n          globalStats.value.animations[idx].cached = false\r\n          globalStats.value.animations[idx].cleared = true\r\n          globalStats.value.animations[idx].clearTime = Date.now()\r\n        }\r\n        \r\n        globalStats.value.totalCached = globalAnimationCache.size\r\n      }\r\n      \r\n      return deleted\r\n    } catch (e) {\r\n      console.error('清除动画缓存失败', e)\r\n      return false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 清除所有动画缓存\r\n   */\r\n  const clearAllAnimationCache = () => {\r\n    try {\r\n      // 获取所有URL列表\r\n      const urls = Array.from(globalAnimationCache.keys())\r\n      \r\n      // 逐个清除\r\n      urls.forEach(url => {\r\n        clearAnimationCache(url)\r\n      })\r\n      \r\n      console.log('已清除所有动画缓存')\r\n      return true\r\n    } catch (e) {\r\n      console.error('清除所有动画缓存失败', e)\r\n      return false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取缓存统计信息\r\n   * @returns {Object} 统计信息\r\n   */\r\n  const getAnimationStats = () => {\r\n    return {\r\n      ...globalStats.value,\r\n      timestamp: Date.now()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 批量预加载动画\r\n   * @param {Array<String>} urls - 动画URL列表\r\n   * @param {Function} progressCallback - 进度回调函数\r\n   * @returns {Promise<Object>} 加载结果\r\n   */\r\n  const preloadAnimations = async (urls, progressCallback) => {\r\n    if (!urls || !Array.isArray(urls) || urls.length === 0) {\r\n      return { totalSuccess: 0, totalFailed: 0 }\r\n    }\r\n    \r\n    const total = urls.length\r\n    let completed = 0\r\n    let success = 0\r\n    let failed = 0\r\n    \r\n    // 创建进度跟踪对象\r\n    const progress = {\r\n      total,\r\n      completed,\r\n      success,\r\n      failed,\r\n      progress: 0\r\n    }\r\n    \r\n    // 逐个加载\r\n    for (const url of urls) {\r\n      try {\r\n        const result = await loadAnimationData(url)\r\n        completed++\r\n        \r\n        if (result) {\r\n          success++\r\n        } else {\r\n          failed++\r\n        }\r\n        \r\n        // 更新进度\r\n        progress.completed = completed\r\n        progress.success = success\r\n        progress.failed = failed\r\n        progress.progress = (completed / total) * 100\r\n        \r\n        // 调用进度回调\r\n        if (typeof progressCallback === 'function') {\r\n          progressCallback(progress)\r\n        }\r\n      } catch (e) {\r\n        console.error(`预加载动画失败: ${url}`, e)\r\n        completed++\r\n        failed++\r\n        \r\n        // 更新进度\r\n        progress.completed = completed\r\n        progress.failed = failed\r\n        progress.progress = (completed / total) * 100\r\n        \r\n        // 调用进度回调\r\n        if (typeof progressCallback === 'function') {\r\n          progressCallback(progress)\r\n        }\r\n      }\r\n    }\r\n    \r\n    return {\r\n      totalSuccess: success,\r\n      totalFailed: failed,\r\n      total\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 检查所有动画是否已加载\r\n   * @returns {Boolean} 是否所有动画都已加载\r\n   */\r\n  const isAllAnimationsLoaded = () => {\r\n    // 如果没有动画，返回true\r\n    if (globalStats.value.animations.length === 0) {\r\n      return true\r\n    }\r\n    \r\n    // 检查是否所有动画都已缓存\r\n    return globalStats.value.animations.every(a => a.cached && !a.loading)\r\n  }\r\n  \r\n  return {\r\n    isAnimationCached,\r\n    getAnimationFromCache,\r\n    saveAnimationToCache,\r\n    restoreAnimationFromStorage,\r\n    loadAnimationData,\r\n    clearAnimationCache,\r\n    clearAllAnimationCache,\r\n    getAnimationStats,\r\n    preloadAnimations,\r\n    isAllAnimationsLoaded,\r\n    globalStats\r\n  }\r\n}\r\n\r\n/**\r\n * 提供全局动画状态管理\r\n * @returns {Object} 全局动画状态和方法\r\n */\r\nexport const useGlobalAnimationState = () => {\r\n  // 直接使用单例模式返回\r\n  const methods = useAnimationCache()\r\n  \r\n  return {\r\n    globalState: globalStats,\r\n    getGlobalStats: methods.getAnimationStats,\r\n    isAllAnimationsLoaded: methods.isAllAnimationsLoaded,\r\n    preloadAnimation: methods.loadAnimationData,\r\n    preloadAnimations: methods.preloadAnimations,\r\n    getAnimationFromCache: methods.getAnimationFromCache,\r\n    clearAnimationCache: methods.clearAnimationCache,\r\n    clearAllAnimationCache: methods.clearAllAnimationCache\r\n  }\r\n}\r\n\r\n// 预加载多个动画的辅助函数\r\nexport const preloadAnimations = async (urls, progressCallback) => {\r\n  const { preloadAnimations: preload } = useAnimationCache()\r\n  return await preload(urls, progressCallback)\r\n} "],"names":["ref","uni","preloadAnimations"],"mappings":"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"}