{"version":3,"file":"useAnimationCache.js","sources":["components/loading/useAnimationCache.js"],"sourcesContent":["import { ref } from 'vue'\r\n\r\n// 创建全局状态对象\r\nconst globalAnimationCache = new Map()\r\nconst globalStats = ref({\r\n  totalCached: 0,\r\n  totalLoaded: 0,\r\n  totalFailed: 0,\r\n  animations: []\r\n})\r\nconst globalLoading = ref(false)\r\n\r\n/**\r\n * 从URL中提取唯一键\r\n * @param {String} url - 动画URL\r\n * @returns {String} 唯一键\r\n */\r\nconst getAnimationKey = (url) => {\r\n  return url.split('/').pop().split('.')[0]\r\n}\r\n\r\n/**\r\n * 使用动画缓存功能\r\n * @returns {Object} 缓存相关的方法集合\r\n */\r\nexport const useAnimationCache = () => {\r\n  /**\r\n   * 检查动画是否已缓存\r\n   * @param {String} url - 动画URL\r\n   * @returns {Boolean} 是否已缓存\r\n   */\r\n  const isAnimationCached = (url) => {\r\n    return globalAnimationCache.has(url)\r\n  }\r\n  \r\n  /**\r\n   * 从缓存中获取动画数据\r\n   * @param {String} url - 动画URL\r\n   * @returns {Object|null} 动画数据或null\r\n   */\r\n  const getAnimationFromCache = (url) => {\r\n    return globalAnimationCache.get(url) || null\r\n  }\r\n  \r\n  /**\r\n   * 将动画数据存入缓存\r\n   * @param {String} url - 动画URL\r\n   * @param {Object} data - 动画数据\r\n   */\r\n  const saveAnimationToCache = (url, data) => {\r\n    globalAnimationCache.set(url, data)\r\n    \r\n    // 更新统计信息\r\n    const animIndex = globalStats.value.animations.findIndex(a => a.url === url)\r\n    if (animIndex === -1) {\r\n      globalStats.value.animations.push({\r\n        url,\r\n        key: getAnimationKey(url),\r\n        cached: true,\r\n        loadTime: Date.now()\r\n      })\r\n    } else {\r\n      globalStats.value.animations[animIndex].cached = true\r\n      globalStats.value.animations[animIndex].loadTime = Date.now()\r\n    }\r\n    \r\n    globalStats.value.totalCached = globalAnimationCache.size\r\n    \r\n    // 同时保存到本地存储，以便下次应用启动时可以恢复\r\n    try {\r\n      const key = `lottie_${getAnimationKey(url)}`\r\n      uni.setStorageSync(key, data)\r\n      console.log('动画数据已保存到本地存储', key)\r\n    } catch (e) {\r\n      console.error('保存到本地存储失败', e)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 恢复本地存储中的动画数据到缓存\r\n   * @param {String} url - 动画URL\r\n   * @returns {Boolean} 是否成功恢复\r\n   */\r\n  const restoreAnimationFromStorage = (url) => {\r\n    const key = `lottie_${getAnimationKey(url)}`\r\n    try {\r\n      const data = uni.getStorageSync(key)\r\n      if (data) {\r\n        globalAnimationCache.set(url, data)\r\n        \r\n        // 更新统计信息\r\n        const animIndex = globalStats.value.animations.findIndex(a => a.url === url)\r\n        if (animIndex === -1) {\r\n          globalStats.value.animations.push({\r\n            url,\r\n            key: getAnimationKey(url),\r\n            cached: true,\r\n            loadTime: Date.now(),\r\n            fromStorage: true\r\n          })\r\n        } else {\r\n          globalStats.value.animations[animIndex].cached = true\r\n          globalStats.value.animations[animIndex].loadTime = Date.now()\r\n          globalStats.value.animations[animIndex].fromStorage = true\r\n        }\r\n        \r\n        globalStats.value.totalCached = globalAnimationCache.size\r\n        \r\n        console.log('已从本地存储恢复动画数据到缓存', key)\r\n        return true\r\n      }\r\n    } catch (e) {\r\n      console.error('从本地存储恢复失败', e)\r\n    }\r\n    return false\r\n  }\r\n  \r\n  /**\r\n   * 加载动画数据\r\n   * @param {String} url - 动画URL\r\n   * @returns {Promise<Object>} 动画数据\r\n   */\r\n  const loadAnimationData = async (url) => {\r\n    if (globalLoading.value) {\r\n      console.log('已有加载任务正在进行')\r\n      return null\r\n    }\r\n    \r\n    globalLoading.value = true\r\n    \r\n    // 记录加载开始\r\n    const startTime = Date.now()\r\n    const animIndex = globalStats.value.animations.findIndex(a => a.url === url)\r\n    if (animIndex === -1) {\r\n      globalStats.value.animations.push({\r\n        url,\r\n        key: getAnimationKey(url),\r\n        cached: false,\r\n        loading: true,\r\n        startTime\r\n      })\r\n    } else {\r\n      globalStats.value.animations[animIndex].loading = true\r\n      globalStats.value.animations[animIndex].startTime = startTime\r\n    }\r\n    \r\n    // 首先检查内存缓存\r\n    if (isAnimationCached(url)) {\r\n      console.log('从内存缓存获取动画数据')\r\n      \r\n      // 更新统计信息\r\n      const idx = globalStats.value.animations.findIndex(a => a.url === url)\r\n      if (idx !== -1) {\r\n        globalStats.value.animations[idx].loading = false\r\n        globalStats.value.animations[idx].loadedFromCache = true\r\n        globalStats.value.animations[idx].loadTime = Date.now() - startTime\r\n      }\r\n      \r\n      globalLoading.value = false\r\n      return getAnimationFromCache(url)\r\n    }\r\n    \r\n    // 然后检查本地存储\r\n    if (restoreAnimationFromStorage(url)) {\r\n      console.log('从本地存储恢复动画数据')\r\n      \r\n      // 更新统计信息\r\n      const idx = globalStats.value.animations.findIndex(a => a.url === url)\r\n      if (idx !== -1) {\r\n        globalStats.value.animations[idx].loading = false\r\n        globalStats.value.animations[idx].loadedFromStorage = true\r\n        globalStats.value.animations[idx].loadTime = Date.now() - startTime\r\n      }\r\n      \r\n      globalStats.value.totalLoaded++\r\n      globalLoading.value = false\r\n      return getAnimationFromCache(url)\r\n    }\r\n    \r\n    // 最后从网络加载\r\n    console.log('从网络加载动画数据', url)\r\n    try {\r\n      const { data } = await uni.request({\r\n        url: url,\r\n        method: 'GET'\r\n      })\r\n      \r\n      // 保存到缓存\r\n      saveAnimationToCache(url, data)\r\n      \r\n      // 更新统计信息\r\n      const idx = globalStats.value.animations.findIndex(a => a.url === url)\r\n      if (idx !== -1) {\r\n        globalStats.value.animations[idx].loading = false\r\n        globalStats.value.animations[idx].loadedFromNetwork = true\r\n        globalStats.value.animations[idx].loadTime = Date.now() - startTime\r\n      }\r\n      \r\n      globalStats.value.totalLoaded++\r\n      globalLoading.value = false\r\n      return data\r\n    } catch (e) {\r\n      console.error('网络加载动画数据失败', e)\r\n      \r\n      // 更新统计信息\r\n      const idx = globalStats.value.animations.findIndex(a => a.url === url)\r\n      if (idx !== -1) {\r\n        globalStats.value.animations[idx].loading = false\r\n        globalStats.value.animations[idx].failed = true\r\n        globalStats.value.animations[idx].error = e.message || '未知错误'\r\n      }\r\n      \r\n      globalStats.value.totalFailed++\r\n      globalLoading.value = false\r\n      return null\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 清除特定动画的缓存\r\n   * @param {String} url - 动画URL\r\n   * @returns {Boolean} 是否成功清除\r\n   */\r\n  const clearAnimationCache = (url) => {\r\n    const key = `lottie_${getAnimationKey(url)}`\r\n    \r\n    try {\r\n      // 删除内存缓存\r\n      const deleted = globalAnimationCache.delete(url)\r\n      \r\n      // 删除本地存储\r\n      uni.removeStorageSync(key)\r\n      \r\n      // 更新统计信息\r\n      if (deleted) {\r\n        const idx = globalStats.value.animations.findIndex(a => a.url === url)\r\n        if (idx !== -1) {\r\n          globalStats.value.animations[idx].cached = false\r\n          globalStats.value.animations[idx].cleared = true\r\n          globalStats.value.animations[idx].clearTime = Date.now()\r\n        }\r\n        \r\n        globalStats.value.totalCached = globalAnimationCache.size\r\n      }\r\n      \r\n      return deleted\r\n    } catch (e) {\r\n      console.error('清除动画缓存失败', e)\r\n      return false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 清除所有动画缓存\r\n   */\r\n  const clearAllAnimationCache = () => {\r\n    try {\r\n      // 获取所有URL列表\r\n      const urls = Array.from(globalAnimationCache.keys())\r\n      \r\n      // 逐个清除\r\n      urls.forEach(url => {\r\n        clearAnimationCache(url)\r\n      })\r\n      \r\n      console.log('已清除所有动画缓存')\r\n      return true\r\n    } catch (e) {\r\n      console.error('清除所有动画缓存失败', e)\r\n      return false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取缓存统计信息\r\n   * @returns {Object} 统计信息\r\n   */\r\n  const getAnimationStats = () => {\r\n    return {\r\n      ...globalStats.value,\r\n      timestamp: Date.now()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 批量预加载动画\r\n   * @param {Array<String>} urls - 动画URL列表\r\n   * @param {Function} progressCallback - 进度回调函数\r\n   * @returns {Promise<Object>} 加载结果\r\n   */\r\n  const preloadAnimations = async (urls, progressCallback) => {\r\n    if (!urls || !Array.isArray(urls) || urls.length === 0) {\r\n      return { totalSuccess: 0, totalFailed: 0 }\r\n    }\r\n    \r\n    const total = urls.length\r\n    let completed = 0\r\n    let success = 0\r\n    let failed = 0\r\n    \r\n    // 创建进度跟踪对象\r\n    const progress = {\r\n      total,\r\n      completed,\r\n      success,\r\n      failed,\r\n      progress: 0\r\n    }\r\n    \r\n    // 逐个加载\r\n    for (const url of urls) {\r\n      try {\r\n        const result = await loadAnimationData(url)\r\n        completed++\r\n        \r\n        if (result) {\r\n          success++\r\n        } else {\r\n          failed++\r\n        }\r\n        \r\n        // 更新进度\r\n        progress.completed = completed\r\n        progress.success = success\r\n        progress.failed = failed\r\n        progress.progress = (completed / total) * 100\r\n        \r\n        // 调用进度回调\r\n        if (typeof progressCallback === 'function') {\r\n          progressCallback(progress)\r\n        }\r\n      } catch (e) {\r\n        console.error(`预加载动画失败: ${url}`, e)\r\n        completed++\r\n        failed++\r\n        \r\n        // 更新进度\r\n        progress.completed = completed\r\n        progress.failed = failed\r\n        progress.progress = (completed / total) * 100\r\n        \r\n        // 调用进度回调\r\n        if (typeof progressCallback === 'function') {\r\n          progressCallback(progress)\r\n        }\r\n      }\r\n    }\r\n    \r\n    return {\r\n      totalSuccess: success,\r\n      totalFailed: failed,\r\n      total\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 检查所有动画是否已加载\r\n   * @returns {Boolean} 是否所有动画都已加载\r\n   */\r\n  const isAllAnimationsLoaded = () => {\r\n    // 如果没有动画，返回true\r\n    if (globalStats.value.animations.length === 0) {\r\n      return true\r\n    }\r\n    \r\n    // 检查是否所有动画都已缓存\r\n    return globalStats.value.animations.every(a => a.cached && !a.loading)\r\n  }\r\n  \r\n  return {\r\n    isAnimationCached,\r\n    getAnimationFromCache,\r\n    saveAnimationToCache,\r\n    restoreAnimationFromStorage,\r\n    loadAnimationData,\r\n    clearAnimationCache,\r\n    clearAllAnimationCache,\r\n    getAnimationStats,\r\n    preloadAnimations,\r\n    isAllAnimationsLoaded,\r\n    globalStats\r\n  }\r\n}\r\n\r\n/**\r\n * 提供全局动画状态管理\r\n * @returns {Object} 全局动画状态和方法\r\n */\r\nexport const useGlobalAnimationState = () => {\r\n  // 直接使用单例模式返回\r\n  const methods = useAnimationCache()\r\n  \r\n  return {\r\n    globalState: globalStats,\r\n    getGlobalStats: methods.getAnimationStats,\r\n    isAllAnimationsLoaded: methods.isAllAnimationsLoaded,\r\n    preloadAnimation: methods.loadAnimationData,\r\n    preloadAnimations: methods.preloadAnimations,\r\n    getAnimationFromCache: methods.getAnimationFromCache,\r\n    clearAnimationCache: methods.clearAnimationCache,\r\n    clearAllAnimationCache: methods.clearAllAnimationCache\r\n  }\r\n}\r\n\r\n// 预加载多个动画的辅助函数\r\nexport const preloadAnimations = async (urls, progressCallback) => {\r\n  const { preloadAnimations: preload } = useAnimationCache()\r\n  return await preload(urls, progressCallback)\r\n} "],"names":["globalAnimationCache","globalStats","ref","globalLoading","getAnimationKey","url","useAnimationCache","isAnimationCached","getAnimationFromCache","saveAnimationToCache","data","animIndex","a","key","uni","e","restoreAnimationFromStorage","loadAnimationData","startTime","idx","clearAnimationCache","deleted","urls","progressCallback","total","completed","success","failed","progress","result","useGlobalAnimationState","methods","preloadAnimations","preload"],"mappings":"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"}