{"version":3,"file":"transmision.js","sources":["components/LottieAnimation/transmision.js"],"sourcesContent":["function transformJSONToJS(inputJson) {\r\n    // 解析输入JSON（如果是字符串形式）\r\n    const data = typeof inputJson === 'string' ? JSON.parse(inputJson) : inputJson;\r\n\r\n    // 递归处理对象转换\r\n    const processObjects = (obj) => {\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(item => processObjects(item));\r\n        } else if (obj && typeof obj === 'object') {\r\n            // 检查是否是需要处理的对象\r\n            if ('u' in obj && 'p' in obj && 'e' in obj) {\r\n                const newPath = `${obj.u}${obj.p}`.replace(/\\/\\//g, '/'); // 处理可能的双斜杠\r\n                return {\r\n                    ...obj,\r\n                    u: \"\",\r\n                    p: `require(\"./${newPath}\")`, // 直接生成require语句字符串\r\n                    e: 1\r\n                };\r\n            }\r\n            // 递归处理嵌套对象\r\n            return Object.fromEntries(\r\n                Object.entries(obj).map(([key, value]) => [key, processObjects(value)])\r\n            );\r\n        }\r\n        return obj;\r\n    };\r\n\r\n    // 生成JavaScript代码字符串\r\n    const generateJSCode = (processedData) => {\r\n        const stringify = (value) => {\r\n            if (Array.isArray(value)) {\r\n                return `[${value.map(stringify).join(', ')}]`;\r\n            }\r\n            if (value && typeof value === 'object') {\r\n                const entries = Object.entries(value)\r\n                    .map(([k, v]) => `${k}: ${stringify(v)}`)\r\n                    .join(', ');\r\n                return `{ ${entries} }`;\r\n            }\r\n            // 特殊处理require语句（保持原始字符串形式）\r\n            if (typeof value === 'string' && value.startsWith('require')) {\r\n                return value;\r\n            }\r\n            return JSON.stringify(value);\r\n        };\r\n\r\n        return `module.exports = ${stringify(processedData)};`;\r\n    };\r\n\r\n    // 执行转换并生成最终代码\r\n    const processedData = processObjects(data);\r\n    return generateJSCode(processedData);\r\n}\r\n\r\nexport default transformJSONToJS;"],"names":["processedData"],"mappings":";AAAA,SAAS,kBAAkB,WAAW;AAElC,QAAM,OAAO,OAAO,cAAc,WAAW,KAAK,MAAM,SAAS,IAAI;AAGrE,QAAM,iBAAiB,CAAC,QAAQ;AAC5B,QAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,aAAO,IAAI,IAAI,UAAQ,eAAe,IAAI,CAAC;AAAA,IAC9C,WAAU,OAAO,OAAO,QAAQ,UAAU;AAEvC,UAAI,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AACxC,cAAM,UAAU,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,QAAQ,SAAS,GAAG;AACvD,eAAO;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG,cAAc,OAAO;AAAA;AAAA,UACxB,GAAG;AAAA,QACvB;AAAA,MACa;AAED,aAAO,OAAO;AAAA,QACV,OAAO,QAAQ,GAAG,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,eAAe,KAAK,CAAC,CAAC;AAAA,MACtF;AAAA,IACS;AACD,WAAO;AAAA,EACf;AAGI,QAAM,iBAAiB,CAACA,mBAAkB;AACtC,UAAM,YAAY,CAAC,UAAU;AACzB,UAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,eAAO,IAAI,MAAM,IAAI,SAAS,EAAE,KAAK,IAAI,CAAC;AAAA,MAC7C;AACD,UAAI,SAAS,OAAO,UAAU,UAAU;AACpC,cAAM,UAAU,OAAO,QAAQ,KAAK,EAC/B,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,UAAU,CAAC,CAAC,EAAE,EACvC,KAAK,IAAI;AACd,eAAO,KAAK,OAAO;AAAA,MACtB;AAED,UAAI,OAAO,UAAU,YAAY,MAAM,WAAW,SAAS,GAAG;AAC1D,eAAO;AAAA,MACV;AACD,aAAO,KAAK,UAAU,KAAK;AAAA,IACvC;AAEQ,WAAO,oBAAoB,UAAUA,cAAa,CAAC;AAAA,EAC3D;AAGI,QAAM,gBAAgB,eAAe,IAAI;AACzC,SAAO,eAAe,aAAa;AACvC;;"}