{"version":3,"file":"mockData.js","sources":["pagesChat/common/mockData.js"],"sourcesContent":["import { MESSAGE_TYPE, MESSAGE_STATUS } from './enums.js';\r\n\r\n/**\r\n * 模拟用户数据\r\n * @type {Array<Object>}\r\n */\r\nexport const mockUsers = [\r\n  {\r\n    id: 1,\r\n    nickName: '张老师',\r\n    headImageThumb: '/static/image/defaultAvatar/teacher-man.png',\r\n    state: 1 // 在线状态\r\n  },\r\n  {\r\n    id: 2,\r\n    nickName: '李同学',\r\n    headImageThumb: '/static/image/defaultAvatar/student-woman.png',\r\n    state: 1\r\n  },\r\n  {\r\n    id: 3,\r\n    nickName: '王同学',\r\n    headImageThumb: '/static/image/defaultAvatar/student-man.png',\r\n    state: 0 // 离线\r\n  },\r\n  {\r\n    id: 4,\r\n    nickName: '赵老师',\r\n    headImageThumb: '/static/image/defaultAvatar/teacher-man.png',\r\n    state: 1\r\n  }\r\n];\r\n\r\n/**\r\n * 模拟群组数据\r\n * @type {Array<Object>}\r\n */\r\nexport const mockGroups = [\r\n  {\r\n    id: 101,\r\n    showGroupName: '高三一班班级群',\r\n    headImageThumb: '/static/image/defaultAvatar/teacher-man.png',\r\n    memberCount: 45,\r\n    members: [1, 2, 3, 4] // 成员ID列表\r\n  },\r\n  {\r\n    id: 102,\r\n    showGroupName: '教师交流群',\r\n    headImageThumb: '/static/image/defaultAvatar/teacher-woman.png',\r\n    memberCount: 18,\r\n    members: [1, 4] // 成员ID列表\r\n  }\r\n];\r\n\r\n/**\r\n * 生成随机消息ID\r\n * @returns {number}\r\n */\r\nconst generateMessageId = () => {\r\n  return Math.floor(Math.random() * 10000) + 1000;\r\n};\r\n\r\n/**\r\n * 创建文本消息\r\n * @param {number} id - 消息ID\r\n * @param {number} senderId - 发送者ID\r\n * @param {string} content - 消息内容\r\n * @param {number} sendTime - 发送时间\r\n * @param {boolean} selfSend - 是否自己发送\r\n * @returns {Object} 消息对象\r\n */\r\nconst createTextMessage = (id, senderId, content, sendTime, selfSend) => {\r\n  return {\r\n    id: id,\r\n    tmpId: 'tmp_' + id,\r\n    sendId: senderId,\r\n    content: content,\r\n    sendTime: sendTime,\r\n    selfSend: selfSend,\r\n    type: MESSAGE_TYPE.TEXT,\r\n    status: selfSend ? MESSAGE_STATUS.SENDED : MESSAGE_STATUS.READED\r\n  };\r\n};\r\n\r\n/**\r\n * 创建图片消息\r\n * @param {number} id - 消息ID\r\n * @param {number} senderId - 发送者ID\r\n * @param {number} sendTime - 发送时间\r\n * @param {boolean} selfSend - 是否自己发送\r\n * @returns {Object} 消息对象\r\n */\r\nconst createImageMessage = (id, senderId, sendTime, selfSend) => {\r\n  // 使用指定的默认头像图片作为聊天图片\r\n  const imageUrl = '/static/image/defaultAvatar/student-man.png';\r\n  const data = {\r\n    originUrl: imageUrl,\r\n    thumbUrl: imageUrl\r\n  };\r\n  \r\n  return {\r\n    id: id,\r\n    tmpId: 'tmp_' + id,\r\n    sendId: senderId,\r\n    content: JSON.stringify(data),\r\n    sendTime: sendTime,\r\n    selfSend: selfSend,\r\n    type: MESSAGE_TYPE.IMAGE,\r\n    loadStatus: 'ok',\r\n    status: selfSend ? MESSAGE_STATUS.SENDED : MESSAGE_STATUS.READED\r\n  };\r\n};\r\n\r\n/**\r\n * 创建文件消息\r\n * @param {number} id - 消息ID\r\n * @param {number} senderId - 发送者ID\r\n * @param {number} sendTime - 发送时间\r\n * @param {boolean} selfSend - 是否自己发送\r\n * @returns {Object} 消息对象\r\n */\r\nconst createFileMessage = (id, senderId, sendTime, selfSend) => {\r\n  // 使用指定的PDF文件\r\n  const data = {\r\n    name: '2351795-张腾-第五章.pdf',\r\n    size: '3.5MB',\r\n    url: 'C:\\\\Users\\\\19945\\\\Desktop\\\\2351795-张腾-第五章.pdf'\r\n  };\r\n  \r\n  return {\r\n    id: id,\r\n    tmpId: 'tmp_' + id,\r\n    sendId: senderId,\r\n    content: JSON.stringify(data),\r\n    sendTime: sendTime,\r\n    selfSend: selfSend,\r\n    type: MESSAGE_TYPE.FILE,\r\n    loadStatus: 'ok',\r\n    status: selfSend ? MESSAGE_STATUS.SENDED : MESSAGE_STATUS.READED\r\n  };\r\n};\r\n\r\n/**\r\n * 创建语音消息\r\n * @param {number} id - 消息ID\r\n * @param {number} senderId - 发送者ID\r\n * @param {number} sendTime - 发送时间\r\n * @param {boolean} selfSend - 是否自己发送\r\n * @returns {Object} 消息对象\r\n */\r\nconst createAudioMessage = (id, senderId, sendTime, selfSend) => {\r\n  // 模拟语音数据\r\n  const data = {\r\n    url: 'https://example.com/audio.mp3',\r\n    duration: 15 // 15秒语音\r\n  };\r\n  \r\n  return {\r\n    id: id,\r\n    tmpId: 'tmp_' + id,\r\n    sendId: senderId,\r\n    content: JSON.stringify(data),\r\n    sendTime: sendTime,\r\n    selfSend: selfSend,\r\n    type: MESSAGE_TYPE.AUDIO,\r\n    loadStatus: 'ok',\r\n    status: selfSend ? MESSAGE_STATUS.SENDED : MESSAGE_STATUS.READED\r\n  };\r\n};\r\n\r\n/**\r\n * 创建提示类消息\r\n * @param {number} sendTime - 发送时间\r\n * @returns {Object} 消息对象\r\n */\r\nconst createTimeTipMessage = (sendTime) => {\r\n  return {\r\n    id: generateMessageId(),\r\n    sendTime: sendTime,\r\n    type: MESSAGE_TYPE.TIP_TIME\r\n  };\r\n};\r\n\r\n/**\r\n * 生成模拟消息\r\n * @param {number} count - 要生成的消息数量\r\n * @param {boolean} selfSend - 是否为自己发送的消息\r\n * @param {number} senderId - 发送者ID\r\n * @returns {Array<Object>}\r\n */\r\nconst generateMessages = (count, selfSend, senderId) => {\r\n  const messages = [];\r\n  const now = new Date().getTime();\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    const messageId = generateMessageId();\r\n    const sendTime = now - (count - i) * 5 * 60 * 1000; // 每条消息间隔5分钟\r\n    \r\n    // 每10条消息插入一个时间提示\r\n    if (i % 10 === 0) {\r\n      messages.push(createTimeTipMessage(sendTime));\r\n    }\r\n    \r\n    // 根据索引生成不同类型的消息\r\n    if (i % 5 === 0) { // 每5条消息插入一张图片\r\n      messages.push(createImageMessage(messageId, senderId, sendTime, selfSend));\r\n    } else if (i % 8 === 0) { // 每8条消息插入一个文件\r\n      messages.push(createFileMessage(messageId, senderId, sendTime, selfSend));\r\n    // } else if (i % 12 === 0) { // 每12条消息插入一条语音\r\n    //   messages.push(createAudioMessage(messageId, senderId, sendTime, selfSend));\r\n    } else { // 其他为文本消息\r\n      let content = '';\r\n      if (i % 3 === 0) {\r\n        content = `这是第${i+1}条测试消息，包括删除、撤回等操作功能测试`;\r\n      } else if (i % 7 === 0) {\r\n        content = `请问老师，这道题应该怎么解？`;\r\n      } else {\r\n        content = `这是一条普通的聊天消息，用于测试聊天界面显示效果，消息序号:${i+1}`;\r\n      }\r\n      messages.push(createTextMessage(messageId, senderId, content, sendTime, selfSend));\r\n    }\r\n  }\r\n  \r\n  return messages;\r\n};\r\n\r\n/**\r\n * 生成复杂的群聊消息\r\n * @param {number} count - 消息数量\r\n * @param {Array} members - 群成员ID\r\n * @returns {Array<Object>} 消息数组\r\n */\r\nconst generateGroupMessages = (count, members) => {\r\n  const messages = [];\r\n  const now = new Date().getTime();\r\n  let messageCount = 0;\r\n  \r\n  for (let i = 0; i < count; i++) {\r\n    // 随机选择发送者\r\n    const senderIndex = Math.floor(Math.random() * members.length);\r\n    const senderId = members[senderIndex];\r\n    // 是否是自己发送的消息（用户ID为1的是当前登录用户）\r\n    const selfSend = senderId === 1;\r\n    \r\n    const messageId = generateMessageId();\r\n    const sendTime = now - (count - i) * 5 * 60 * 1000;\r\n    \r\n    // 每8条消息插入一个时间提示\r\n    if (messageCount % 8 === 0) {\r\n      messages.push(createTimeTipMessage(sendTime));\r\n    }\r\n    \r\n    // 根据规则生成不同类型的消息\r\n    if (messageCount % 5 === 0) {\r\n      messages.push(createImageMessage(messageId, senderId, sendTime, selfSend));\r\n    } else if (messageCount % 9 === 0) {\r\n      messages.push(createFileMessage(messageId, senderId, sendTime, selfSend));\r\n    // } else if (messageCount % 11 === 0) {\r\n    //   messages.push(createAudioMessage(messageId, senderId, sendTime, selfSend));\r\n    } else {\r\n      // 根据发送者不同生成不同的文本内容\r\n      let content = '';\r\n      if (senderId === 1) { // 张老师\r\n        if (messageCount % 3 === 0) {\r\n          content = '同学们，请注意提交作业截止时间是本周五晚上8点';\r\n        } else {\r\n          content = '有问题可以随时在群里提出来讨论';\r\n        }\r\n      } else if (senderId === 2) { // 李同学\r\n        if (messageCount % 4 === 0) {\r\n          content = '老师，我已经完成作业了，请查收';\r\n        } else {\r\n          content = '这道题我有疑问，可以详细解释一下吗？';\r\n        }\r\n      } else if (senderId === 3) { // 王同学\r\n        content = '好的，我明白了，谢谢老师';\r\n      } else { // 赵老师\r\n        content = '张老师说得对，同学们要按时完成';\r\n      }\r\n      \r\n      messages.push(createTextMessage(messageId, senderId, content, sendTime, selfSend));\r\n    }\r\n    \r\n    messageCount++;\r\n  }\r\n  \r\n  return messages;\r\n};\r\n\r\n/**\r\n * 模拟聊天会话数据\r\n * @type {Array<Object>}\r\n */\r\nexport const mockChats = [\r\n  // 私聊会话1 - 李同学\r\n  {\r\n    targetId: 2, // 对方用户ID\r\n    type: 'PRIVATE',\r\n    showName: '李同学',\r\n    headImage: '/static/image/defaultAvatar/student-woman.png',\r\n    lastContent: '好的，明天见！',\r\n    lastSendTime: new Date().getTime() - 10 * 60 * 1000, // 10分钟前\r\n    unreadCount: 0,\r\n    messages: generateMessages(25, false, 2),\r\n    atMe: false,\r\n    atAll: false,\r\n    stored: false,\r\n    lastTimeTip: new Date().getTime() - 2 * 60 * 60 * 1000 // 2小时前\r\n  },\r\n  \r\n  // 私聊会话2 - 王同学\r\n  {\r\n    targetId: 3,\r\n    type: 'PRIVATE',\r\n    showName: '王同学',\r\n    headImage: '/static/image/defaultAvatar/student-man.png',\r\n    lastContent: '请问作业什么时候交？',\r\n    lastSendTime: new Date().getTime() - 30 * 60 * 1000, // 30分钟前\r\n    unreadCount: 2,\r\n    messages: generateMessages(20, true, 1), // 自己发送的消息\r\n    atMe: false,\r\n    atAll: false,\r\n    stored: false,\r\n    lastTimeTip: new Date().getTime() - 3 * 60 * 60 * 1000 // 3小时前\r\n  },\r\n  \r\n  // 私聊会话3 - 赵老师\r\n  {\r\n    targetId: 4,\r\n    type: 'PRIVATE',\r\n    showName: '赵老师',\r\n    headImage: '/static/image/defaultAvatar/teacher-man.png',\r\n    lastContent: '下周一有教研会议',\r\n    lastSendTime: new Date().getTime() - 45 * 60 * 1000, // 45分钟前\r\n    unreadCount: 1,\r\n    messages: generateMessages(15, false, 4),\r\n    atMe: false,\r\n    atAll: false,\r\n    stored: false,\r\n    lastTimeTip: new Date().getTime() - 5 * 60 * 60 * 1000 // 5小时前\r\n  },\r\n  \r\n  // 群聊会话1 - 高三一班班级群\r\n  {\r\n    targetId: 101,\r\n    type: 'GROUP',\r\n    showName: '高三一班班级群',\r\n    headImage: '/static/image/defaultAvatar/teacher-man.png',\r\n    lastContent: '[图片]',\r\n    lastSendTime: new Date().getTime() - 5 * 60 * 1000, // 5分钟前\r\n    unreadCount: 5,\r\n    messages: generateGroupMessages(30, [1, 2, 3, 4]),\r\n    atMe: true,\r\n    atAll: false,\r\n    stored: false,\r\n    lastTimeTip: new Date().getTime() - 1 * 60 * 60 * 1000 // 1小时前\r\n  },\r\n  \r\n  // 群聊会话2 - 教师交流群\r\n  {\r\n    targetId: 102,\r\n    type: 'GROUP',\r\n    showName: '教师交流群',\r\n    headImage: '/static/image/defaultAvatar/teacher-woman.png',\r\n    lastContent: '下周一开会讨论期末考试安排',\r\n    lastSendTime: new Date().getTime() - 2 * 60 * 60 * 1000, // 2小时前\r\n    unreadCount: 0,\r\n    messages: generateGroupMessages(20, [1, 4]),\r\n    atMe: false,\r\n    atAll: true,\r\n    stored: false,\r\n    lastTimeTip: new Date().getTime() - 4 * 60 * 60 * 1000 // 4小时前\r\n  }\r\n];\r\n\r\n/**\r\n * 初始化模拟数据，返回符合chatStore格式的数据\r\n * @returns {Object}\r\n */\r\nexport function initMockChatData() {\r\n  return {\r\n    chats: JSON.parse(JSON.stringify(mockChats)), // 深拷贝，避免修改原始数据\r\n    privateMsgMaxId: 5000,\r\n    groupMsgMaxId: 6000\r\n  };\r\n}\r\n\r\n/**\r\n * 获取模拟用户（当前登录用户）\r\n * @returns {Object}\r\n */\r\nexport function getMockCurrentUser() {\r\n  return {\r\n    id: 1,\r\n    nickName: '张老师',\r\n    headImageThumb: '/static/image/defaultAvatar/teacher-man.png',\r\n    state: 1\r\n  };\r\n}\r\n\r\n/**\r\n * 根据ID获取模拟用户\r\n * @param {number} userId \r\n * @returns {Object|null}\r\n */\r\nexport function getMockUserById(userId) {\r\n  return mockUsers.find(user => user.id === userId) || null;\r\n}\r\n\r\n/**\r\n * 根据ID获取模拟群组\r\n * @param {number} groupId \r\n * @returns {Object|null}\r\n */\r\nexport function getMockGroupById(groupId) {\r\n  return mockGroups.find(group => group.id === groupId) || null;\r\n} "],"names":["mockUsers","mockGroups","generateMessageId","createTextMessage","id","senderId","content","sendTime","selfSend","MESSAGE_TYPE","MESSAGE_STATUS","createImageMessage","imageUrl","data","createFileMessage","createTimeTipMessage","generateMessages","count","messages","now","i","messageId","generateGroupMessages","members","messageCount","senderIndex","mockChats","initMockChatData","getMockCurrentUser","getMockUserById","userId","user","getMockGroupById","groupId","group"],"mappings":"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"}