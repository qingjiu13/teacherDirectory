{"version":3,"file":"mockChatService.js","sources":["pagesChat/common/mockChatService.js"],"sourcesContent":["import { initMockChatData, getMockUserById, getMockGroupById, getMockCurrentUser } from './mockData.js';\r\nimport { MESSAGE_TYPE, MESSAGE_STATUS } from './enums.js';\r\n\r\n/**\r\n * 模拟聊天服务类\r\n */\r\nclass MockChatService {\r\n  constructor() {\r\n    // 初始化模拟数据\r\n    this.chatData = initMockChatData();\r\n    this.currentUser = getMockCurrentUser();\r\n    this.eventListeners = {};\r\n  }\r\n\r\n  /**\r\n   * 获取所有聊天会话\r\n   * @returns {Promise<Object>} 包含会话列表和最大消息ID的对象\r\n   */\r\n  getChats() {\r\n    return new Promise((resolve) => {\r\n      // 模拟网络延迟\r\n      setTimeout(() => {\r\n        resolve(this.chatData);\r\n      }, 300);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取指定会话的消息\r\n   * @param {string} type 会话类型 ('PRIVATE'|'GROUP')\r\n   * @param {number} targetId 目标ID\r\n   * @returns {Promise<Array>} 消息列表\r\n   */\r\n  getMessages(type, targetId) {\r\n    return new Promise((resolve) => {\r\n      const chat = this.chatData.chats.find(\r\n        (c) => c.type === type && c.targetId === targetId\r\n      );\r\n      \r\n      setTimeout(() => {\r\n        if (chat) {\r\n          resolve(chat.messages);\r\n        } else {\r\n          resolve([]);\r\n        }\r\n      }, 300);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 发送消息\r\n   * @param {Object} message 消息对象\r\n   * @param {Object} chatInfo 会话信息\r\n   * @returns {Promise<Object>} 发送结果\r\n   */\r\n  sendMessage(message, chatInfo) {\r\n    return new Promise((resolve) => {\r\n      // 查找或创建会话\r\n      let chat = this.chatData.chats.find(\r\n        (c) => c.type === chatInfo.type && c.targetId === chatInfo.targetId\r\n      );\r\n      \r\n      if (!chat) {\r\n        chat = {\r\n          targetId: chatInfo.targetId,\r\n          type: chatInfo.type,\r\n          showName: chatInfo.type === 'PRIVATE' \r\n            ? getMockUserById(chatInfo.targetId)?.nickName \r\n            : getMockGroupById(chatInfo.targetId)?.showGroupName,\r\n          headImage: chatInfo.type === 'PRIVATE'\r\n            ? getMockUserById(chatInfo.targetId)?.headImageThumb\r\n            : getMockGroupById(chatInfo.targetId)?.headImageThumb,\r\n          lastContent: \"\",\r\n          lastSendTime: new Date().getTime(),\r\n          unreadCount: 0,\r\n          messages: [],\r\n          atMe: false,\r\n          atAll: false,\r\n          stored: false\r\n        };\r\n        this.chatData.chats.unshift(chat);\r\n      }\r\n      \r\n      // 生成消息ID\r\n      const messageId = this.chatData.privateMsgMaxId + 1;\r\n      this.chatData.privateMsgMaxId = messageId;\r\n      \r\n      // 完善消息信息\r\n      message.id = messageId;\r\n      message.sendTime = new Date().getTime();\r\n      message.senderId = this.currentUser.id;\r\n      message.sendNickName = this.currentUser.nickName;\r\n      message.selfSend = true;\r\n      message.status = MESSAGE_STATUS.SENDED;\r\n      \r\n      // 更新会话信息\r\n      chat.lastContent = message.type === MESSAGE_TYPE.TEXT \r\n        ? message.content \r\n        : message.type === MESSAGE_TYPE.IMAGE \r\n          ? \"[图片]\" \r\n          : \"[文件]\";\r\n      chat.lastSendTime = message.sendTime;\r\n      chat.sendNickName = message.sendNickName;\r\n      \r\n      // 插入消息\r\n      chat.messages.push(message);\r\n      \r\n      // 将会话移到顶部\r\n      const chatIndex = this.chatData.chats.indexOf(chat);\r\n      if (chatIndex > 0) {\r\n        this.chatData.chats.splice(chatIndex, 1);\r\n        this.chatData.chats.unshift(chat);\r\n      }\r\n      \r\n      // 触发消息发送事件\r\n      this.triggerEvent('messageSent', { message, chatInfo });\r\n      \r\n      setTimeout(() => {\r\n        resolve({ success: true, message });\r\n      }, 300);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除消息\r\n   * @param {Object} messageInfo 消息信息\r\n   * @param {Object} chatInfo 会话信息\r\n   * @returns {Promise<Object>} 删除结果\r\n   */\r\n  deleteMessage(messageInfo, chatInfo) {\r\n    return new Promise((resolve) => {\r\n      const chat = this.chatData.chats.find(\r\n        (c) => c.type === chatInfo.type && c.targetId === chatInfo.targetId\r\n      );\r\n      \r\n      if (!chat) {\r\n        resolve({ success: false, error: '会话不存在' });\r\n        return;\r\n      }\r\n      \r\n      const messageIndex = chat.messages.findIndex(\r\n        (m) => m.id === messageInfo.id || (m.tmpId && m.tmpId === messageInfo.tmpId)\r\n      );\r\n      \r\n      if (messageIndex !== -1) {\r\n        // 删除消息\r\n        chat.messages.splice(messageIndex, 1);\r\n        \r\n        // 更新最后一条消息内容\r\n        if (chat.messages.length > 0) {\r\n          const lastMsg = chat.messages[chat.messages.length - 1];\r\n          chat.lastContent = lastMsg.type === MESSAGE_TYPE.TEXT \r\n            ? lastMsg.content \r\n            : lastMsg.type === MESSAGE_TYPE.IMAGE \r\n              ? \"[图片]\" \r\n              : \"[文件]\";\r\n          chat.lastSendTime = lastMsg.sendTime;\r\n        } else {\r\n          chat.lastContent = \"\";\r\n        }\r\n        \r\n        // 触发消息删除事件\r\n        this.triggerEvent('messageDeleted', { messageInfo, chatInfo });\r\n        \r\n        setTimeout(() => {\r\n          resolve({ success: true });\r\n        }, 300);\r\n      } else {\r\n        resolve({ success: false, error: '消息不存在' });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 撤回消息\r\n   * @param {Object} messageInfo 消息信息\r\n   * @param {Object} chatInfo 会话信息\r\n   * @returns {Promise<Object>} 撤回结果\r\n   */\r\n  recallMessage(messageInfo, chatInfo) {\r\n    return new Promise((resolve) => {\r\n      const chat = this.chatData.chats.find(\r\n        (c) => c.type === chatInfo.type && c.targetId === chatInfo.targetId\r\n      );\r\n      \r\n      if (!chat) {\r\n        resolve({ success: false, error: '会话不存在' });\r\n        return;\r\n      }\r\n      \r\n      const message = chat.messages.find(\r\n        (m) => m.id === messageInfo.id || (m.tmpId && m.tmpId === messageInfo.tmpId)\r\n      );\r\n      \r\n      if (message) {\r\n        // 修改消息为撤回状态\r\n        const originalContent = message.content;\r\n        message.status = MESSAGE_STATUS.RECALL;\r\n        message.content = `${message.selfSend ? '你' : message.sendNickName}撤回了一条消息`;\r\n        message.type = MESSAGE_TYPE.TIP_TEXT;\r\n        \r\n        // 更新最后一条消息内容\r\n        if (chat.messages[chat.messages.length - 1].id === message.id) {\r\n          chat.lastContent = message.content;\r\n        }\r\n        \r\n        // 触发消息撤回事件\r\n        this.triggerEvent('messageRecalled', { \r\n          messageInfo: { ...messageInfo, content: originalContent }, \r\n          chatInfo \r\n        });\r\n        \r\n        setTimeout(() => {\r\n          resolve({ success: true });\r\n        }, 300);\r\n      } else {\r\n        resolve({ success: false, error: '消息不存在' });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 清空会话消息\r\n   * @param {Object} chatInfo 会话信息\r\n   * @returns {Promise<Object>} 清空结果\r\n   */\r\n  clearMessages(chatInfo) {\r\n    return new Promise((resolve) => {\r\n      const chat = this.chatData.chats.find(\r\n        (c) => c.type === chatInfo.type && c.targetId === chatInfo.targetId\r\n      );\r\n      \r\n      if (!chat) {\r\n        resolve({ success: false, error: '会话不存在' });\r\n        return;\r\n      }\r\n      \r\n      chat.messages = [];\r\n      chat.lastContent = \"\";\r\n      chat.unreadCount = 0;\r\n      \r\n      // 触发会话清空事件\r\n      this.triggerEvent('messagesCleared', { chatInfo });\r\n      \r\n      setTimeout(() => {\r\n        resolve({ success: true });\r\n      }, 300);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除会话\r\n   * @param {Object} chatInfo 会话信息\r\n   * @returns {Promise<Object>} 删除结果\r\n   */\r\n  deleteChat(chatInfo) {\r\n    return new Promise((resolve) => {\r\n      const chatIndex = this.chatData.chats.findIndex(\r\n        (c) => c.type === chatInfo.type && c.targetId === chatInfo.targetId\r\n      );\r\n      \r\n      if (chatIndex !== -1) {\r\n        // 删除会话\r\n        this.chatData.chats.splice(chatIndex, 1);\r\n        \r\n        // 触发会话删除事件\r\n        this.triggerEvent('chatDeleted', { chatInfo });\r\n        \r\n        setTimeout(() => {\r\n          resolve({ success: true });\r\n        }, 300);\r\n      } else {\r\n        resolve({ success: false, error: '会话不存在' });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 添加事件监听器\r\n   * @param {string} event 事件名称\r\n   * @param {Function} callback 回调函数\r\n   */\r\n  addEventListener(event, callback) {\r\n    if (!this.eventListeners[event]) {\r\n      this.eventListeners[event] = [];\r\n    }\r\n    this.eventListeners[event].push(callback);\r\n  }\r\n\r\n  /**\r\n   * 移除事件监听器\r\n   * @param {string} event 事件名称\r\n   * @param {Function} callback 回调函数\r\n   */\r\n  removeEventListener(event, callback) {\r\n    if (this.eventListeners[event]) {\r\n      this.eventListeners[event] = this.eventListeners[event].filter(\r\n        (cb) => cb !== callback\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 触发事件\r\n   * @param {string} event 事件名称\r\n   * @param {Object} data 事件数据\r\n   * @private\r\n   */\r\n  triggerEvent(event, data) {\r\n    if (this.eventListeners[event]) {\r\n      this.eventListeners[event].forEach((callback) => {\r\n        callback(data);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst mockChatService = new MockChatService();\r\n\r\nexport default mockChatService; "],"names":["MockChatService","initMockChatData","getMockCurrentUser","resolve","type","targetId","chat","c","message","chatInfo","getMockUserById","getMockGroupById","messageId","MESSAGE_STATUS","MESSAGE_TYPE","chatIndex","messageInfo","messageIndex","m","lastMsg","originalContent","event","callback","cb","data","mockChatService"],"mappings":"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"}