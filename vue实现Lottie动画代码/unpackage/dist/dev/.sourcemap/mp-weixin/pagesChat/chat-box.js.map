{"version":3,"file":"chat-box.js","sources":["pagesChat/chat-box.vue","../../../HBuilderX/HBuilderX.4.45.2025010502/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXNDaGF0XGNoYXQtYm94LnZ1ZQ"],"sourcesContent":["<template>\r\n    <view class=\"chat-page\">\r\n      <Header :title=\"chatTitle\" :avatar=\"chatAvatar\" @back=\"goBack\" />\r\n  \r\n      <!-- 连接状态栏 -->\r\n      <view class=\"connection-status\" v-if=\"!isSocketOpen\">\r\n        <view class=\"status-info\">\r\n          <text class=\"status-text\">{{\r\n            isPolling ? \"轮询模式\" : \"连接已断开\"\r\n          }}</text>\r\n          <text class=\"status-detail\">{{\r\n            isPolling ? \"每5秒检查新消息\" : \"无法实时接收消息\"\r\n          }}</text>\r\n        </view>\r\n        <button class=\"reconnect-btn\" @click=\"manualReconnect\">重新连接</button>\r\n      </view>\r\n  \r\n      <!-- 消息列表 -->\r\n      <scroll-view\r\n        class=\"message-list-container\"\r\n        scroll-y\r\n        :scroll-top=\"scrollTop\"\r\n        :scroll-with-animation=\"true\"\r\n        :style=\"{ height: messageListHeight + 'px' }\"\r\n      >\r\n        <view class=\"message-list-content\">\r\n          <view v-for=\"item in messageListWithTimeTips\" :key=\"item.id\">\r\n            <view v-if=\"item.type === 'time-tip'\" class=\"time-tip-bar\">\r\n              {{ toTimeText(item.time) }}\r\n            </view>\r\n            <view\r\n              v-else\r\n              :class=\"[\r\n                'message-row',\r\n                { self: Number(item.senderId) === Number(selfId) },\r\n              ]\"\r\n            >\r\n              <ChatMessageItem\r\n                :message=\"item\"\r\n                :is-self=\"Number(item.senderId) === Number(selfId)\"\r\n              />\r\n            </view>\r\n          </view>\r\n        </view>\r\n      </scroll-view>\r\n  \r\n      <!-- 底部输入栏 -->\r\n      <view\r\n        class=\"input-bar-container\"\r\n        :style=\"{ bottom: keyboardHeight + 'px' }\"\r\n      >\r\n        <view class=\"input-bar\">\r\n          <view class=\"textarea-container\">\r\n            <scroll-view\r\n              scroll-y\r\n              :show-scrollbar=\"false\"\r\n              class=\"textarea-scroll-view\"\r\n            >\r\n              <u--textarea\r\n                class=\"input-textarea\"\r\n                v-model=\"textInput\"\r\n                placeholder=\"请输入内容\"\r\n                :showConfirmBar=\"false\"\r\n                autoHeight\r\n                :adjustPosition=\"false\"\r\n                border=\"surround\"\r\n                :maxlength=\"500\"\r\n                @focus=\"onInputFocus\"\r\n                @blur=\"onInputBlur\"\r\n              />\r\n            </scroll-view>\r\n          </view>\r\n          <!-- 根据是否有文本输入，切换图标和发送按钮 -->\r\n          <view class=\"action-wrapper\">\r\n            <button\r\n              v-if=\"textInput.length > 0\"\r\n              class=\"send-button\"\r\n              @click=\"sendSocketMessage\"\r\n              @longpress=\"showDebugInfo\"\r\n            >\r\n              发送\r\n            </button>\r\n            <text\r\n              v-else\r\n              class=\"iconfont icon-add-bold icon\"\r\n              @click=\"handleMore\"\r\n              @longpress=\"showDebugInfo\"\r\n            ></text>\r\n          </view>\r\n        </view>\r\n      </view>\r\n    </view>\r\n  </template>\r\n  \r\n  <script setup lang=\"uts\">\r\n  import { ref, computed, watch } from \"vue\";\r\n  import { onLoad, onShow, onUnload } from \"@dcloudio/uni-app\";\r\n  import ChatMessageItem from \"./components/chat-message-item/chat-message-item.vue\";\r\n  import UNI_APP from \"./env.js\";\r\n  import Header from \"@/components/navigationTitleBar/header.vue\";\r\n  import { getCurrentToken, getCurrentUserId } from \"@/store/user/JWT.js\";\r\n  import pollingManager from \"@/utils/pollingManager.js\";\r\n  import websocketManager from \"@/utils/websocketManager.js\";\r\n  import { toTimeText } from \"./common/date.js\";\r\n  \r\n  // --- 数据定义 ---\r\n  const chatId = ref(null);\r\n  const selfId = ref(null);\r\n  const chatTitle = ref(\"\");\r\n  const chatAvatar = ref(\"\");\r\n  const messages = ref([]);\r\n  const textInput = ref(\"\");\r\n  const scrollTop = ref(0);\r\n  const keyboardHeight = ref(0);\r\n  const statusBarHeight = ref(0);\r\n  const windowHeight = ref(0);\r\n  const navbarHeight = ref(44); // 添加导航栏高度，默认44px\r\n  \r\n  // 客服ID\r\n  const ADMIN_ID = 1;\r\n  \r\n  // 添加轮询相关变量\r\n  const pollingInterval = ref(null);\r\n  const lastMessageId = ref(0);\r\n  const isPolling = computed(() => pollingManager.getStatus().isPolling);\r\n  \r\n  // WebSocket 相关变量\r\n  const isSocketOpen = ref(false);\r\n  let socketTask = null;\r\n  \r\n  // 计算消息列表高度\r\n  const messageListHeight = computed(() => {\r\n    return windowHeight.value - navbarHeight.value - 140 - keyboardHeight.value;\r\n  });\r\n  \r\n  // --- 本地缓存相关 ---\r\n  function getCacheKey() {\r\n    return `chat_messages_${selfId.value}_${chatId.value}`;\r\n  }\r\n  \r\n  function saveMessagesToCache() {\r\n    try {\r\n      const messagesToSave = messages.value.filter(\r\n        (msg) => msg.status === \"confirmed\" || msg.isLocal\r\n      );\r\n      const maxCacheSize = 100;\r\n      const messagesToCache = messagesToSave.slice(-maxCacheSize);\r\n      const cacheKey = getCacheKey();\r\n      uni.setStorageSync(cacheKey, messagesToCache);\r\n    } catch (error) {}\r\n  }\r\n  \r\n  function loadMessagesFromCache() {\r\n    const cacheKey = getCacheKey();\r\n    const cached = uni.getStorageSync(cacheKey) || [];\r\n    if (cached.length === 0 && Number(chatId.value) === 1) {\r\n      // 客服会话且无消息，插入欢迎语\r\n      messages.value.splice(0, messages.value.length, {\r\n        id: \"welcome\",\r\n        senderId: 1,\r\n        receiverId: selfId.value,\r\n        content: \"您好，我是小助手，有什么可以帮到您？\",\r\n        messageType: 1,\r\n        createdAt: new Date().toISOString(),\r\n        isSelf: false,\r\n        status: \"confirmed\",\r\n        isLocal: false,\r\n      });\r\n    } else {\r\n      messages.value.splice(0, messages.value.length, ...cached);\r\n    }\r\n  }\r\n  \r\n  // --- 键盘事件处理 ---\r\n  const onInputFocus = (e) => {\r\n    // 键盘弹出时的处理\r\n    setTimeout(() => {\r\n      scrollToBottom();\r\n    }, 300);\r\n  };\r\n  \r\n  const onInputBlur = () => {\r\n    // 键盘收起时的处理\r\n    keyboardHeight.value = 0;\r\n  };\r\n  \r\n  // --- 键盘监听 ---\r\n  const initKeyboardListener = () => {\r\n    // 监听键盘高度变化\r\n    uni.onKeyboardHeightChange((res) => {\r\n      keyboardHeight.value = res.height || 0;\r\n  \r\n      // 键盘弹出时滚动到底部\r\n      if (res.height > 0) {\r\n        setTimeout(() => {\r\n          scrollToBottom();\r\n        }, 100);\r\n      }\r\n    });\r\n  };\r\n  \r\n  // --- 生命周期 ---\r\n  onLoad(async (options) => {\r\n    // 获取系统信息\r\n    const systemInfo = uni.getSystemInfoSync();\r\n    statusBarHeight.value = systemInfo.statusBarHeight || 0;\r\n    windowHeight.value = systemInfo.windowHeight;\r\n  \r\n    // 初始化键盘监听\r\n    initKeyboardListener();\r\n  \r\n    uni.__f__('log','at pagesChat/chat-box.vue:212',\"[调试] onLoad options:\", options);\r\n  \r\n    // 校验 chatId 参数\r\n    if (!options.id) {\r\n      uni.__f__('error','at pagesChat/chat-box.vue:216',\"[调试] 错误：onLoad 未接收到 chatId 参数！\");\r\n      uni.showToast({ title: \"参数错误\", icon: \"none\" });\r\n      setTimeout(() => uni.navigateBack(), 1500);\r\n      return;\r\n    }\r\n  \r\n    chatId.value = options.id;\r\n    selfId.value = Number(getCurrentUserId() || 1);\r\n    chatTitle.value = options.title ? decodeURIComponent(options.title) : \"\";\r\n    chatAvatar.value =\r\n      options.avatar || \"/static/image/defaultAvatar/student-man.png\";\r\n    uni.__f__('log','at pagesChat/chat-box.vue:227',\r\n      \"[调试] onLoad chatId:\",\r\n      chatId.value,\r\n      \"selfId:\",\r\n      selfId.value,\r\n      \"chatId类型:\",\r\n      typeof chatId.value\r\n    );\r\n  \r\n    // 拉取历史消息后，如果 chatTitle 还是空，就自动从消息里找\r\n    if (!chatTitle.value) {\r\n      // 找到第一条对方发来的消息\r\n      const otherMsg = messages.value.find(\r\n        (m) => m.senderId && m.senderId !== selfId.value && m.nickname\r\n      );\r\n      if (otherMsg && otherMsg.nickname) {\r\n        chatTitle.value = otherMsg.nickname;\r\n      }\r\n    }\r\n    if (!chatTitle.value) {\r\n      chatTitle.value = \"聊天\";\r\n    }\r\n  \r\n    // 先清空本地消息\r\n    messages.value.splice(0, messages.value.length);\r\n  \r\n    // 检查网络连接和token\r\n    const token = getCurrentToken();\r\n    uni.__f__('log','at pagesChat/chat-box.vue:255',\"[调试] 页面加载，检查配置:\", {\r\n      chatId: chatId.value,\r\n      chatIdType: typeof chatId.value,\r\n      selfId: selfId.value,\r\n      hasToken: !!token,\r\n      baseUrl: UNI_APP.BASE_URL,\r\n      wsUrl: UNI_APP.WS_URL,\r\n    });\r\n  \r\n    if (!token) {\r\n      uni.__f__('error','at pagesChat/chat-box.vue:265',\"[调试] 未找到token，无法建立连接\");\r\n      uni.showToast({ title: \"请先登录\", icon: \"none\" });\r\n      return;\r\n    }\r\n  \r\n    // 页面加载时读取缓存\r\n    loadMessagesFromCache();\r\n    uni.__f__('log','at pagesChat/chat-box.vue:272',\r\n      \"[调试] onLoad 缓存消息:\",\r\n      JSON.parse(JSON.stringify(messages.value))\r\n    );\r\n  \r\n    // 确保 chatId 有效后再加载历史消息\r\n    if (chatId.value) {\r\n      await loadChatHistory();\r\n    } else {\r\n      uni.__f__('error','at pagesChat/chat-box.vue:281',\"[调试] chatId 无效，跳过历史消息加载\");\r\n    }\r\n  \r\n    // 设置当前页面为chat-box\r\n    pollingManager.setCurrentPage(\"chat-box\");\r\n  \r\n    // 注册轮询回调\r\n    pollingManager.registerPollingCallback(\"chat-box\", checkNewMessages);\r\n  \r\n    // 确保 chatId 有效后再连接 WebSocket\r\n    if (chatId.value) {\r\n      connectWebSocket();\r\n    } else {\r\n      uni.__f__('error','at pagesChat/chat-box.vue:294',\"[调试] chatId 无效，跳过 WebSocket 连接\");\r\n    }\r\n  });\r\n  \r\n  onShow(() => {\r\n    uni.__f__('log','at pagesChat/chat-box.vue:299',\"[调试] onShow - 页面显示\");\r\n    // 设置当前页面为聊天页面\r\n    pollingManager.setCurrentPage(\"chat-box\");\r\n  \r\n    // 如果WebSocket断开，尝试重连\r\n    if (!isSocketOpen.value) {\r\n      uni.__f__('log','at pagesChat/chat-box.vue:305',\"[调试] onShow - WebSocket断开，尝试重连\");\r\n      setTimeout(() => {\r\n        connectWebSocket();\r\n      }, 1000);\r\n    }\r\n  });\r\n  \r\n  onUnload(() => {\r\n    uni.__f__('log','at pagesChat/chat-box.vue:313',\"[调试] onUnload - 页面卸载\");\r\n    // 注销轮询回调\r\n    pollingManager.unregisterPollingCallback(\"chat-box\");\r\n  \r\n    // 关闭WebSocket连接\r\n    closeWebSocket();\r\n  \r\n    // 清理缓存\r\n    saveMessagesToCache();\r\n  });\r\n  \r\n  // --- API 调用 ---\r\n  function getCurrentChatInfo() {\r\n    // chatId为对方id\r\n    const id = Number(chatId.value);\r\n    // 由于无法直接导入chats，这里返回空对象\r\n    // 如果需要获取聊天信息，可以通过API调用或本地存储获取\r\n    return {};\r\n  }\r\n  \r\n  const loadChatHistory = async () => {\r\n    try {\r\n      if (!chatId.value) return;\r\n      loadMessagesFromCache();\r\n      const token = getCurrentToken();\r\n      if (!token) return;\r\n      // 只用 chatId 作为目标用户，后端自动识别当前用户\r\n      uni.__f__('log','at pagesChat/chat-box.vue:340',\"[调试] 拉取历史消息参数:\", { targetUserId: chatId.value });\r\n      const response = await uni.request({\r\n        url: `${UNI_APP.BASE_URL}/yanshilu/chatMessage/history/${chatId.value}`,\r\n        method: \"GET\",\r\n        data: {\r\n          chatId: chatId.value,\r\n        },\r\n        header: { Authorization: `Bearer ${token}` },\r\n      });\r\n      let resData = response[1] ? response[1] : response;\r\n      if (\r\n        resData &&\r\n        resData.statusCode === 200 &&\r\n        resData.data &&\r\n        resData.data.code === 200\r\n      ) {\r\n        const history = resData.data.data || [];\r\n        const historyMessages = history.map((msg) => ({\r\n          id: msg.id || msg.chatMessageId,\r\n          chatMessageId: msg.chatMessageId,\r\n          senderId: msg.sendId || msg.senderId,\r\n          receiverId: msg.receiverId,\r\n          content: msg.content,\r\n          messageType: msg.type || msg.msgType,\r\n          createdAt: msg.sendTime || msg.send_time,\r\n          isSelf: (msg.sendId || msg.senderId) === selfId.value,\r\n          status: \"confirmed\",\r\n          isLocal: false,\r\n          avatar:\r\n            msg.avatar ||\r\n            msg.senderPicture ||\r\n            msg.headImage ||\r\n            \"/static/image/defaultAvatar/student-man.png\",\r\n          nickname:\r\n            msg.nickname ||\r\n            msg.senderName ||\r\n            msg.nickName ||\r\n            `用户${msg.senderId || msg.sendId}`,\r\n        }));\r\n        const filtered = historyMessages.filter(\r\n          (m) =>\r\n            (m.senderId === selfId.value &&\r\n              m.receiverId === Number(chatId.value)) ||\r\n            (m.senderId === Number(chatId.value) && m.receiverId === selfId.value)\r\n        );\r\n        messages.value.splice(0, messages.value.length, ...filtered);\r\n        saveMessagesToCache();\r\n        scrollToBottom();\r\n        // 拉取历史消息后，如果 chatTitle 还是空，就自动从消息里找\r\n        if (!chatTitle.value) {\r\n          const otherMsg = filtered.find(\r\n            (m) => m.senderId && m.senderId !== selfId.value && m.nickname\r\n          );\r\n          if (otherMsg && otherMsg.nickname) {\r\n            chatTitle.value = otherMsg.nickname;\r\n          }\r\n        }\r\n        if (!chatTitle.value) {\r\n          chatTitle.value = \"聊天\";\r\n        }\r\n      } else {\r\n        uni.__f__('log','at pagesChat/chat-box.vue:401',\r\n          \"[调试] loadChatHistory 未通过判断，resData:\",\r\n          JSON.stringify(resData)\r\n        );\r\n      }\r\n    } catch (e) {}\r\n  };\r\n  \r\n  // 获取用户头像\r\n  const getAvatarForUser = (senderId, chatId) => {\r\n    if (senderId === selfId.value) {\r\n      return (\r\n        uni.getStorageSync(\"userAvatar\") ||\r\n        \"/static/image/defaultAvatar/student-man.png\"\r\n      );\r\n    } else if (senderId === chatId) {\r\n      const chatInfo = getCurrentChatInfo();\r\n      return (\r\n        chatInfo.headImage ||\r\n        chatInfo.chatAvatar ||\r\n        \"/static/image/defaultAvatar/student-man.png\"\r\n      );\r\n    }\r\n    return \"/static/image/defaultAvatar/student-man.png\";\r\n  };\r\n  \r\n  // 2. 发送消息到 WebSocket\r\n  const sendSocketMessage = () => {\r\n    if (!isSocketOpen.value || !socketTask) {\r\n      connectWebSocket();\r\n      setTimeout(() => {\r\n        if (isSocketOpen.value && socketTask) sendSocketMessage();\r\n      }, 2000);\r\n      return;\r\n    }\r\n    if (!textInput.value.trim()) return;\r\n    if (!chatId.value) return;\r\n  \r\n    let fromUserId = selfId.value;\r\n    let toUserId = Number(chatId.value);\r\n  \r\n    const messageId = `msg_${Date.now()}_${Math.random()\r\n      .toString(36)\r\n      .substr(2, 9)}`;\r\n    const content = textInput.value;\r\n    const localMsg = {\r\n      id: messageId,\r\n      senderId: fromUserId,\r\n      receiverId: toUserId,\r\n      content,\r\n      messageType: 1,\r\n      createdAt: new Date().toISOString(),\r\n      isSelf: true,\r\n      status: \"sending\",\r\n      isLocal: true,\r\n    };\r\n    messages.value.push(localMsg);\r\n    scrollToBottom();\r\n    saveMessagesToCache();\r\n    textInput.value = \"\";\r\n  \r\n    const messagePayload = {\r\n      category: \"PRIVATE_CHAT\",\r\n      messageId,\r\n      timestamp: Date.now(),\r\n      payload: {\r\n        receiveUserId: toUserId,\r\n        content,\r\n        messageType: 1,\r\n      },\r\n      metadata: {},\r\n    };\r\n    socketTask.send({\r\n      data: JSON.stringify(messagePayload),\r\n      success: () => {\r\n        try {\r\n          pollingManager.triggerPollingCallback &&\r\n            pollingManager.triggerPollingCallback(\"chat-list-sessions\");\r\n        } catch (e) {\r\n          uni.__f__('error','at pagesChat/chat-box.vue:480',\"[调试] 触发会话列表轮询失败\", e);\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        uni.showToast({ title: \"消息发送失败\", icon: \"none\" });\r\n      },\r\n    });\r\n  };\r\n  \r\n  // WebSocket 核心逻辑\r\n  function closeWebSocket() {\r\n    if (socketTask) {\r\n      try {\r\n        socketTask.close();\r\n      } catch (e) {}\r\n      socketTask = null;\r\n      isSocketOpen.value = false;\r\n      // 通知WebSocket管理器连接断开\r\n      websocketManager.setConnectionStatus(false);\r\n    }\r\n  }\r\n  \r\n  const connectWebSocket = () => {\r\n    // 防重复连接：如果已连接则不再创建\r\n    if (socketTask && isSocketOpen.value) {\r\n      return;\r\n    }\r\n    closeWebSocket();\r\n  \r\n    const token = getCurrentToken() || \"\";\r\n    if (!token) {\r\n      uni.__f__('error','at pagesChat/chat-box.vue:511',\"聊天需要认证，但未找到token\");\r\n      uni.showToast({ title: \"请先登录\", icon: \"none\" });\r\n      // 没有token时通知WebSocket管理器连接断开\r\n      websocketManager.setConnectionStatus(false);\r\n      return;\r\n    }\r\n  \r\n    // 校验 chatId\r\n    if (!chatId.value) {\r\n      uni.__f__('error','at pagesChat/chat-box.vue:520',\"[调试] WebSocket连接失败：chatId 无效！\");\r\n      uni.showToast({ title: \"会话参数错误\", icon: \"none\" });\r\n      websocketManager.setConnectionStatus(false);\r\n      return;\r\n    }\r\n  \r\n    const conversationId = chatId.value;\r\n    const url = `${UNI_APP.WS_URL}/websocket/message?token=${encodeURIComponent(\r\n      token\r\n    )}&conversationId=${conversationId}`;\r\n  \r\n    try {\r\n      socketTask = uni.connectSocket({\r\n        url: url,\r\n        success: () => {},\r\n        fail: (err) => {\r\n          websocketManager.setConnectionStatus(false);\r\n        },\r\n      });\r\n  \r\n      if (!socketTask) {\r\n        websocketManager.setConnectionStatus(false);\r\n        return;\r\n      }\r\n  \r\n      socketTask.onOpen(() => {\r\n        isSocketOpen.value = true;\r\n        // 通知WebSocket管理器连接成功\r\n        websocketManager.setConnectionStatus(true, conversationId);\r\n  \r\n        // 发送初始连接消息\r\n        const initMessage = {\r\n          category: \"CONNECTION\",\r\n          messageId: \"init_\" + Date.now(),\r\n          timestamp: Date.now(),\r\n          payload: {\r\n            type: \"connect\",\r\n            conversationId: conversationId,\r\n          },\r\n        };\r\n  \r\n        try {\r\n          socketTask.send({\r\n            data: JSON.stringify(initMessage),\r\n          });\r\n        } catch (error) {}\r\n      });\r\n  \r\n      socketTask.onClose((e) => {\r\n        isSocketOpen.value = false;\r\n        socketTask = null;\r\n        // 通知WebSocket管理器连接断开\r\n        websocketManager.setConnectionStatus(false);\r\n      });\r\n  \r\n      socketTask.onError((err) => {\r\n        isSocketOpen.value = false;\r\n        socketTask = null;\r\n        // 通知WebSocket管理器连接断开\r\n        websocketManager.setConnectionStatus(false);\r\n      });\r\n  \r\n      socketTask.onMessage((res) => {\r\n        if (\r\n          typeof res.data === \"string\" &&\r\n          (res.data.trim().startsWith(\"{\") || res.data.trim().startsWith(\"[\"))\r\n        ) {\r\n          try {\r\n            const newMessage = JSON.parse(res.data);\r\n            if (newMessage && typeof newMessage === \"object\") {\r\n              // 处理连接确认消息\r\n              if (newMessage.category === \"CONNECTION_ACK\") {\r\n                return;\r\n              }\r\n  \r\n              // 处理消息确认\r\n              if (newMessage.category === \"MESSAGE_CONFIRM\") {\r\n                const messageId = newMessage.payload?.messageId;\r\n                if (messageId) {\r\n                  // 更新本地消息状态为已确认\r\n                  const msgIndex = messages.value.findIndex(\r\n                    (m) => m.id === messageId\r\n                  );\r\n                  if (msgIndex !== -1) {\r\n                    messages.value[msgIndex].status = \"confirmed\";\r\n                    messages.value[msgIndex].isLocal = false; // 不再是本地消息\r\n                    messages.value[msgIndex].chatMessageId =\r\n                      newMessage.payload.messageId; // 保存服务器消息ID\r\n                    saveMessagesToCache();\r\n                  }\r\n                }\r\n                return;\r\n              }\r\n  \r\n              // 处理错误消息\r\n              if (newMessage.category === \"MESSAGE_ERROR\") {\r\n                const messageId = newMessage.messageId;\r\n                if (messageId) {\r\n                  const msgIndex = messages.value.findIndex(\r\n                    (m) => m.id === messageId\r\n                  );\r\n                  if (msgIndex !== -1) {\r\n                    messages.value[msgIndex].status = \"failed\";\r\n                    saveMessagesToCache();\r\n                  }\r\n                }\r\n                uni.showToast({\r\n                  title: newMessage.payload?.content || \"消息发送失败\",\r\n                  icon: \"none\",\r\n                });\r\n                return;\r\n              }\r\n  \r\n              // 处理私聊消息推送\r\n              if (newMessage.category === \"PRIVATE_CHAT\") {\r\n                // 只处理属于当前会话的消息\r\n                const payload = newMessage.payload || {};\r\n                if (\r\n                  (payload.senderId === selfId.value &&\r\n                    payload.receiveUserId === Number(chatId.value)) ||\r\n                  (payload.senderId === Number(chatId.value) &&\r\n                    payload.receiveUserId === selfId.value)\r\n                ) {\r\n                  const receivedMessage = {\r\n                    id: newMessage.messageId || `server_${Date.now()}`,\r\n                    senderId: payload.senderId,\r\n                    receiverId: payload.receiveUserId,\r\n                    content: payload.content,\r\n                    messageType: payload.messageType,\r\n                    createdAt: payload.createdAt || new Date().toISOString(),\r\n                    isSelf: payload.senderId === selfId.value,\r\n                    status: \"received\",\r\n                    isLocal: false,\r\n                    chatMessageId: payload.messageId,\r\n                  };\r\n                  messages.value.push(receivedMessage);\r\n                  scrollToBottom();\r\n                  saveMessagesToCache();\r\n                }\r\n                return;\r\n              }\r\n            } else {\r\n            }\r\n          } catch (error) {}\r\n        } else {\r\n        }\r\n      });\r\n    } catch (error) {\r\n      websocketManager.setConnectionStatus(false);\r\n    }\r\n  };\r\n  \r\n  // 轮询获取新消息 - 移除原有的轮询逻辑，使用轮询管理器\r\n  const startMessagePolling = () => {\r\n    // 这个方法现在由轮询管理器统一管理，不再需要手动调用\r\n  };\r\n  \r\n  const stopMessagePolling = () => {\r\n    // 这个方法现在由轮询管理器统一管理，不再需要手动调用\r\n  };\r\n  \r\n  // 检查新消息 - 保持原有逻辑，但由轮询管理器调用\r\n  const checkNewMessages = async () => {\r\n    try {\r\n      if (!chatId.value) return;\r\n      const token = getCurrentToken();\r\n      if (!token) return;\r\n      let fromUserId = selfId.value;\r\n      let toUserId = Number(chatId.value);\r\n      const response = await new Promise((resolve, reject) => {\r\n        uni.request({\r\n          url: `${UNI_APP.BASE_URL}/message/private/newMessages`,\r\n          method: \"GET\",\r\n          data: {\r\n            fromUserId,\r\n            toUserId,\r\n            lastMessageId: lastMessageId.value,\r\n            limit: 20,\r\n            chatId: chatId.value,\r\n          },\r\n          header: { Authorization: `Bearer ${token}` },\r\n          success: (res) => resolve(res),\r\n          fail: (err) => reject(err),\r\n        });\r\n      });\r\n      if (response.statusCode === 200 && response.data.code === 200) {\r\n        const newMessages = response.data.data || [];\r\n        newMessages.forEach((msg) => {\r\n          const messageObj = {\r\n            id: `msg_${msg.chatMessageId}`,\r\n            chatMessageId: msg.chatMessageId,\r\n            senderId: msg.senderId,\r\n            receiverId: msg.receiverId,\r\n            content: msg.content,\r\n            messageType: msg.msgType,\r\n            createdAt: msg.sendTime,\r\n            isSelf: msg.senderId === selfId.value,\r\n            status: \"received\",\r\n            isLocal: false,\r\n          };\r\n          // 只保留双方的消息\r\n          if (\r\n            (messageObj.senderId === fromUserId &&\r\n              messageObj.receiverId === toUserId) ||\r\n            (messageObj.senderId === toUserId &&\r\n              messageObj.receiverId === fromUserId)\r\n          ) {\r\n            const exists = messages.value.find(\r\n              (m) => m.chatMessageId === msg.chatMessageId\r\n            );\r\n            if (!exists) {\r\n              messages.value.push(messageObj);\r\n              lastMessageId.value = Math.max(\r\n                lastMessageId.value,\r\n                msg.chatMessageId\r\n              );\r\n            }\r\n          }\r\n        });\r\n        scrollToBottom();\r\n        saveMessagesToCache();\r\n      }\r\n    } catch (error) {}\r\n  };\r\n  \r\n  // --- 辅助函数 ---\r\n  const goBack = () => {\r\n    uni.navigateBack();\r\n  };\r\n  \r\n  const handleMore = () => {\r\n    uni.showToast({\r\n      title: \"更多功能开发中\",\r\n      icon: \"none\",\r\n    });\r\n  };\r\n  \r\n  const scrollToBottom = () => {\r\n    setTimeout(() => {\r\n      scrollTop.value = scrollTop.value + 9999;\r\n    }, 100);\r\n  };\r\n  \r\n  const manualReconnect = () => {\r\n    uni.showToast({ title: \"正在重新连接...\", icon: \"loading\" });\r\n    connectWebSocket();\r\n  };\r\n  \r\n  // 显示调试信息\r\n  const showDebugInfo = () => {\r\n    const debugInfo = {\r\n      chatId: chatId.value,\r\n      selfId: selfId.value,\r\n      isSocketOpen: isSocketOpen.value,\r\n      isPolling: isPolling.value,\r\n      hasSocketTask: !!socketTask,\r\n      baseUrl: UNI_APP.BASE_URL,\r\n      wsUrl: UNI_APP.WS_URL,\r\n      hasToken: !!getCurrentToken(),\r\n    };\r\n  \r\n    uni.showModal({\r\n      title: \"调试信息\",\r\n      content: JSON.stringify(debugInfo, null, 2),\r\n      showCancel: false,\r\n    });\r\n  };\r\n  \r\n  // 检查连接状态\r\n  const checkConnectionStatus = () => {\r\n    websocketManager.setConnectionStatus(isSocketOpen.value, chatId.value);\r\n  };\r\n  \r\n  // 在消息渲染前加日志（setup末尾）\r\n  watch(messages, (val) => {\r\n    uni.__f__('log','at pagesChat/chat-box.vue:795',\r\n      \"[调试] 消息 senderId/selfId 类型和值:\",\r\n      val.map((m) => ({\r\n        id: m.id,\r\n        senderId: m.senderId,\r\n        senderIdType: typeof m.senderId,\r\n        selfId: selfId.value,\r\n        selfIdType: typeof selfId.value,\r\n        content: m.content,\r\n      }))\r\n    );\r\n  });\r\n  \r\n  const FIVE_MINUTES = 5 * 60 * 1000;\r\n  const messageListWithTimeTips = computed(() => {\r\n    const result = [];\r\n    let lastTime = null;\r\n    messages.value.forEach((msg, idx) => {\r\n      const msgTime = new Date(msg.createdAt || msg.sendTime).getTime();\r\n      if (idx === 0 || (lastTime && msgTime - lastTime > FIVE_MINUTES)) {\r\n        result.push({\r\n          type: \"time-tip\",\r\n          time: msgTime,\r\n          id: `time_${msgTime}_${idx}`,\r\n        });\r\n      }\r\n      result.push({\r\n        type: \"message\",\r\n        ...msg,\r\n      });\r\n      lastTime = msgTime;\r\n    });\r\n    return result;\r\n  });\r\n  </script>\r\n  \r\n  <style lang=\"scss\" scoped>\r\n  @import \"./static/fonts/iconfont.css\";\r\n  \r\n  .chat-page {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n    background-color: #f4f4f4;\r\n  }\r\n  \r\n  .message-list-container {\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  .message-list-content {\r\n    width: 100%;\r\n  }\r\n  \r\n  .message-row {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n  }\r\n  \r\n  .message-row.self {\r\n    justify-content: flex-end;\r\n  }\r\n  \r\n  .input-bar-container {\r\n    position: fixed;\r\n    width: 100%;\r\n    background-color: #f7f7f7;\r\n    border-top: 1px solid #e0e0e0;\r\n    transition: bottom 0.3s ease;\r\n  }\r\n  \r\n  .input-bar {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: flex-end;\r\n    padding: 12rpx 20rpx;\r\n    padding-bottom: 24rpx;\r\n  }\r\n  \r\n  .textarea-container {\r\n    flex: 1;\r\n    margin: 0;\r\n  }\r\n  \r\n  .textarea-scroll-view {\r\n    max-height: 160rpx;\r\n  }\r\n  \r\n  .input-textarea {\r\n    width: 100%;\r\n    background-color: #fff;\r\n    border-radius: 12rpx;\r\n    border: 1px solid #c7c7c7;\r\n    padding: 18rpx 20rpx;\r\n    font-size: 32rpx;\r\n    line-height: 1.5;\r\n  }\r\n  \r\n  .action-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: all 0.2s ease-in-out;\r\n    margin-left: 20rpx;\r\n  }\r\n  \r\n  .icon {\r\n    font-size: 44rpx;\r\n    color: #339af0;\r\n    transform: translateY(-14rpx);\r\n  }\r\n  \r\n  .send-button {\r\n    width: 120rpx;\r\n    height: 68rpx;\r\n    line-height: 68rpx;\r\n    background-color: #339af0;\r\n    color: #fff;\r\n    border-radius: 12rpx;\r\n    font-size: 28rpx;\r\n    padding: 0;\r\n    margin: 6rpx 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  \r\n    &::after {\r\n      border: none;\r\n    }\r\n  }\r\n  \r\n  .connection-status {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    background-color: rgba(255, 255, 255, 0.8);\r\n    padding: 10rpx 20rpx;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    z-index: 1000;\r\n  \r\n    .status-info {\r\n      flex: 1;\r\n    }\r\n  \r\n    .status-text {\r\n      font-size: 28rpx;\r\n      color: #333;\r\n    }\r\n  \r\n    .status-detail {\r\n      font-size: 24rpx;\r\n      color: #666;\r\n    }\r\n  \r\n    .reconnect-btn {\r\n      background-color: #339af0;\r\n      color: #fff;\r\n      border: none;\r\n      border-radius: 12rpx;\r\n      padding: 8rpx 20rpx;\r\n      font-size: 28rpx;\r\n    }\r\n  }\r\n  \r\n  .time-tip-bar {\r\n    width: 100%;\r\n    text-align: center;\r\n    color: #b3b3b3;\r\n    font-size: 26rpx;\r\n    margin: 18rpx 0 0 0;\r\n    padding: 0 0 10rpx 0;\r\n  }\r\n  </style>\r\n  ","import MiniProgramPage from 'E:/研师录与其他人共享文件/teacherDirectory/vue实现Lottie动画代码/pagesChat/chat-box.vue'\nwx.createPage(MiniProgramPage)"],"names":["ChatMessageItem","Header","FIVE_MINUTES","chatId","ref","selfId","chatTitle","chatAvatar","messages","textInput","scrollTop","keyboardHeight","statusBarHeight","windowHeight","navbarHeight","lastMessageId","isPolling","computed","pollingManager","isSocketOpen","socketTask","messageListHeight","getCacheKey","saveMessagesToCache","messagesToCache","msg","cacheKey","uni","loadMessagesFromCache","cached","onInputFocus","e","scrollToBottom","onInputBlur","initKeyboardListener","res","onLoad","options","__awaiter","systemInfo","getCurrentUserId","otherMsg","m","token","getCurrentToken","UNI_APP","loadChatHistory","checkNewMessages","connectWebSocket","onShow","onUnload","closeWebSocket","response","resData","filtered","sendSocketMessage","fromUserId","toUserId","messageId","content","localMsg","messagePayload","err","websocketManager","conversationId","url","initMessage","newMessage","_a","msgIndex","_b","payload","receivedMessage","resolve","reject","messageObj","goBack","handleMore","manualReconnect","showDebugInfo","debugInfo","watch","val","messageListWithTimeTips","result","lastTime","idx","msgTime","MiniProgramPage"],"mappings":"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"}