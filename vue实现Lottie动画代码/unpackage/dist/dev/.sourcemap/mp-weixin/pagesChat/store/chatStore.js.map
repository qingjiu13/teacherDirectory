{"version":3,"file":"chatStore.js","sources":["pagesChat/store/chatStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { MESSAGE_TYPE, MESSAGE_STATUS } from '/pagesChat/common/enums.js';\nimport useUserStore from './userStore';\nimport UNI_APP from '../env';\n\nlet cacheChats = [];\nexport default defineStore('chatStore', {\n\tstate: () => {\n\t\treturn {\n\t\t\tchats: [],\n\t\t\tprivateMsgMaxId: 0,\n\t\t\tgroupMsgMaxId: 0,\n\t\t\tloadingPrivateMsg: false,\n\t\t\tloadingGroupMsg: false\n\t\t}\n\t},\n\tactions: {\n\t\tinitChats(chatsData) {\n\t\t\tcacheChats = [];\n\t\t\tthis.chats = [];\n\t\t\tfor (let chat of chatsData.chats) {\n\t\t\t\tchat.stored = false;\n\t\t\t\t// 清理多余的消息，避免消息过多导致卡顿\n\t\t\t\tif (UNI_APP.MAX_MESSAGE_SIZE > 0 && chat.messages.length > UNI_APP.MAX_MESSAGE_SIZE) {\n\t\t\t\t\tchat.messages = chat.messages.slice(0, UNI_APP.MAX_MESSAGE_SIZE);\n\t\t\t\t}\n\t\t\t\t// 暂存至缓冲区\n\t\t\t\tcacheChats.push(JSON.parse(JSON.stringify(chat)));\n\t\t\t\t// 加载期间显示只前15个会话做做样子,一切都为了加快初始化时间\n\t\t\t\tif (this.chats.length < 15) {\n\t\t\t\t\tthis.chats.push(chat);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.privateMsgMaxId = chatsData.privateMsgMaxId || 0;\n\t\t\tthis.groupMsgMaxId = chatsData.groupMsgMaxId || 0;\n\t\t\t// 防止图片一直处在加载中状态\n\t\t\tcacheChats.forEach((chat) => {\n\t\t\t\tchat.messages.forEach((msg) => {\n\t\t\t\t\tif (msg.loadStatus == \"loading\") {\n\t\t\t\t\t\tmsg.loadStatus = \"fail\"\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t},\n\t\topenChat(chatInfo) {\n\t\t\tlet chats = this.curChats;\n\t\t\tlet chat = null;\n\t\t\tfor (let idx in chats) {\n\t\t\t\tif (chats[idx].type == chatInfo.type &&\n\t\t\t\t\tchats[idx].targetId === chatInfo.targetId) {\n\t\t\t\t\tchat = chats[idx];\n\t\t\t\t\t// 放置头部\n\t\t\t\t\tthis.moveTop(idx)\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 创建会话\n\t\t\tif (chat == null) {\n\t\t\t\tchat = {\n\t\t\t\t\ttargetId: chatInfo.targetId,\n\t\t\t\t\ttype: chatInfo.type,\n\t\t\t\t\tshowName: chatInfo.showName,\n\t\t\t\t\theadImage: chatInfo.headImage,\n\t\t\t\t\tlastContent: \"\",\n\t\t\t\t\tlastSendTime: new Date().getTime(),\n\t\t\t\t\tunreadCount: 0,\n\t\t\t\t\tmessages: [],\n\t\t\t\t\tatMe: false,\n\t\t\t\t\tatAll: false,\n\t\t\t\t\tstored: false\n\t\t\t\t};\n\t\t\t\tchats.unshift(chat);\n\t\t\t\tthis.saveToStorage();\n\t\t\t}\n\t\t},\n\t\tactiveChat(idx) {\n\t\t\tlet chats = this.curChats;\n\t\t\tif (idx >= 0) {\n\t\t\t\tchats[idx].unreadCount = 0;\n\t\t\t}\n\t\t},\n\t\tresetUnreadCount(chatInfo) {\n\t\t\tlet chats = this.curChats;\n\t\t\tfor (let idx in chats) {\n\t\t\t\tif (chats[idx].type == chatInfo.type &&\n\t\t\t\t\tchats[idx].targetId == chatInfo.targetId) {\n\t\t\t\t\tchats[idx].unreadCount = 0;\n\t\t\t\t\tchats[idx].atMe = false;\n\t\t\t\t\tchats[idx].atAll = false;\n\t\t\t\t\tchats[idx].stored = false;\n\t\t\t\t\tthis.saveToStorage();\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\t\treadedMessage(pos) {\n\t\t\tlet chat = this.findChatByFriend(pos.friendId);\n\t\t\tif (!chat) return;\n\t\t\tchat.messages.forEach((m) => {\n\t\t\t\tif (m.id && m.selfSend && m.status < MESSAGE_STATUS.RECALL) {\n\t\t\t\t\t// pos.maxId为空表示整个会话已读\n\t\t\t\t\tif (!pos.maxId || m.id <= pos.maxId) {\n\t\t\t\t\t\tm.status = MESSAGE_STATUS.READED\n\t\t\t\t\t\tchat.stored = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tif (!chat.stored) {\n\t\t\t\tthis.saveToStorage();\n\t\t\t}\n\t\t},\n\t\tremoveChat(idx) {\n\t\t\tlet chats = this.curChats;\n\t\t\tchats[idx].delete = true;\n\t\t\tchats[idx].stored = false;\n\t\t\tthis.saveToStorage();\n\t\t},\n\t\tremovePrivateChat(userId) {\n\t\t\tlet chats = this.curChats;\n\t\t\tfor (let idx in chats) {\n\t\t\t\tif (chats[idx].type == 'PRIVATE' &&\n\t\t\t\t\tchats[idx].targetId == userId) {\n\t\t\t\t\tthis.removeChat(idx);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tremoveGroupChat(groupId) {\n\t\t\tlet chats = this.curChats;\n\t\t\tfor (let idx in chats) {\n\t\t\t\tif (chats[idx].type == 'GROUP' &&\n\t\t\t\t\tchats[idx].targetId == groupId) {\n\t\t\t\t\tthis.removeChat(idx);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmoveTop(idx) {\n\t\t\tif (this.isLoading()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet chats = this.curChats;\n\t\t\tif (idx > 0) {\n\t\t\t\tlet chat = chats[idx];\n\t\t\t\tchats.splice(idx, 1);\n\t\t\t\tchats.unshift(chat);\n\t\t\t\tchat.lastSendTime = new Date().getTime();\n\t\t\t\tchat.stored = false;\n\t\t\t\tthis.saveToStorage();\n\t\t\t}\n\t\t},\n\t\tinsertMessage(msgInfo, chatInfo) {\n\t\t\t// 获取对方id或群id\n\t\t\tlet type = chatInfo.type;\n\t\t\t// 记录消息的最大id\n\t\t\tif (msgInfo.id && type == \"PRIVATE\" && msgInfo.id > this.privateMsgMaxId) {\n\t\t\t\tthis.privateMsgMaxId = msgInfo.id;\n\t\t\t}\n\t\t\tif (msgInfo.id && type == \"GROUP\" && msgInfo.id > this.groupMsgMaxId) {\n\t\t\t\tthis.groupMsgMaxId = msgInfo.id;\n\t\t\t}\n\t\t\t// 如果是已存在消息，则覆盖旧的消息数据\n\t\t\tlet chat = this.findChat(chatInfo);\n\t\t\tlet message = this.findMessage(chat, msgInfo);\n\t\t\tif (message) {\n\t\t\t\tObject.assign(message, msgInfo);\n\t\t\t\tchat.stored = false;\n\t\t\t\tthis.saveToStorage();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// 会话列表内容\n\t\t\tif (msgInfo.type == MESSAGE_TYPE.IMAGE) {\n\t\t\t\tchat.lastContent = \"[图片]\";\n\t\t\t} else if (msgInfo.type == MESSAGE_TYPE.FILE) {\n\t\t\t\tchat.lastContent = \"[文件]\";\n\t\t\t} else if (msgInfo.type == MESSAGE_TYPE.AUDIO) {\n\t\t\t\tchat.lastContent = \"[语音]\";\n\t\t\t} else if (msgInfo.type == MESSAGE_TYPE.ACT_RT_VOICE) {\n\t\t\t\tchat.lastContent = \"[语音通话]\";\n\t\t\t} else if (msgInfo.type == MESSAGE_TYPE.ACT_RT_VIDEO) {\n\t\t\t\tchat.lastContent = \"[视频通话]\";\n\t\t\t} else if (msgInfo.type == MESSAGE_TYPE.TEXT ||\n\t\t\t\tmsgInfo.type == MESSAGE_TYPE.RECALL ||\n\t\t\t\tmsgInfo.type == MESSAGE_TYPE.TIP_TEXT) {\n\t\t\t\tchat.lastContent = msgInfo.content;\n\t\t\t}\n\t\t\tchat.lastSendTime = msgInfo.sendTime;\n\t\t\tchat.sendNickName = msgInfo.sendNickName;\n\t\t\t// 未读加1\n\t\t\tif (!msgInfo.selfSend && msgInfo.status != MESSAGE_STATUS.READED &&\n\t\t\t\tmsgInfo.status != MESSAGE_STATUS.RECALL && msgInfo.type != MESSAGE_TYPE.TIP_TEXT) {\n\t\t\t\tchat.unreadCount++;\n\t\t\t}\n\t\t\t// 是否有人@我\n\t\t\tif (!msgInfo.selfSend && chat.type == \"GROUP\" && msgInfo.atUserIds &&\n\t\t\t\tmsgInfo.status != MESSAGE_STATUS.READED) {\n\t\t\t\tconst userStore = useUserStore();\n\t\t\t\tlet userId = userStore.userInfo.id;\n\t\t\t\tif (msgInfo.atUserIds.indexOf(userId) >= 0) {\n\t\t\t\t\tchat.atMe = true;\n\t\t\t\t}\n\t\t\t\tif (msgInfo.atUserIds.indexOf(-1) >= 0) {\n\t\t\t\t\tchat.atAll = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 间隔大于10分钟插入时间显示\n\t\t\tif (!chat.lastTimeTip || (chat.lastTimeTip < msgInfo.sendTime - 600 * 1000)) {\n\t\t\t\tchat.messages.push({\n\t\t\t\t\tsendTime: msgInfo.sendTime,\n\t\t\t\t\ttype: MESSAGE_TYPE.TIP_TIME,\n\t\t\t\t});\n\t\t\t\tchat.lastTimeTip = msgInfo.sendTime;\n\t\t\t}\n\t\t\t// 根据id顺序插入，防止消息乱序\n\t\t\tlet insertPos = chat.messages.length;\n\t\t\t// 防止 图片、文件 在发送方 显示 在顶端  因为还没存库，id=0\n\t\t\tif (msgInfo.id && msgInfo.id > 0) {\n\t\t\t\tfor (let idx in chat.messages) {\n\t\t\t\t\tif (chat.messages[idx].id && msgInfo.id < chat.messages[idx].id) {\n\t\t\t\t\t\tinsertPos = idx;\n\t\t\t\t\t\tconsole.log(`消息出现乱序,位置:${chat.messages.length},修正至:${insertPos}`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (insertPos == chat.messages.length) {\n\t\t\t\t// 这种赋值效率最高\n\t\t\t\tchat.messages[insertPos] = msgInfo;\n\t\t\t} else {\n\t\t\t\tchat.messages.splice(insertPos, 0, msgInfo);\n\t\t\t}\n\t\t\tchat.stored = false;\n\t\t\tthis.saveToStorage();\n\t\t},\n\t\tupdateMessage(msgInfo, chatInfo) {\n\t\t\t// 获取对方id或群id\n\t\t\tlet chat = this.findChat(chatInfo);\n\t\t\tlet message = this.findMessage(chat, msgInfo);\n\t\t\tif (message) {\n\t\t\t\t// 属性拷贝\n\t\t\t\tObject.assign(message, msgInfo);\n\t\t\t\tchat.stored = false;\n\t\t\t\tthis.saveToStorage();\n\t\t\t}\n\t\t},\n\t\tdeleteMessage(msgInfo, chatInfo) {\n\t\t\t// 获取对方id或群id\n\t\t\tlet chat = this.findChat(chatInfo);\n\t\t\tfor (let idx in chat.messages) {\n\t\t\t\t// 已经发送成功的，根据id删除\n\t\t\t\tif (chat.messages[idx].id && chat.messages[idx].id == msgInfo.id) {\n\t\t\t\t\tchat.messages.splice(idx, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// 正在发送中的消息可能没有id，只有临时id\n\t\t\t\tif (chat.messages[idx].tmpId && chat.messages[idx].tmpId == msgInfo.tmpId) {\n\t\t\t\t\tchat.messages.splice(idx, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tchat.stored = false;\n\t\t\tthis.saveToStorage();\n\t\t},\n\t\trecallMessage(msgInfo, chatInfo) {\n\t\t\tlet chat = this.findChat(chatInfo);\n\t\t\tif (!chat) return;\n\t\t\t// 要撤回的消息id\n\t\t\tlet id = msgInfo.content;\n\t\t\tlet name = msgInfo.selfSend ? '你' : chat.type == 'PRIVATE' ? '对方' : msgInfo.sendNickName;\n\t\t\tfor (let idx in chat.messages) {\n\t\t\t\tlet m = chat.messages[idx];\n\t\t\t\tif (m.id && m.id == id) {\n\t\t\t\t\t// 改造成一条提示消息\n\t\t\t\t\tm.status = MESSAGE_STATUS.RECALL;\n\t\t\t\t\tm.content = name + \"撤回了一条消息\";\n\t\t\t\t\tm.type = MESSAGE_TYPE.TIP_TEXT\n\t\t\t\t\t// 会话列表\n\t\t\t\t\tchat.lastContent = m.content;\n\t\t\t\t\tchat.lastSendTime = msgInfo.sendTime;\n\t\t\t\t\tchat.sendNickName = '';\n\t\t\t\t\tif (!msgInfo.selfSend && msgInfo.status != MESSAGE_STATUS.READED) {\n\t\t\t\t\t\tchat.unreadCount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 被引用的消息也要撤回\n\t\t\t\tif (m.quoteMessage && m.quoteMessage.id == msgInfo.id) {\n\t\t\t\t\tm.quoteMessage.content = \"引用内容已撤回\";\n\t\t\t\t\tm.quoteMessage.status = MESSAGE_STATUS.RECALL;\n\t\t\t\t\tm.quoteMessage.type = MESSAGE_TYPE.TIP_TEXT\n\t\t\t\t}\n\t\t\t}\n\t\t\tchat.stored = false;\n\t\t\tthis.saveToStorage();\n\t\t},\n\t\tupdateChatFromFriend(friend) {\n\t\t\tlet chat = this.findChatByFriend(friend.id)\n\t\t\tif (chat && (chat.headImage != friend.headImage ||\n\t\t\t\t\tchat.showName != friend.nickName)) {\n\t\t\t\t// 更新会话中的群名和头像\n\t\t\t\tchat.headImage = friend.headImage;\n\t\t\t\tchat.showName = friend.nickName;\n\t\t\t\tchat.stored = false;\n\t\t\t\tthis.saveToStorage();\n\t\t\t}\n\t\t},\n\t\tupdateChatFromUser(user) {\n\t\t\tlet chat = this.findChatByFriend(user.id);\n\t\t\t// 更新会话中的昵称和头像\n\t\t\tif (chat && (chat.headImage != user.headImageThumb ||\n\t\t\t\t\tchat.showName != user.nickName)) {\n\t\t\t\tchat.headImage = user.headImageThumb;\n\t\t\t\tchat.showName = user.nickName;\n\t\t\t\tchat.stored = false;\n\t\t\t\tthis.saveToStorage();\n\t\t\t}\n\t\t},\n\t\tupdateChatFromGroup(group) {\n\t\t\tlet chat = this.findChatByGroup(group.id);\n\t\t\tif (chat && (chat.headImage != group.headImageThumb ||\n\t\t\t\t\tchat.showName != group.showGroupName)) {\n\t\t\t\t// 更新会话中的群名称和头像\n\t\t\t\tchat.headImage = group.headImageThumb;\n\t\t\t\tchat.showName = group.showGroupName;\n\t\t\t\tchat.stored = false;\n\t\t\t\tthis.saveToStorage();\n\t\t\t}\n\t\t},\n\t\tsetLoadingPrivateMsg(loading) {\n\t\t\tthis.loadingPrivateMsg = loading;\n\t\t\tif (!this.isLoading()) {\n\t\t\t\tthis.refreshChats()\n\t\t\t}\n\t\t},\n\t\tsetLoadingGroupMsg(loading) {\n\t\t\tthis.loadingGroupMsg = loading;\n\t\t\tif (!this.isLoading()) {\n\t\t\t\tthis.refreshChats()\n\t\t\t}\n\t\t},\n\t\trefreshChats() {\n\t\t\tif (!cacheChats) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// 排序\n\t\t\tcacheChats.sort((chat1, chat2) => {\n\t\t\t\treturn chat2.lastSendTime - chat1.lastSendTime;\n\t\t\t});\n\t\t\t// 将消息一次性装载回来\n\t\t\tthis.chats = cacheChats;\n\t\t\t// 清空缓存，不再使用\n\t\t\tcacheChats = null;\n\t\t\tthis.saveToStorage();\n\t\t},\n\t\tsaveToStorage(state) {\n\t\t\t// 加载中不保存，防止卡顿\n\t\t\tif (this.isLoading()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst userStore = useUserStore();\n\t\t\tlet userId = userStore.userInfo.id;\n\t\t\tlet key = \"chats-app-\" + userId;\n\t\t\tlet chatKeys = [];\n\t\t\t// 按会话为单位存储，只存储有改动的会话\n\t\t\tthis.chats.forEach((chat) => {\n\t\t\t\tlet chatKey = `${key}-${chat.type}-${chat.targetId}`\n\t\t\t\tif (!chat.stored) {\n\t\t\t\t\tif (chat.delete) {\n\t\t\t\t\t\tuni.removeStorageSync(chatKey);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuni.setStorageSync(chatKey, chat);\n\t\t\t\t\t}\n\t\t\t\t\tchat.stored = true;\n\t\t\t\t}\n\t\t\t\tif (!chat.delete) {\n\t\t\t\t\tchatKeys.push(chatKey);\n\t\t\t\t}\n\t\t\t})\n\t\t\t// 会话核心信息\n\t\t\tlet chatsData = {\n\t\t\t\tprivateMsgMaxId: this.privateMsgMaxId,\n\t\t\t\tgroupMsgMaxId: this.groupMsgMaxId,\n\t\t\t\tchatKeys: chatKeys\n\t\t\t}\n\t\t\tuni.setStorageSync(key, chatsData)\n\t\t\t// 清理已删除的会话\n\t\t\tthis.chats = this.chats.filter(chat => !chat.delete)\n\t\t},\n\t\tclear(state) {\n\t\t\tcacheChats = [];\n\t\t\tthis.chats = [];\n\t\t\tthis.privateMsgMaxId = 0;\n\t\t\tthis.groupMsgMaxId = 0;\n\t\t\tthis.loadingPrivateMsg = false;\n\t\t\tthis.loadingGroupMsg = false;\n\t\t},\n\t\tloadChat(context) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tlet userStore = useUserStore();\n\t\t\t\tlet userId = userStore.userInfo.id;\n\t\t\t\tlet chatsData = uni.getStorageSync(\"chats-app-\" + userId)\n\t\t\t\tif (chatsData) {\n\t\t\t\t\tif (chatsData.chatKeys) {\n\t\t\t\t\t\tlet time = new Date().getTime();\n\t\t\t\t\t\tchatsData.chats = [];\n\t\t\t\t\t\tchatsData.chatKeys.forEach(key => {\n\t\t\t\t\t\t\tlet chat = uni.getStorageSync(key);\n\t\t\t\t\t\t\tif (chat) {\n\t\t\t\t\t\t\t\tchatsData.chats.push(chat);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tthis.initChats(chatsData);\n\t\t\t\t}\n\t\t\t\tresolve()\n\t\t\t})\n\t\t}\n\t},\n\tgetters: {\n\t\tisLoading: (state) => () => {\n\t\t\treturn state.loadingPrivateMsg || state.loadingGroupMsg\n\t\t},\n\t\tcurChats: (state) => {\n\t\t\tif (cacheChats && state.isLoading()) {\n\t\t\t\treturn cacheChats;\n\t\t\t}\n\t\t\treturn state.chats;\n\t\t},\n\t\tfindChatIdx: (state) => (chat) => {\n\t\t\tlet chats = state.curChats;\n\t\t\tfor (let idx in chats) {\n\t\t\t\tif (chats[idx].type == chat.type &&\n\t\t\t\t\tchats[idx].targetId === chat.targetId) {\n\t\t\t\t\tchat = state.chats[idx];\n\t\t\t\t\treturn idx;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tfindChat: (state) => (chat) => {\n\t\t\tlet chats = state.curChats;\n\t\t\tlet idx = state.findChatIdx(chat);\n\t\t\treturn chats[idx];\n\t\t},\n\t\tfindChatByFriend: (state) => (fid) => {\n\t\t\treturn state.curChats.find(chat => chat.type == 'PRIVATE' &&\n\t\t\t\tchat.targetId == fid)\n\t\t},\n\t\tfindChatByGroup: (state) => (gid) => {\n\t\t\treturn state.curChats.find(chat => chat.type == 'GROUP' &&\n\t\t\t\tchat.targetId == gid)\n\t\t},\n\t\tfindMessage: (state) => (chat, msgInfo) => {\n\t\t\tif (!chat) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tfor (let idx in chat.messages) {\n\t\t\t\t// 通过id判断\n\t\t\t\tif (msgInfo.id && chat.messages[idx].id == msgInfo.id) {\n\t\t\t\t\treturn chat.messages[idx];\n\t\t\t\t}\n\t\t\t\t// 正在发送中的消息可能没有id,只有tmpId\n\t\t\t\tif (msgInfo.tmpId && chat.messages[idx].tmpId &&\n\t\t\t\t\tchat.messages[idx].tmpId == msgInfo.tmpId) {\n\t\t\t\t\treturn chat.messages[idx];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});"],"names":["cacheChats","defineStore","chatsData","chat","UNI_APP","msg","chatInfo","chats","idx","pos","m","MESSAGE_STATUS","userId","groupId","msgInfo","type","message","MESSAGE_TYPE","useUserStore","insertPos","uni","id","name","friend","user","group","loading","chat1","chat2","state","key","chatKeys","chatKey","context","resolve","reject","fid","gid"],"mappings":"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"}