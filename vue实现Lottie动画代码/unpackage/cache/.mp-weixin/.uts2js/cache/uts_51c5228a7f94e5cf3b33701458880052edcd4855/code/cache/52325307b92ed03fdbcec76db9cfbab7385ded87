{"code":"import { defineComponent } from \"vue\";\nimport { mapState } from 'vuex';\n/**\n * @description 功能模式选择组件\n * @property {String} currentMode - 当前选中的模式（父组件传递，优先级低于Vuex状态）\n * @property {Boolean} inNav - 组件是否在导航栏中显示\n * @event {Function} modeChange - 模式变更事件\n */\nexport default defineComponent({\n    name: \"ModeSelector\",\n    props: {\n        currentMode: {\n            type: String,\n            default: 'general',\n            validator: (value = null) => { return ['general', 'school', 'career'].includes(value); }\n        },\n        inNav: {\n            type: Boolean,\n            default: false\n        }\n    },\n    computed: Object.assign(Object.assign({}, mapState(new UTSJSONObject({\n        vuexChatMode: (state = null) => {\n            try {\n                return state.user && state.user.aiChat && state.user.aiChat.aiChat\n                    ? state.user.aiChat.aiChat.chatMode\n                    : null;\n            }\n            catch (e) {\n                uni.__f__('error', 'at pages_AI_Login_Match/AI/ai-chat/ModeSelector.vue:76', '获取 Vuex chatMode 状态出错:', e);\n                return null;\n            }\n        }\n    }))), { \n        /**\n         * @description 计算当前活跃的聊天模式\n         * 优先使用 Vuex 中的状态，如果没有则使用父组件传递的 prop\n         * @returns {String} 当前活跃的聊天模式\n         */\n        activeChatMode() {\n            const mode = this.vuexChatMode || this.currentMode || 'general';\n            uni.__f__('log', 'at pages_AI_Login_Match/AI/ai-chat/ModeSelector.vue:89', 'ModeSelector activeChatMode 计算:', new UTSJSONObject({\n                vuexChatMode: this.vuexChatMode,\n                currentMode: this.currentMode,\n                activeChatMode: mode,\n                timestamp: new Date().toLocaleTimeString()\n            }));\n            return mode;\n        } }),\n    watch: {\n        /**\n         * @description 监听 Vuex 中的聊天模式变化\n         * @param {String} newMode - 新的聊天模式\n         * @param {String} oldMode - 旧的聊天模式\n         */\n        vuexChatMode: {\n            handler(newMode = null, oldMode = null) {\n                uni.__f__('log', 'at pages_AI_Login_Match/AI/ai-chat/ModeSelector.vue:106', 'ModeSelector vuexChatMode watch 触发:', new UTSJSONObject({\n                    oldMode,\n                    newMode,\n                    activeChatMode: this.activeChatMode,\n                    timestamp: new Date().toLocaleTimeString()\n                }));\n                // 强制触发响应式更新\n                this.$forceUpdate();\n                // 只有在真正发生变化且不是初始化时才处理\n                if (newMode && oldMode && newMode !== oldMode) {\n                    uni.__f__('log', 'at pages_AI_Login_Match/AI/ai-chat/ModeSelector.vue:118', 'ModeSelector 检测到 Vuex 聊天模式变化:', new UTSJSONObject({\n                        oldMode,\n                        newMode,\n                        source: '外部变化（如历史记录加载）'\n                    }));\n                    // 这里不需要emit modeChange，因为这是由外部变化引起的\n                    // 外部变化（如加载历史记录）不应该触发新对话创建\n                    // 只有用户主动点击切换按钮时才需要创建新对话\n                }\n            },\n            immediate: false\n        },\n        /**\n         * @description 监听 activeChatMode 的变化，用于调试\n         * @param {String} newMode - 新的模式\n         * @param {String} oldMode - 旧的模式\n         */\n        activeChatMode: {\n            handler(newMode = null, oldMode = null) {\n                uni.__f__('log', 'at pages_AI_Login_Match/AI/ai-chat/ModeSelector.vue:139', 'ModeSelector activeChatMode 发生变化:', new UTSJSONObject({\n                    oldMode,\n                    newMode,\n                    timestamp: new Date().toLocaleTimeString()\n                }));\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        /**\n         * @description 切换对话模式\n         * @param {String} mode - 对话模式\n         */\n        switchMode(mode = null) {\n            uni.__f__('log', 'at pages_AI_Login_Match/AI/ai-chat/ModeSelector.vue:154', 'switchMode 被调用:', new UTSJSONObject({\n                targetMode: mode,\n                currentActiveChatMode: this.activeChatMode,\n                vuexChatMode: this.vuexChatMode,\n                shouldProceed: this.activeChatMode !== mode\n            }));\n            if (this.activeChatMode === mode) {\n                uni.__f__('log', 'at pages_AI_Login_Match/AI/ai-chat/ModeSelector.vue:162', '模式相同，跳过切换');\n                return null;\n            }\n            uni.__f__('log', 'at pages_AI_Login_Match/AI/ai-chat/ModeSelector.vue:166', 'ModeSelector 用户主动切换模式:', new UTSJSONObject({\n                from: this.activeChatMode,\n                to: mode\n            }));\n            // 创建新对话状态 - 这会清空当前对话并设置新的聊天模式\n            this.$store.commit('user/aiChat/CREATE_NEW_CONVERSATION', new UTSJSONObject({\n                chatMode: mode\n            }));\n            // 验证状态是否已更新\n            this.$nextTick(() => {\n                uni.__f__('log', 'at pages_AI_Login_Match/AI/ai-chat/ModeSelector.vue:178', 'switchMode 状态更新后验证:', new UTSJSONObject({\n                    targetMode: mode,\n                    vuexChatMode: this.vuexChatMode,\n                    activeChatMode: this.activeChatMode,\n                    stateUpdated: this.vuexChatMode === mode\n                }));\n                // 如果状态没有正确更新，强制更新\n                if (this.vuexChatMode !== mode) {\n                    uni.__f__('warn', 'at pages_AI_Login_Match/AI/ai-chat/ModeSelector.vue:187', '状态更新失败，尝试直接更新 chatMode');\n                    this.$store.commit('user/aiChat/UPDATE_CHAT_MODE', mode);\n                    this.$forceUpdate();\n                }\n            });\n            // 通知父组件模式已切换，需要开始新对话\n            this.$emit('modeChange', new UTSJSONObject({\n                mode: mode,\n                isNewConversation: true,\n                action: 'switch'\n            }));\n            uni.__f__('log', 'at pages_AI_Login_Match/AI/ai-chat/ModeSelector.vue:200', '已切换到新模式并准备新对话:', mode);\n        }\n    }\n});\n//# sourceMappingURL=E:/%E7%A0%94%E5%B8%88%E5%BD%95%E4%B8%8E%E5%85%B6%E4%BB%96%E4%BA%BA%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/teacherDirectory/vue%E5%AE%9E%E7%8E%B0Lottie%E5%8A%A8%E7%94%BB%E4%BB%A3%E7%A0%81/pages_AI_Login_Match/AI/ai-chat/ModeSelector.vue?vue&type=script&lang.uts.js.map","references":["E:/HBuilderX/HBuilderX.4.45.2025010502/HBuilderX/plugins/uniapp-cli-vite/node_modules/vuex/types/index.d.ts"],"uniExtApis":["uni.__f__"],"map":"{\"version\":3,\"file\":\"ModeSelector.vue?vue&type=script&lang.uts.js\",\"sourceRoot\":\"\",\"sources\":[\"ModeSelector.vue?vue&type=script&lang.uts\"],\"names\":[],\"mappings\":\"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\"}"}
