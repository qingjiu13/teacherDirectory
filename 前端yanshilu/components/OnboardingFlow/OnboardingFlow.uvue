<template>
  <view v-if="showContent">
    <!-- 引导蒙层 -->
    <view v-if="showGuide" class="guide-mask" :style="{ backgroundColor: maskColor }">
      <view class="highlight-box" :style="highlightStyle"></view>
      
      <view class="guide-content" :style="guidePosition">
        <view class="guide-title">{{ currentStep.title || '' }}</view>
        <view class="guide-text">{{ currentStep.content }}</view>
        <view class="guide-buttons">
          <button size="mini" @click="prevStep" v-if="currentStepIndex > 0">上一步</button>
          <button size="mini" type="primary" :style="{ backgroundColor: primaryColor }" @click="nextStep">
            {{ isLastStep ? '完成' : '下一步' }}
          </button>
        </view>
      </view>
    </view>
    
    <!-- 卡片布局 -->
    <view v-if="showCards" class="cards-container">
      <view class="cards-grid">
        <view 
          v-for="(card, index) in cards" 
          :key="card.id || index" 
          class="card-item"
          @click="handleCardClick(card)"
        >
          <image class="card-icon" :src="card.icon" mode="aspectFit"></image>
          <view class="card-title">{{ card.title }}</view>
          <view class="card-rating">
            <text v-for="i in 5" :key="i" class="rating-star" 
                 :class="{ active: i <= card.rating }">★</text>
          </view>
          <view class="card-description">{{ card.description }}</view>
          <button 
            class="card-button" 
            :style="{ backgroundColor: primaryColor }"
            v-if="card.buttonText"
          >{{ card.buttonText }}</button>
        </view>
      </view>
    </view>
    
    <!-- 卡片详情弹窗 -->
    <view v-if="showCardDetail" class="card-detail-modal">
      <view class="card-detail-content">
        <view class="card-detail-close" @click="closeCardDetail">×</view>
        <image class="card-detail-icon" :src="selectedCard.icon" mode="aspectFit"></image>
        <view class="card-detail-title">{{ selectedCard.title }}</view>
        <view class="card-detail-rating">
          <text v-for="i in 5" :key="i" class="rating-star"
               :class="{ active: i <= selectedCard.rating }">★</text>
        </view>
        <view class="card-detail-description">{{ selectedCard.description }}</view>
        <button 
          class="card-detail-button" 
          :style="{ backgroundColor: primaryColor }"
          v-if="selectedCard.buttonText"
        >{{ selectedCard.buttonText }}</button>
      </view>
    </view>
  </view>
</template>

<script>
import { ref, computed, onMounted, onUnmounted } from 'vue';

/**
 * @description 可复用新手引导组件
 */
export default {
  props: {
    // 引导步骤配置
    steps: {
      type: Array,
      default: () => []
    },
    // 完成引导后显示的卡片数据
    cards: {
      type: Array,
      default: () => []
    },
    // 遮罩颜色
    maskColor: {
      type: String,
      default: 'rgba(0,0,0,0.5)'
    },
    // 主题色
    primaryColor: {
      type: String,
      default: '#2563eb'
    },
    // 引导标识符，用于localStorage存储
    guideKey: {
      type: String,
      default: 'guideCompleted'
    }
  },
  
  setup(props, { emit }) {
    const showContent = ref(true);
    const showGuide = ref(false);
    const showCards = ref(false);
    const showCardDetail = ref(false);
    const selectedCard = ref({});
    const currentStepIndex = ref(0);
    const highlightStyle = ref({});
    const guidePosition = ref({});
    
    // 计算属性
    const currentStep = computed(() => {
      return props.steps[currentStepIndex.value] || {};
    });
    
    const isLastStep = computed(() => {
      return currentStepIndex.value === props.steps.length - 1;
    });
    
    // 检查引导是否已完成
    function checkGuideCompleted() {
      try {
        return uni.getStorageSync(props.guideKey) === 'true';
      } catch (e) {
        console.error('获取引导状态失败', e);
        return false;
      }
    }
    
    // 初始化引导
    function initGuide() {
      if (props.steps && props.steps.length > 0) {
        if (!checkGuideCompleted()) {
          currentStepIndex.value = 0;
          showGuide.value = true;
          showCards.value = false;
          
          // 确保DOM更新后再计算位置
          setTimeout(() => {
            updateHighlight();
          }, 300);
        } else if (props.cards && props.cards.length > 0) {
          // 如果引导已完成且有卡片数据，直接显示卡片
          showGuide.value = false;
          showCards.value = true;
        } else {
          // 如果既没有引导也没有卡片，不显示任何内容
          showContent.value = false;
        }
      }
    }
    
    // 更新高亮区域
    function updateHighlight() {
      if (!currentStep.value || !currentStep.value.target) return;
      
      const query = uni.createSelectorQuery();
      query.select(`#${currentStep.value.target}`).boundingClientRect(data => {
        if (!data) {
          console.warn(`目标元素 #${currentStep.value.target} 不存在，自动跳过`);
          
          // 如果目标元素不存在，自动进入下一步
          if (isLastStep.value) {
            completeGuide();
          } else {
            currentStepIndex.value++;
            setTimeout(() => updateHighlight(), 100);
          }
          return;
        }
        
        // 设置高亮区域样式
        highlightStyle.value = {
          width: `${data.width}px`,
          height: `${data.height}px`,
          left: `${data.left}px`,
          top: `${data.top}px`
        };
        
        // 计算引导内容位置
        const placement = currentStep.value.placement || 'bottom';
        const guidePos = calculateGuidePosition(data, placement);
        
        // 应用位置
        guidePosition.value = {
          left: `${guidePos.x}px`,
          top: `${guidePos.y}px`
        };
      }).exec();
    }
    
    // 计算引导内容位置
    function calculateGuidePosition(targetRect, placement) {
      const offset = 20;
      const viewportWidth = uni.getSystemInfoSync().windowWidth;
      const viewportHeight = uni.getSystemInfoSync().windowHeight;
      const contentWidth = 300; // 估计的内容宽度
      const contentHeight = 150; // 估计的内容高度
      
      let position = { x: 0, y: 0 };
      
      switch(placement) {
        case 'bottom':
          position = {
            x: targetRect.left + (targetRect.width / 2) - (contentWidth / 2),
            y: targetRect.top + targetRect.height + offset
          };
          break;
        case 'top':
          position = {
            x: targetRect.left + (targetRect.width / 2) - (contentWidth / 2),
            y: targetRect.top - contentHeight - offset
          };
          break;
        case 'left':
          position = {
            x: targetRect.left - contentWidth - offset,
            y: targetRect.top + (targetRect.height / 2) - (contentHeight / 2)
          };
          break;
        case 'right':
          position = {
            x: targetRect.left + targetRect.width + offset,
            y: targetRect.top + (targetRect.height / 2) - (contentHeight / 2)
          };
          break;
        default:
          position = {
            x: targetRect.left + (targetRect.width / 2) - (contentWidth / 2),
            y: targetRect.top + targetRect.height + offset
          };
      }
      
      // 防止内容超出视口
      position.x = Math.max(10, Math.min(position.x, viewportWidth - contentWidth - 10));
      position.y = Math.max(10, Math.min(position.y, viewportHeight - contentHeight - 10));
      
      return position;
    }
    
    // 下一步
    function nextStep() {
      if (isLastStep.value) {
        completeGuide();
      } else {
        currentStepIndex.value++;
        setTimeout(() => {
          updateHighlight();
        }, 100);
      }
    }
    
    // 上一步
    function prevStep() {
      if (currentStepIndex.value > 0) {
        currentStepIndex.value--;
        setTimeout(() => {
          updateHighlight();
        }, 100);
      }
    }
    
    // 完成引导
    function completeGuide() {
      showGuide.value = false;
      try {
        uni.setStorageSync(props.guideKey, 'true');
      } catch (e) {
        console.error('保存引导状态失败', e);
      }
      
      // 触发完成事件
      emit('complete');
      
      // 如果有卡片数据，显示卡片布局
      if (props.cards && props.cards.length > 0) {
        showCards.value = true;
      } else {
        showContent.value = false;
      }
    }
    
    // 处理卡片点击
    function handleCardClick(card) {
      selectedCard.value = card;
      showCardDetail.value = true;
      emit('card-click', card);
    }
    
    // 关闭卡片详情
    function closeCardDetail() {
      showCardDetail.value = false;
    }
    
    // 手动重启引导
    function restartGuide() {
      try {
        uni.removeStorageSync(props.guideKey);
      } catch (e) {
        console.error('清除引导状态失败', e);
      }
      
      currentStepIndex.value = 0;
      showGuide.value = true;
      showCards.value = false;
      showCardDetail.value = false;
      showContent.value = true;
      
      setTimeout(() => {
        updateHighlight();
      }, 300);
    }
    
    // uni-app环境不支持window，改用页面生命周期钩子
    let resizeTimer = null;
    
    // 生命周期：组件挂载完成时初始化
    onMounted(() => {
      initGuide();
    });
    
    return {
      // 状态
      showContent,
      showGuide,
      showCards,
      showCardDetail,
      currentStepIndex,
      highlightStyle,
      guidePosition,
      selectedCard,
      
      // 计算属性
      currentStep,
      isLastStep,
      
      // 方法
      nextStep,
      prevStep,
      handleCardClick,
      closeCardDetail,
      restartGuide
    };
  }
}
</script>

<style>
/* 引导部分样式 */
.guide-mask {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 9999;
}

.highlight-box {
  position: absolute;
  box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.5), 0 0 15px rgba(255, 255, 255, 0.5);
  border-radius: 4px;
  z-index: 10000;
}

.guide-content {
  position: absolute;
  background: white;
  padding: 20px;
  border-radius: 12px;
  min-width: 300px;
  max-width: 350px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  z-index: 10001;
}

.guide-title {
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 8px;
  color: #333;
}

.guide-text {
  margin-bottom: 15px;
  font-size: 14px;
  color: #555;
  line-height: 1.5;
}

.guide-buttons {
  display: flex;
  flex-direction: row;
  justify-content: flex-end;
}

.guide-buttons button {
  margin-left: 10px;
}

/* 卡片部分样式 */
.cards-container {
  width: 100%;
  padding: 20px;
  box-sizing: border-box;
}

.cards-grid {
  display: flex;
  flex-wrap: wrap;
  margin: 0 -10px;
}

.card-item {
  width: calc(33.33% - 20px);
  margin: 10px;
  background-color: #fff;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
  box-sizing: border-box;
}

.card-item:active {
  transform: scale(1.02);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.card-icon {
  width: 60px;
  height: 60px;
  margin-bottom: 15px;
}

.card-title {
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 5px;
  color: #333;
}

.card-rating {
  margin-bottom: 10px;
}

.rating-star {
  font-size: 16px;
  color: #ddd;
}

.rating-star.active {
  color: #FFCC00;
}

.card-description {
  font-size: 14px;
  color: #666;
  margin-bottom: 15px;
  line-height: 1.4;
}

.card-button {
  width: 100%;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 8px;
  font-size: 14px;
}

/* 卡片详情弹窗 */
.card-detail-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10010;
}

.card-detail-content {
  width: 80%;
  max-width: 400px;
  background: white;
  border-radius: 12px;
  padding: 30px;
  position: relative;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.2);
}

.card-detail-close {
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 24px;
  color: #999;
  cursor: pointer;
}

.card-detail-icon {
  width: 80px;
  height: 80px;
  margin: 0 auto 20px;
  display: block;
}

.card-detail-title {
  font-size: 20px;
  font-weight: bold;
  text-align: center;
  margin-bottom: 10px;
}

.card-detail-rating {
  text-align: center;
  margin-bottom: 15px;
}

.card-detail-description {
  font-size: 15px;
  color: #444;
  line-height: 1.5;
  margin-bottom: 25px;
}

.card-detail-button {
  width: 100%;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 12px;
  font-size: 16px;
}

/* 响应式布局 */
@media screen and (max-width: 768px) {
  .card-item {
    width: calc(50% - 20px);
  }
}

@media screen and (max-width: 480px) {
  .card-item {
    width: 100%;
  }
  
  .guide-content {
    min-width: 250px;
    max-width: 300px;
  }
}
</style> 