<template>
  <view class="container">
    <view class="title">API调用示例</view>
    
    <view class="section">
      <button type="primary" @click="getUserInfo">获取用户信息</button>
      <view class="result" v-if="userInfo">
        <text>用户信息: {{ JSON.stringify(userInfo) }}</text>
      </view>
    </view>
    
    <view class="section">
      <button type="primary" @click="getPostList">获取帖子列表</button>
      <view class="result" v-if="posts.length">
        <view class="post-item" v-for="(post, index) in posts" :key="index">
          <text>{{ post.title }}</text>
        </view>
      </view>
    </view>
    
    <view class="section">
      <button type="primary" @click="getTeacherList">获取教师列表</button>
      <view class="result" v-if="teachers.length">
        <view class="teacher-item" v-for="(teacher, index) in teachers" :key="index">
          <text>{{ teacher.name }}</text>
        </view>
      </view>
    </view>
    
    <view class="section">
      <button type="primary" @click="getSchools">获取学校列表</button>
      <view class="result" v-if="results">
        <view class="school-item" v-for="(school, index) in results" :key="index">
          <text>{{ school.name }}</text>
        </view>
      </view>
    </view>
  </view>
</template>

<script lang="uts">
  /**
   * @description API调用示例页面
   */
  import API from '../api/index.js';
  import { aiSelectionApis } from '../config.js';
  import callCloudFunction from '../utils/cloudFunction.js';
  
  interface UserInfo {
    id: string;
    username: string;
    nickname: string;
    avatar: string;
  }
  
  interface Post {
    id: string;
    title: string;
    content: string;
    author: string;
  }
  
  interface Teacher {
    id: string;
    name: string;
    school: string;
    major: string;
  }
  
  interface School {
    id: string;
    name: string;
    type: string;
  }
  
  export default {
    data() {
      return {
        userInfo: null as UserInfo | null,
        posts: [] as Post[],
        teachers: [] as Teacher[],
        schools: [] as School[],
        loading: false,
        results: null,
        error: null
      }
    },
    
    onLoad() {
      // 页面加载时自动获取用户信息
      this.getUserInfo();
    },
    
    methods: {
      /**
       * @description 获取用户信息
       */
      async getUserInfo() {
        try {
          uni.showLoading({ title: '加载中...' });
          
          // 调用API获取用户信息
          const res = await API.user.getUserInfo();
          this.userInfo = res as UserInfo;
          
          uni.hideLoading();
        } catch (error) {
          uni.hideLoading();
          
          // 这里使用模拟数据
          this.userInfo = {
            id: '1001',
            username: 'test_user',
            nickname: '测试用户',
            avatar: 'https://example.com/avatar.jpg'
          };
          
          console.log('获取用户信息失败', error);
        }
      },
      
      /**
       * @description 获取帖子列表
       */
      async getPostList() {
        try {
          uni.showLoading({ title: '加载中...' });
          
          // 调用API获取帖子列表
          const res = await API.post.getPosts({ page: 1, pageSize: 10 });
          this.posts = res as Post[];
          
          uni.hideLoading();
        } catch (error) {
          uni.hideLoading();
          
          // 这里使用模拟数据
          this.posts = [
            { id: '1', title: '帖子标题1', content: '帖子内容1', author: '用户1' },
            { id: '2', title: '帖子标题2', content: '帖子内容2', author: '用户2' },
            { id: '3', title: '帖子标题3', content: '帖子内容3', author: '用户3' }
          ];
          
          console.log('获取帖子列表失败', error);
        }
      },
      
      /**
       * @description 获取教师列表
       */
      async getTeacherList() {
        try {
          uni.showLoading({ title: '加载中...' });
          
          // 调用API获取教师列表
          const res = await API.teacher.getTeachers({ page: 1, pageSize: 10 });
          this.teachers = res as Teacher[];
          
          uni.hideLoading();
        } catch (error) {
          uni.hideLoading();
          
          // 这里使用模拟数据
          this.teachers = [
            { id: '1', name: '教师1', school: '北京大学', major: '计算机科学' },
            { id: '2', name: '教师2', school: '清华大学', major: '软件工程' },
            { id: '3', name: '教师3', school: '复旦大学', major: '人工智能' }
          ];
          
          console.log('获取教师列表失败', error);
        }
      },
      
      /**
       * @description 调用获取学校列表的云函数
       */
      async getSchools() {
        this.loading = true;
        this.results = null;
        this.error = null;
        
        try {
          // 使用封装的云函数调用工具
          const result = await callCloudFunction({
            name: aiSelectionApis.getSchools,
            data: {},
            timeout: 10000
          });
          
          this.results = result.result;
        } catch (error) {
          this.error = error.message;
          console.error('获取学校列表失败:', error);
        } finally {
          this.loading = false;
        }
      },
      
      /**
       * @description 调用获取研究生专业列表的云函数
       */
      async getGraduateMajors() {
        this.loading = true;
        this.results = null;
        this.error = null;
        
        try {
          // 使用封装的云函数调用工具
          const result = await callCloudFunction({
            name: aiSelectionApis.getGraduateMajors,
            data: { keyword: '计算机' },
            timeout: 10000
          });
          
          this.results = result.result;
        } catch (error) {
          this.error = error.message;
          console.error('获取研究生专业列表失败:', error);
        } finally {
          this.loading = false;
        }
      }
    }
  }
</script>

<style>
  .container {
    padding: 30rpx;
  }
  
  .title {
    font-size: 40rpx;
    font-weight: bold;
    margin-bottom: 30rpx;
    text-align: center;
  }
  
  .section {
    margin-bottom: 30rpx;
    padding: 20rpx;
    border: 1rpx solid #eee;
    border-radius: 10rpx;
  }
  
  .result {
    margin-top: 20rpx;
    padding: 20rpx;
    background-color: #f8f8f8;
    border-radius: 10rpx;
  }
  
  .post-item, .teacher-item, .school-item {
    padding: 10rpx 0;
    border-bottom: 1rpx solid #eee;
  }
</style> 