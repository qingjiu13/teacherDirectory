<template>
	<view class="container">
		<view class="header">
			<view class="back-button" @click="goBack" id="step1">
				<text>返回</text>
			</view>
			<text class="title">精准匹配</text>
		</view>
		
		<!-- 筛选区域 -->
		<view class="filter-section">
			<view class="filter-item" :class="{ active: activeDropdown === 'school' }" @click.stop="toggleDropdown('school')">
				<text class="filter-text">{{ selectedSchool || '请选择学校' }}</text>
				<image class="dropdown-icon" :src="'/static/image/arrow_down.svg'" mode="aspectFit"></image>
				
				<!-- 学校下拉菜单 -->
				<view class="dropdown-menu" v-if="activeDropdown === 'school'">
					<view class="dropdown-item" :class="{ selected: selectedSchool === school }" v-for="(school, index) in schools" :key="index" @click.stop="selectFromDropdown('school', school)">
						<text>{{ school }}</text>
					</view>
				</view>
			</view>
			
			<view class="filter-item" :class="{ active: activeDropdown === 'major' }" @click.stop="toggleDropdown('major')">
				<text class="filter-text">{{ selectedMajor || '请选择专业' }}</text>
				<image class="dropdown-icon" :src="'/static/image/arrow_down.svg'" mode="aspectFit"></image>
				
				<!-- 专业下拉菜单 -->
				<view class="dropdown-menu" v-if="activeDropdown === 'major'">
					<view class="dropdown-item" :class="{ selected: selectedMajor === major }" v-for="(major, index) in majors" :key="index" @click.stop="selectFromDropdown('major', major)">
						<text>{{ major }}</text>
					</view>
				</view>
			</view>
			
			<view class="filter-item" :class="{ active: activeDropdown === 'sort' }" @click.stop="toggleDropdown('sort')">
				<text class="filter-text">{{ selectedSort || '排序筛选' }}</text>
				<image class="dropdown-icon" :src="'/static/image/arrow_down.svg'" mode="aspectFit"></image>
				
				<!-- 排序下拉菜单 -->
				<view class="dropdown-menu" v-if="activeDropdown === 'sort'">
					<view class="dropdown-item" :class="{ selected: selectedSort === sort }" v-for="(sort, index) in ['综合排序', '评分排序']" :key="index" @click.stop="selectFromDropdown('sort', sort)">
						<text>{{ sort }}</text>
					</view>
				</view>
			</view>
		</view>
		
		<!-- 老师卡片列表 -->
		<scroll-view class="card-list" scroll-y="true" id="step2">
			<view class="teacher-card" v-for="(teacher, index) in filteredTeachers" :key="index">
				<view class="card-left">
					<image class="teacher-avatar" :src="teacher.avatar || '/static/image/default_avatar.svg'" mode="aspectFill" @tap="viewTeacherDetail(teacher.id)" hover-class="avatar-hover"></image>
				</view>
				<view class="card-middle">
					<view class="teacher-name">{{ teacher.nickname }}</view>
					<view class="teacher-info">{{ teacher.title || '教授' }} | {{ teacher.major }} | {{ teacher.score }}</view>
					<view class="teacher-tags">
						<view class="tag" v-for="(tag, tagIndex) in teacher.tags" :key="tagIndex">{{ tag }}</view>
					</view>
				</view>
				<view class="card-right">
					<button class="communicate-btn" @click.stop="handleCommunicate(teacher.id)">马上沟通</button>
				</view>
			</view>
			
			<view class="empty-state" v-if="filteredTeachers.length === 0">
				<text>暂无匹配的老师信息</text>
			</view>
		</scroll-view>
		
		<!-- 加载提示 -->
		<view class="loading-mask" v-if="isLoading">
			<view class="loading-content">
				<text>正在连接中...</text>
			</view>
		</view>
		
		<!-- 教师详情弹窗 -->
		<view class="teacher-detail-popup" v-if="showTeacherDetail">
			<view class="popup-mask" @tap="closeTeacherDetail"></view>
			<view class="popup-content">
				<view class="teacher-header">
					<image class="teacher-large-avatar" :src="currentTeacher.avatar || '/static/image/default_avatar.png'" mode="aspectFill"></image>
					<view class="teacher-header-info">
						<view class="teacher-header-name">{{ currentTeacher.nickname }}</view>
						<view class="teacher-header-title">{{ currentTeacher.title }} | {{ currentTeacher.school }}</view>
					</view>
				</view>
				
				<view class="detail-tabs">
					<view class="tab" :class="{ active: activeTab === 'chat' }" @tap="switchTab('chat')">
						<text>聊天</text>
					</view>
					<view class="tab" :class="{ active: activeTab === 'profile' }" @tap="switchTab('profile')">
						<text>老师详情</text>
					</view>
				</view>
				
				<view class="tab-content">
					<view v-if="activeTab === 'chat'" class="chat-tip">
						<button class="start-chat-btn" @tap="startChat">马上沟通</button>
					</view>
					
					<view v-if="activeTab === 'profile'" class="profile-content">
						<view class="profile-section">
							<view class="section-title">专业背景</view>
							<view class="section-content">{{ currentTeacher.background || '暂无介绍' }}</view>
						</view>
						
						<view class="profile-section">
							<view class="section-title">教学经验</view>
							<view class="section-content">{{ currentTeacher.experience || '暂无介绍' }}</view>
						</view>
						
						<view class="profile-section">
							<view class="section-title">擅长领域</view>
							<view class="section-content">
								<view class="expertise-tags">
									<view class="expertise-tag" v-for="(tag, index) in currentTeacher.expertise || []" :key="index">
										{{ tag }}
									</view>
								</view>
							</view>
						</view>
						
						<button class="view-profile-btn" @tap="viewTeacherProfile">查看完整主页</button>
					</view>
				</view>
			</view>
		</view>
		
		<!-- 匹配计时器 -->
		<view class="matching-timer" v-if="isMatching">
			<view class="timer-text">匹配中</view>
			<view class="timer-countdown">{{ matchingTime }}秒</view>
			<button class="cancel-btn" @tap="cancelMatching">取消匹配</button>
		</view>
		
		<!-- 底部导航栏 -->
		<tab-bar pageName="none"></tab-bar>
	</view>
</template>

<script>
	import TabBar from '../../components/tab-bar/tab-bar.uvue';
	import { pageMap } from '@/config.js';
	import Routes from '../../utils/routes.js';

	/**
	 * @description 精准匹配页面
	 */
	export default {
		components: {
			TabBar
		},
		data() {
			return {
				// 筛选相关数据
				activeDropdown: '', // 当前激活的下拉菜单
				selectedSchool: '',
				selectedMajor: '',
				selectedSort: '综合排序',
				schools: ['北京大学', '清华大学', '复旦大学', '浙江大学', '南京大学'],
				majors: ['计算机科学', '软件工程', '数学', '物理', '化学', '生物'],
				
				// 环境检测
				isWebEnv: true, // 默认假设是Web环境
				
				// 加载状态
				isLoading: false,
				
				// 老师数据
				teachers: [
					{
						id: 1,
						nickname: '王教授',
						avatar: '/static/image/default_avatar.png',
						school: '北京大学',
						major: '计算机科学',
						title: '教授',
						score: '考研400分',
						tags: ['认证学校', '经验丰富']
					},
					{
						id: 2,
						nickname: '李博士',
						avatar: '/static/image/default_avatar.png',
						school: '清华大学',
						major: '软件工程',
						title: '副教授',
						score: '考研390分',
						tags: ['认证学校', '教学认真']
					},
					{
						id: 3,
						nickname: '张老师',
						avatar: '/static/image/default_avatar.png',
						school: '复旦大学',
						major: '数学',
						title: '讲师',
						score: '考研380分',
						tags: ['认证学校', '耐心细致']
					},
					{
						id: 4,
						nickname: '刘教授',
						avatar: '/static/image/default_avatar.png',
						school: '浙江大学',
						major: '物理',
						title: '教授',
						score: '考研410分',
						tags: ['认证学校', '通俗易懂']
					},
					{
						id: 5,
						nickname: '陈老师',
						avatar: '/static/image/default_avatar.png',
						school: '南京大学',
						major: '化学',
						title: '副教授',
						score: '考研385分',
						tags: ['认证学校', '答疑及时']
					}
				],
				showTeacherDetail: false,
				currentTeacher: null,
				activeTab: 'chat',
				isMatching: false,
				matchingTime: 60,
				showCancelButton: true,
				matchingTimer: null
			}
		},
		computed: {
			/**
			 * @description 根据筛选条件过滤老师列表
			 * @return {Array} 过滤后的老师列表
			 */
			filteredTeachers() {
				// 创建源数据的副本
				let result = [...this.teachers];
				
				try {
					// 按学校筛选
					if (this.selectedSchool) {
						result = result.filter(teacher => teacher.school === this.selectedSchool);
					}
					
					// 按专业筛选
					if (this.selectedMajor) {
						result = result.filter(teacher => teacher.major === this.selectedMajor);
					}
					
					// 排序
					if (this.selectedSort === '评分排序') {
						// 根据分数进行排序，提取数字部分
						result.sort((a, b) => {
							try {
								const scoreA = parseInt(a.score.match(/\d+/)[0]);
								const scoreB = parseInt(b.score.match(/\d+/)[0]);
								return scoreB - scoreA; // 降序排列
							} catch (error) {
								console.error('分数排序异常:', error);
								return 0; // 排序出错时保持原顺序
							}
						});
					} else {
						// 综合排序，可以根据业务需求实现
						// 这里简单实现为按ID排序
						result.sort((a, b) => a.id - b.id);
					}
				} catch (error) {
					console.error('筛选处理异常:', error);
					// 发生异常时返回原始数据
					return this.teachers;
				}
				
				return result;
			}
		},
		// 确保此页面能被正确路由
		onReady() {
			console.log('Match page ready');
			// 初始化数据
			this.initFilterData();
			// 检测当前环境
			this.detectEnvironment();
			
			// 调试下拉菜单状态
			console.log('初始下拉菜单状态:', this.activeDropdown);
		},
		// 页面显示时添加点击事件监听
		onShow() {
			// 添加全局点击事件处理
			setTimeout(() => {
				// 只在非App环境中使用document方法
				if (this.isWebEnv) {
					// 移除可能存在的旧监听器，避免重复添加
					document.removeEventListener('click', this.handleGlobalClick);
					// 添加新的监听器
					document.addEventListener('click', this.handleGlobalClick);
					console.log('全局点击事件监听已添加');
				}
			}, 200);
		},
		// 页面隐藏时移除点击事件监听
		onHide() {
			// 只在非App环境中使用document方法
			if (this.isWebEnv) {
				document.removeEventListener('click', this.handleGlobalClick);
				console.log('全局点击事件监听已移除');
			}
		},
		// 页面卸载时移除点击事件监听
		onUnload() {
			// 只在非App环境中使用document方法
			if (this.isWebEnv) {
				document.removeEventListener('click', this.handleGlobalClick);
			}
		},
		watch: {
			/**
			 * @description 监听筛选条件变化
			 */
			selectedSchool() {
				console.log('学校变更为:', this.selectedSchool);
				// 这里可以添加额外的处理逻辑，例如加载专业列表等
			},
			selectedMajor() {
				console.log('专业变更为:', this.selectedMajor);
			},
			selectedSort() {
				console.log('排序方式变更为:', this.selectedSort);
			}
		},
		methods: {
			/**
			 * @description 检测当前运行环境
			 */
			detectEnvironment() {
				// 检测是否为Web环境
				try {
					// 在小程序等非Web环境下，document可能不存在或表现不同
					this.isWebEnv = typeof document !== 'undefined' && !!document.body;
					
					// 获取系统信息
					const systemInfo = uni.getSystemInfoSync();
					console.log('当前环境:', systemInfo);
					
					// App环境标识
					if (systemInfo.uniPlatform === 'app') {
						this.isWebEnv = false;
					}
				} catch (e) {
					console.error('环境检测失败:', e);
					this.isWebEnv = false; // 出错时假设非Web环境，避免调用不兼容方法
				}
			},
			
			/**
			 * @description 初始化筛选数据
			 */
			initFilterData() {
				// 此方法可用于从API加载学校和专业数据
				// 示例：
				// this.getSchoolList();
				// this.getMajorList();
				
				// 如果有缓存或上次选择的数据，可以在这里恢复
				const cachedSchool = uni.getStorageSync('selectedSchool');
				const cachedMajor = uni.getStorageSync('selectedMajor');
				const cachedSort = uni.getStorageSync('selectedSort');
				
				if (cachedSchool) this.selectedSchool = cachedSchool;
				if (cachedMajor) this.selectedMajor = cachedMajor;
				if (cachedSort) this.selectedSort = cachedSort;
				
				console.log("初始化筛选数据完成:", {
					schools: this.schools,
					majors: this.majors,
					selectedSchool: this.selectedSchool,
					selectedMajor: this.selectedMajor
				});
			},
			
			/**
			 * @description 处理全局点击事件，用于关闭下拉菜单
			 * @param {Event} event - 点击事件对象
			 */
			handleGlobalClick(event) {
				// 如果没有打开的下拉菜单，不处理
				if (!this.activeDropdown) {
					return;
				}
				
				// 使用原生DOM API判断点击元素
				try {
					const target = event.target;
					let isFilterItemOrDropdown = false;
					
					// 向上查找父元素
					let currentElement = target;
					while (currentElement && currentElement !== document.body) {
						if (currentElement.classList) {
							if (currentElement.classList.contains('filter-item') || 
								currentElement.classList.contains('dropdown-menu') || 
								currentElement.classList.contains('dropdown-item')) {
								isFilterItemOrDropdown = true;
								break;
							}
						}
						currentElement = currentElement.parentElement;
					}
					
					// 如果点击的不是筛选项或下拉菜单，则关闭所有下拉菜单
					if (!isFilterItemOrDropdown) {
						console.log('点击了筛选区域外部，关闭所有下拉菜单');
						this.closeAllDropdowns();
					} else {
						console.log('点击了筛选或下拉菜单区域，保持菜单状态');
					}
				} catch (error) {
					console.error('处理全局点击事件失败:', error);
					// 出错时关闭所有下拉菜单（安全处理）
					this.closeAllDropdowns();
				}
			},
			
			/**
			 * @description 返回上一页
			 */
			goBack() {
				uni.navigateBack();
			},
			
			/**
			 * @description 切换下拉菜单的显示状态
			 * @param {String} dropdown - 下拉菜单的标识
			 */
			toggleDropdown(dropdown) {
				console.log('切换下拉菜单:', dropdown, '当前状态:', this.activeDropdown);
				
				// 更新下拉菜单状态
				if (this.activeDropdown === dropdown) {
					// 如果当前菜单已打开，则关闭
					this.activeDropdown = '';
					console.log('关闭下拉菜单:', dropdown);
				} else {
					// 关闭其他打开的菜单，打开当前菜单
					this.activeDropdown = dropdown;
					console.log('打开下拉菜单:', dropdown);
				}
			},
			
			/**
			 * @description 关闭所有下拉菜单
			 */
			closeAllDropdowns() {
				this.activeDropdown = '';
			},
			
			/**
			 * @description 从下拉菜单中选择项目
			 * @param {String} type - 类型（school、major、sort）
			 * @param {String} value - 选择的值
			 */
			selectFromDropdown(type, value) {
				console.log(`选择${type}:`, value);
				
				// 根据类型设置选中的值
				if (type === 'school') {
					this.selectedSchool = value;
					
					// 保存选择到本地存储
					try {
						uni.setStorageSync('selectedSchool', value);
					} catch (e) {
						console.error('保存学校选择失败', e);
					}
					
					console.log("已选择学校:", value);
				} else if (type === 'major') {
					this.selectedMajor = value;
					
					// 保存选择到本地存储
					try {
						uni.setStorageSync('selectedMajor', value);
					} catch (e) {
						console.error('保存专业选择失败', e);
					}
					
					console.log("已选择专业:", value);
				} else if (type === 'sort') {
					this.selectedSort = value;
					
					// 保存选择到本地存储
					try {
						uni.setStorageSync('selectedSort', value);
					} catch (e) {
						console.error('保存排序选择失败', e);
					}
					
					console.log("已选择排序方式:", value);
				}
				
				// 关闭下拉菜单
				this.closeAllDropdowns();
			},
			
			/**
			 * @description 处理"马上沟通"按钮点击
			 * @param {Number} teacherId - 老师的ID
			 */
			handleCommunicate(teacherId) {
				// 显示加载提示
				this.isLoading = true;
				
				// 模拟API调用延迟
				setTimeout(() => {
					this.isLoading = false;
					
					try {
						// 在实际应用中，这里应该调用Box-IM的API
						console.log(`打开与老师${teacherId}的聊天窗口`);
						
						// 假设有一个全局的boxIM对象
						if (window.boxIM && typeof window.boxIM.openChat === 'function') {
							window.boxIM.openChat(teacherId);
						} else {
							// 如果没有找到Box-IM的API，模拟一个成功的跳转
							uni.showToast({
								title: '正在打开聊天窗口',
								icon: 'none'
							});
							
							// 这里可以跳转到一个聊天页面
							// uni.navigateTo({
							//   url: `/pages/chat/chat?teacherId=${teacherId}`
							// });
						}
					} catch (error) {
						console.error('打开聊天窗口失败:', error);
						uni.showToast({
							title: '老师当前不在线，请稍后再试',
							icon: 'none'
						});
					}
				}, 1000);
			},
			
			/**
			 * @description 显示选择弹出框
			 * @param {String} type - 弹出框类型
			 */
			showPickerPopup(type) {
				console.log('显示选择弹出框:', type);
				
				// 打开对应的弹出框
				this.$refs[`${type}Popup`].open();
			},
			
			/**
			 * @description 关闭弹出框
			 * @param {String} type - 弹出框类型
			 */
			closePopup(type) {
				console.log('关闭弹出框:', type);
				
				// 关闭对应的弹出框
				this.$refs[`${type}Popup`].close();
			},
			
			/**
			 * @description 处理无匹配结果的情况
			 */
			handleNoMatchResult() {
				// 显示相关推荐
				uni.showModal({
					title: '暂无精确匹配',
					content: '是否查看相关推荐？（同专业其他学校或相关专业）',
					confirmText: '查看推荐',
					cancelText: '取消',
					success: (res) => {
						if (res.confirm) {
							// 获取相关推荐
							this.getRelatedTeachers();
						} else {
							// 用户取消，可以显示空状态
							console.log('用户取消查看推荐');
						}
					}
				});
			},
			
			/**
			 * @description 获取相关推荐教师
			 */
			getRelatedTeachers() {
				// 显示加载状态
				this.isLoading = true;
				
				// 准备参数（放宽筛选条件）
				const params = {
					major: this.selectedMajor || '',
					isRelated: true // 标记为相关推荐请求
				};
				
				// 调用API获取相关教师
				uni.request({
					url: '您的API地址/api/related-teachers',
					method: 'GET',
					data: params,
					success: (res) => {
						if (res.statusCode === 200 && res.data) {
							this.teachers = res.data.teachers || [];
							
							if (this.teachers.length > 0) {
								uni.showToast({
									title: '已显示相关推荐',
									icon: 'none'
								});
							} else {
								// 所有规则都失效的情况
								this.startMatchingTimer();
							}
						}
					},
					complete: () => {
						this.isLoading = false;
					}
				});
			},
			
			/**
			 * @description 开始匹配计时器
			 */
			startMatchingTimer() {
				// 显示匹配中状态
				this.isMatching = true;
				this.matchingTime = 60; // 60秒倒计时
				this.showCancelButton = true;
				
				// 开始倒计时
				this.matchingTimer = setInterval(() => {
					this.matchingTime--;
					
					if (this.matchingTime <= 0) {
						// 停止计时器
						clearInterval(this.matchingTimer);
						
						// 显示优惠提示
						this.showLongTermMatchingTip();
					}
				}, 1000);
			},
			
			/**
			 * @description 取消匹配
			 */
			cancelMatching() {
				if (this.matchingTimer) {
					clearInterval(this.matchingTimer);
					this.matchingTimer = null;
				}
				
				this.isMatching = false;
				this.showCancelButton = false;
				
				uni.showToast({
					title: '已取消匹配',
					icon: 'none'
				});
			},
			
			/**
			 * @description 显示长期匹配提示
			 */
			showLongTermMatchingTip() {
				this.isMatching = false;
				
				uni.showModal({
					title: '匹配超时',
					content: '我们将在后台继续为您匹配合适的老师，并提供优惠。是否继续等待？',
					confirmText: '继续等待',
					cancelText: '取消',
					success: (res) => {
						if (res.confirm) {
							// 发送后台长期匹配请求
							this.startLongTermMatching();
						} else {
							// 用户取消
							uni.showToast({
								title: '已取消匹配',
								icon: 'none'
							});
						}
					}
				});
			},
			
			/**
			 * @description 开始后台长期匹配
			 */
			startLongTermMatching() {
				// 调用API启动后台匹配任务
				uni.request({
					url: '您的API地址/api/long-term-matching',
					method: 'POST',
					data: {
						school: this.selectedSchool,
						major: this.selectedMajor,
						userId: '当前用户ID' // 需要从全局状态或存储中获取
					},
					success: (res) => {
						if (res.statusCode === 200) {
							uni.showToast({
								title: '已启动后台匹配',
								icon: 'none'
							});
						}
					}
				});
			},
			
			/**
			 * @description 打开教师详情弹窗
			 * @param {Object} teacher - 教师对象
			 */
			showTeacherDetailPopup(teacher) {
				this.currentTeacher = teacher;
				this.showTeacherDetail = true;
				this.activeTab = 'chat'; // 默认显示聊天选项卡
			},
			
			/**
			 * @description 关闭教师详情弹窗
			 */
			closeTeacherDetail() {
				this.showTeacherDetail = false;
			},
			
			/**
			 * @description 切换选项卡
			 * @param {String} tab - 选项卡名称
			 */
			switchTab(tab) {
				this.activeTab = tab;
			},
			
			/**
			 * @description 开始聊天
			 */
			startChat() {
				// 关闭弹窗
				this.closeTeacherDetail();
				
				// 调用Box-IM打开聊天
				if (this.currentTeacher) {
					this.handleCommunicate(this.currentTeacher.id);
				}
			},
			
			/**
			 * @description 查看教师完整主页
			 */
			viewTeacherProfile() {
				if (this.currentTeacher) {
					// 导航到教师主页
					Routes.navigator.navigateTo(Routes.teacher.TEACHER_DETAIL, { id: this.currentTeacher.id });
				}
			},
			
			/**
			 * @description 监听滚动到底部
			 */
			onReachBottom() {
				// 如果不是在匹配中状态且列表有内容
				if (!this.isMatching && this.filteredTeachers.length > 0) {
					// 如果已经加载完所有数据
					if (this.isAllLoaded) {
						uni.showToast({
							title: '已经到底啦~',
							icon: 'none'
						});
					} else {
						// 加载更多数据
						this.loadMoreTeachers();
					}
				}
			},
			
			/**
			 * @description 加载更多教师数据
			 */
			loadMoreTeachers() {
				if (this.isLoadingMore) return;
				
				this.isLoadingMore = true;
				this.page++;
				
				// 准备参数
				const params = {
					page: this.page,
					pageSize: this.pageSize,
					school: this.selectedSchool || '',
					major: this.selectedMajor || '',
					sortType: this.selectedSort || '综合排序'
				};
				
				// 调用API加载更多
				uni.request({
					url: '您的API地址/api/teachers',
					method: 'GET',
					data: params,
					success: (res) => {
						if (res.statusCode === 200 && res.data) {
							const newTeachers = res.data.teachers || [];
							
							if (newTeachers.length > 0) {
								// 添加新数据到列表
								this.teachers = [...this.teachers, ...newTeachers];
							} else {
								// 没有更多数据
								this.isAllLoaded = true;
							}
						}
					},
					complete: () => {
						this.isLoadingMore = false;
					}
				});
			},
			
			/**
			 * @description 打开教师详情
			 * @param {Number} teacherId - 教师ID
			 */
			viewTeacherDetail(teacherId) {
				// 跳转到教师详情页
				Routes.navigator.navigateTo(Routes.teacher.TEACHER_DETAIL, { id: teacherId });
			}
		}
	}
</script>

<style>
	/* 全局样式变量 */
	page {
		--primary-color: #1E90FF;
		--primary-light: #87CEEB;
		--primary-dark: #0073CF;
		--gradient-blue: linear-gradient(135deg, #1E90FF, #00BFFF);
		--gradient-blue-light: linear-gradient(135deg, #87CEEB, #48D1CC);
		--text-primary: #333333;
		--text-secondary: #666666;
		--text-light: #999999;
		--bg-color: #F5F9FC;
		--card-shadow: 0 4px 12px rgba(30, 144, 255, 0.1);
		font-family: "PingFang SC", "Helvetica Neue", Arial, sans-serif;
	}
	
	.container {
		display: flex;
		flex-direction: column;
		height: 100vh;
		background-color: var(--bg-color);
	}
	
	.header {
		display: flex;
		flex-direction: row;
		align-items: center;
		padding: 15px 20px;
		background-image: var(--gradient-blue);
		border-bottom-left-radius: 20px;
		border-bottom-right-radius: 20px;
		box-shadow: 0 4px 15px rgba(30, 144, 255, 0.2);
	}
	
	.back-button {
		padding: 8px 15px;
		margin-right: 15px;
		background-color: rgba(255, 255, 255, 0.25);
		border-radius: 20px;
		transition: all 0.3s ease;
	}
	
	.back-button:active {
		transform: scale(0.95);
		background-color: rgba(255, 255, 255, 0.35);
	}
	
	.back-button text {
		color: #ffffff;
		font-weight: 500;
		font-size: 16px;
	}
	
	.title {
		font-size: 20px;
		font-weight: bold;
		color: #ffffff;
		letter-spacing: 1px;
		text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
	}
	
	/* 筛选区域样式 */
	.filter-section {
		display: flex;
		flex-direction: row;
		padding: 12px 15px;
		background-color: #ffffff;
		border-radius: 15px;
		margin: 15px;
		box-shadow: var(--card-shadow);
		position: relative;
		z-index: 1000;
	}
	
	.filter-item {
		flex: 1;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		padding: 8px 0;
		position: relative;
		transition: all 0.3s ease;
	}
	
	.filter-item.active {
		transform: scale(1.02);
	}
	
	.filter-text {
		font-size: 14px;
		color: var(--text-primary);
		margin-right: 5px;
		font-weight: 500;
	}
	
	.filter-item.active .filter-text {
		color: var(--primary-color);
		font-weight: 600;
	}
	
	.dropdown-icon {
		width: 16px;
		height: 16px;
		transition: transform 0.3s;
	}
	
	.filter-item.active .dropdown-icon {
		transform: rotate(180deg);
	}
	
	/* 下拉菜单样式 */
	.dropdown-menu {
		position: absolute;
		top: 100%;
		left: 0;
		width: 100%;
		background-color: #ffffff;
		box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
		z-index: 2001;
		border-radius: 12px;
		max-height: 200px;
		overflow-y: auto;
		margin-top: 8px;
		animation: dropdownFadeIn 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}
	
	@keyframes dropdownFadeIn {
		from {
			opacity: 0;
			transform: translateY(-15px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
	
	.dropdown-item {
		padding: 12px 15px;
		font-size: 14px;
		border-bottom: 1px solid rgba(0, 0, 0, 0.05);
		transition: all 0.3s ease;
	}
	
	.dropdown-item.selected {
		background-image: linear-gradient(to right, rgba(30, 144, 255, 0.1), rgba(0, 191, 255, 0.1));
		color: var(--primary-color);
	}
	
	.dropdown-item.selected text {
		color: var(--primary-color);
		font-weight: bold;
	}
	
	.dropdown-item:active {
		background-color: rgba(135, 206, 235, 0.1);
	}
	
	.dropdown-item:last-child {
		border-bottom: none;
	}
	
	/* 卡片列表样式 */
	.card-list {
		flex: 1;
		padding: 10px 15px;
	}
	
	.teacher-card {
		display: flex;
		flex-direction: row;
		background-color: #ffffff;
		border-radius: 16px;
		padding: 18px;
		margin-bottom: 15px;
		box-shadow: var(--card-shadow);
		transition: transform 0.3s ease, box-shadow 0.3s ease;
	}
	
	.teacher-card:active {
		transform: scale(0.98);
		box-shadow: 0 2px 8px rgba(30, 144, 255, 0.1);
	}
	
	.card-left {
		margin-right: 15px;
	}
	
	.teacher-avatar {
		width: 70px;
		height: 70px;
		border-radius: 35px;
		background-color: #f5f5f5;
		border: 3px solid rgba(30, 144, 255, 0.2);
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
	}
	
	.card-middle {
		flex: 1;
	}
	
	.teacher-name {
		font-size: 18px;
		font-weight: bold;
		margin-bottom: 6px;
		color: var(--text-primary);
		letter-spacing: 0.5px;
	}
	
	.teacher-info {
		font-size: 14px;
		color: var(--text-secondary);
		margin-bottom: 10px;
	}
	
	.teacher-tags {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
	}
	
	.tag {
		font-size: 12px;
		color: #ffffff;
		background-image: var(--gradient-blue-light);
		padding: 3px 10px;
		border-radius: 12px;
		margin-right: 8px;
		margin-bottom: 5px;
		box-shadow: 0 2px 5px rgba(30, 144, 255, 0.2);
	}
	
	.card-right {
		display: flex;
		flex-direction: column;
		justify-content: center;
		margin-left: 10px;
	}
	
	.communicate-btn {
		background-image: var(--gradient-blue);
		color: #ffffff;
		font-size: 14px;
		padding: 8px 15px;
		border-radius: 20px;
		border: none;
		font-weight: 500;
		box-shadow: 0 3px 10px rgba(30, 144, 255, 0.3);
		transition: transform 0.2s ease, box-shadow 0.2s ease;
	}
	
	.communicate-btn:active {
		transform: translateY(2px);
		box-shadow: 0 1px 5px rgba(30, 144, 255, 0.3);
	}
	
	/* 空状态样式 */
	.empty-state {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		height: 200px;
		color: var(--text-light);
		font-size: 16px;
	}
	
	.empty-state text {
		margin-top: 15px;
		color: var(--text-light);
	}
	
	.empty-state::before {
		content: '';
		width: 80px;
		height: 80px;
		background-color: rgba(30, 144, 255, 0.1);
		border-radius: 50%;
		margin-bottom: 15px;
	}
	
	/* 加载提示样式 */
	.loading-mask {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0, 0, 0, 0.6);
		display: flex;
		justify-content: center;
		align-items: center;
		z-index: 1001;
		backdrop-filter: blur(3px);
	}
	
	.loading-content {
		background-color: #ffffff;
		padding: 25px 30px;
		border-radius: 16px;
		box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
		animation: pulse 1.5s infinite alternate;
	}
	
	.loading-content text {
		color: var(--primary-color);
		font-weight: 500;
		font-size: 16px;
	}
	
	@keyframes pulse {
		from {
			box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
		}
		to {
			box-shadow: 0 10px 30px rgba(30, 144, 255, 0.4);
		}
	}
	
	/* 匹配计时器样式 */
	.matching-timer {
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 25px;
		background-color: #ffffff;
		border-radius: 20px;
		margin: 20px;
		box-shadow: var(--card-shadow);
		animation: fadeInUp 0.5s ease-out;
	}
	
	@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(20px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
	
	.timer-text {
		font-size: 18px;
		color: var(--text-primary);
		margin-bottom: 15px;
		font-weight: 500;
	}
	
	.timer-countdown {
		font-size: 32px;
		background: var(--gradient-blue);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		font-weight: bold;
		margin: 15px 0;
	}
	
	.cancel-btn {
		margin-top: 20px;
		padding: 10px 30px;
		background-color: #f5f5f5;
		color: var(--text-secondary);
		border-radius: 25px;
		font-size: 15px;
		font-weight: 500;
		box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
		transition: all 0.3s ease;
	}
	
	.cancel-btn:active {
		background-color: #eeeeee;
		transform: scale(0.98);
	}
	
	/* 教师详情弹窗样式 */
	.teacher-detail-popup {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		z-index: 9999;
	}
	
	.popup-mask {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.7);
		backdrop-filter: blur(3px);
	}
	
	.popup-content {
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		background-color: #ffffff;
		border-top-left-radius: 25px;
		border-top-right-radius: 25px;
		padding-bottom: 30px;
		max-height: 85%;
		overflow-y: auto;
		box-shadow: 0 -5px 25px rgba(0, 0, 0, 0.1);
		animation: slideUp 0.3s cubic-bezier(0.19, 1, 0.22, 1);
	}
	
	@keyframes slideUp {
		from {
			transform: translateY(100%);
		}
		to {
			transform: translateY(0);
		}
	}
	
	.teacher-header {
		display: flex;
		padding: 25px;
		background-image: linear-gradient(to right, rgba(30, 144, 255, 0.1), rgba(0, 191, 255, 0.1));
		border-bottom: 1px solid rgba(0, 0, 0, 0.05);
	}
	
	.teacher-large-avatar {
		width: 90px;
		height: 90px;
		border-radius: 45px;
		margin-right: 20px;
		border: 4px solid white;
		box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
	}
	
	.teacher-header-info {
		flex: 1;
		display: flex;
		flex-direction: column;
		justify-content: center;
	}
	
	.teacher-header-name {
		font-size: 22px;
		font-weight: bold;
		color: var(--text-primary);
		margin-bottom: 8px;
		letter-spacing: 0.5px;
	}
	
	.teacher-header-title {
		font-size: 16px;
		color: var(--text-secondary);
	}
	
	.detail-tabs {
		display: flex;
		border-bottom: 1px solid rgba(0, 0, 0, 0.05);
		background-color: #ffffff;
	}
	
	.tab {
		flex: 1;
		text-align: center;
		padding: 15px 0;
		position: relative;
		font-size: 16px;
		color: var(--text-secondary);
		transition: all 0.3s ease;
	}
	
	.tab.active {
		color: var(--primary-color);
		font-weight: bold;
	}
	
	.tab.active:after {
		content: '';
		position: absolute;
		bottom: 0;
		left: 50%;
		transform: translateX(-50%);
		width: 30px;
		height: 3px;
		background-image: var(--gradient-blue);
		border-radius: 3px;
	}
	
	.tab-content {
		padding: 25px;
	}
	
	.chat-tip {
		text-align: center;
		margin: 20px 0;
	}
	
	.start-chat-btn, .view-profile-btn {
		width: 100%;
		height: 50px;
		line-height: 50px;
		background-image: var(--gradient-blue);
		color: #ffffff;
		font-size: 16px;
		font-weight: 600;
		border-radius: 25px;
		text-align: center;
		margin-top: 25px;
		box-shadow: 0 5px 15px rgba(30, 144, 255, 0.3);
		transition: all 0.3s ease;
	}
	
	.start-chat-btn:active, .view-profile-btn:active {
		transform: translateY(2px);
		box-shadow: 0 2px 8px rgba(30, 144, 255, 0.3);
	}
	
	.profile-content {
		margin-bottom: 25px;
	}
	
	.profile-section {
		margin-bottom: 25px;
	}
	
	.section-title {
		font-size: 18px;
		color: var(--text-primary);
		font-weight: bold;
		margin-bottom: 15px;
		position: relative;
		padding-left: 15px;
	}
	
	.section-title:before {
		content: '';
		position: absolute;
		left: 0;
		top: 50%;
		transform: translateY(-50%);
		width: 4px;
		height: 18px;
		background-image: var(--gradient-blue);
		border-radius: 2px;
	}
	
	.section-content {
		font-size: 15px;
		color: var(--text-secondary);
		line-height: 1.6;
		padding-left: 15px;
	}
	
	.expertise-tags {
		display: flex;
		flex-wrap: wrap;
		padding-left: 15px;
	}
	
	.expertise-tag {
		padding: 8px 15px;
		background-image: linear-gradient(to right, rgba(30, 144, 255, 0.1), rgba(0, 191, 255, 0.1));
		color: var(--primary-color);
		border-radius: 20px;
		margin-right: 10px;
		margin-bottom: 10px;
		font-size: 13px;
		font-weight: 500;
	}
	
	.avatar-hover {
		border: 2px solid var(--primary-color);
	}
</style> 