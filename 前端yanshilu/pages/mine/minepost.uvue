<template>
  <view class="container">
    <view class="content">
      <!-- 页面标题 -->
      <view class="page-header">
        <view class="back-button" @tap="navigateBack">
          <text class="back-icon">←</text>
        </view>
        <text class="page-title">我的帖子</text>
      </view>
      
      <!-- 动态列表区域 -->
      <view class="post-list">
        <!-- 下拉刷新提示 -->
        <view class="refresh-tip" v-if="isRefreshing">
          <text>正在刷新...</text>
        </view>
        
        <!-- 动态卡片 -->
        <view class="post-card" v-for="(post, index) in posts" :key="index" @tap="viewPostDetail(post.id)">
          <view class="post-content">
            <text class="post-text">{{post.content}}</text>
          </view>
          
          <view class="post-footer">
            <view class="post-info">
              <text class="post-time">{{post.createTime}}</text>
              <text class="stat-count">{{post.viewCount}} · 浏览</text>
            </view>
            <view class="action-bar">
              <view class="action-item" @tap.stop="likePost(post)">
                <image class="action-icon" :src="post.isLiked ? '/static/image/like_filled.svg' : '/static/image/like.svg'" mode="aspectFit"></image>
                <text class="action-count">{{post.likeCount}}</text>
              </view>
              <view class="action-item" @tap.stop="commentPost(post)">
                <image class="action-icon" src="/static/image/comment.svg" mode="aspectFit"></image>
                <text class="action-count">{{post.commentCount}}</text>
              </view>
              <view class="action-item" @tap.stop="collectPost(post)">
                <image class="action-icon" :src="post.isCollected ? '/static/image/star_filled.svg' : '/static/image/star.svg'" mode="aspectFit"></image>
                <text class="action-count">{{post.collectCount}}</text>
              </view>
              <view class="action-item" @tap.stop="sharePost(post)">
                <image class="action-icon" src="/static/image/share.svg" mode="aspectFit"></image>
                <text class="action-count">{{post.shareCount}}</text>
              </view>
            </view>
          </view>
        </view>
        
        <!-- 加载中动画 -->
        <view class="loading-container" v-if="isLoading && posts.length > 0">
          <view class="loading-indicator"></view>
        </view>
        
        <!-- 无数据提示 -->
        <view class="empty-tip" v-if="posts.length === 0 && !isLoading">
          <text>您还没有发布过帖子</text>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
  export default {
    data() {
      return {
        posts: [],
        currentPage: 1,
        isLoading: false,
        hasMore: true,
        isRefreshing: false
      }
    },
    onLoad() {
      // 页面加载时
      this.loadMyPosts();
    },
    // 下拉刷新
    onPullDownRefresh() {
      this.currentPage = 1;
      this.posts = [];
      this.loadMyPosts(() => {
        uni.stopPullDownRefresh();
      });
    },
    // 上拉加载更多
    onReachBottom() {
      if (this.hasMore && !this.isLoading) {
        this.loadMorePosts();
      }
    },
    methods: {
      /**
       * @description 返回上一页
       */
      navigateBack() {
        uni.navigateBack();
      },
      
      /**
       * @description 加载我的帖子列表
       * @param {Function} callback - 完成后的回调函数
       */
      loadMyPosts(callback) {
        if (this.isLoading) return;
        
        this.isLoading = true;
        
        // 构建请求参数 - 这里只需要分页相关参数，因为是获取当前用户的帖子
        const params = {
          page: this.currentPage,
          pageSize: 10
        };
        
        // 模拟数据，实际应用中应该调用API
        const mockPosts = this.getMockData();
        this.posts = this.currentPage === 1 ? mockPosts : [...this.posts, ...mockPosts];
        this.hasMore = this.currentPage < 2; // 模拟2页数据
        
        setTimeout(() => {
          this.isLoading = false;
          callback && callback();
        }, 500);
        
        // 实际API调用（注释掉，等待后端接口完成后再取消注释）
        /*
        uni.request({
          url: 'YOUR_API_URL/user/posts',
          data: params,
          method: 'GET',
          success: (res) => {
            if (res.statusCode === 200 && res.data) {
              if (this.currentPage === 1) {
                this.posts = res.data.posts || [];
              } else {
                this.posts = [...this.posts, ...(res.data.posts || [])];
              }
              
              this.hasMore = res.data.hasMore || false;
            } else {
              uni.showToast({
                title: '加载失败',
                icon: 'none'
              });
            }
          },
          fail: (err) => {
            console.error('请求失败:', err);
            uni.showToast({
              title: '网络异常',
              icon: 'none'
            });
          },
          complete: () => {
            this.isLoading = false;
            callback && callback();
          }
        });
        */
      },
      
      /**
       * @description 加载更多帖子
       */
      loadMorePosts() {
        this.currentPage++;
        this.loadMyPosts();
      },
      
      /**
       * @description 查看帖子详情
       * @param {Number} postId - 帖子ID
       */
      viewPostDetail(postId) {
        uni.navigateTo({
          url: `/pages/post/detail?id=${postId}`
        });
      },
      
      /**
       * @description 点赞帖子
       * @param {Object} post - 帖子对象
       */
      likePost(post) {
        const action = post.isLiked ? 'unlike' : 'like';
        
        uni.request({
          url: `YOUR_API_URL/post/${action}`,
          method: 'POST',
          data: { postId: post.id },
          success: (res) => {
            if (res.statusCode === 200) {
              post.isLiked = !post.isLiked;
              post.likeCount += post.isLiked ? 1 : -1;
            }
          }
        });
      },
      
      /**
       * @description 评论帖子
       * @param {Object} post - 帖子对象
       */
      commentPost(post) {
        uni.navigateTo({
          url: `/pages/post/detail?id=${post.id}&showComment=true`
        });
      },
      
      /**
       * @description 收藏帖子
       * @param {Object} post - 帖子对象
       */
      collectPost(post) {
        const action = post.isCollected ? 'uncollect' : 'collect';
        
        uni.request({
          url: `YOUR_API_URL/post/${action}`,
          method: 'POST',
          data: { postId: post.id },
          success: (res) => {
            if (res.statusCode === 200) {
              post.isCollected = !post.isCollected;
              post.collectCount += post.isCollected ? 1 : -1;
              
              uni.showToast({
                title: post.isCollected ? '已收藏' : '已取消收藏',
                icon: 'none'
              });
            }
          }
        });
      },
      
      /**
       * @description 分享帖子
       * @param {Object} post - 帖子对象
       */
      sharePost(post) {
        uni.showActionSheet({
          itemList: ['分享给好友', '分享到微信好友', '分享到微信群聊', '分享到朋友圈'],
          success: (res) => {
            const index = res.tapIndex;
            
            // 根据选择执行不同的分享操作
            switch(index) {
              case 0: // 分享给好友
                uni.navigateTo({
                  url: `/pages/share/friends?postId=${post.id}`
                });
                break;
              case 1: // 分享到微信好友
              case 2: // 分享到微信群聊
              case 3: // 分享到朋友圈
                uni.share({
                  provider: 'weixin',
                  scene: index === 1 ? 'WXSceneSession' : (index === 2 ? 'WXSceneSession' : 'WXSceneTimeline'),
                  type: 0,
                  title: post.title || '分享内容',
                  summary: post.content.substring(0, 50) + (post.content.length > 50 ? '...' : ''),
                  imageUrl: post.images && post.images.length > 0 ? post.images[0] : '/static/image/share_default.png',
                  href: `YOUR_SHARE_URL/post/${post.id}`,
                  success: function() {
                    console.log('分享成功');
                    // 更新分享计数
                    post.shareCount++;
                  },
                  fail: function() {
                    console.log('分享失败');
                  }
                });
                break;
            }
          }
        });
      },
      
      /**
       * @description 获取模拟数据
       * @return {Array} 模拟的帖子数据
       */
      getMockData() {
        return [
          {
            id: 1,
            content: '今天分享一下考研复习经验，希望对大家有帮助！数学部分要注重基础，多做真题。#考研# #复习经验#',
            createTime: '2023-09-15 14:30',
            viewCount: 256,
            likeCount: 42,
            commentCount: 8,
            collectCount: 15,
            shareCount: 3,
            isLiked: false,
            isCollected: false,
            images: []
          },
          {
            id: 2,
            content: '考研英语阅读理解技巧分享，掌握这些方法效率提升50%！长难句分析方法和常见词汇搭配整理。',
            createTime: '2023-08-20 09:15',
            viewCount: 189,
            likeCount: 36,
            commentCount: 12,
            collectCount: 20,
            shareCount: 5,
            isLiked: true,
            isCollected: false,
            images: []
          },
          {
            id: 3,
            content: '考研政治复习时间规划，建议8月开始系统学习，10月开始真题训练，12月开始背诵考点。提供我整理的笔记供大家参考。',
            createTime: '2023-07-05 16:45',
            viewCount: 320,
            likeCount: 67,
            commentCount: 23,
            collectCount: 45,
            shareCount: 12,
            isLiked: false,
            isCollected: true,
            images: []
          }
        ]
      }
    }
  }
</script>

<style>
  /* 全局样式变量 */
  page {
    --primary-color: #1E90FF;
    --primary-light: #87CEEB;
    --primary-dark: #0073CF;
    --gradient-blue: linear-gradient(135deg, #1E90FF, #00BFFF);
    --gradient-blue-light: linear-gradient(135deg, #87CEEB, #48D1CC);
    --text-primary: #333333;
    --text-secondary: #666666;
    --text-light: #999999;
    --bg-color: #F5F9FC;
    --card-shadow: 0 4px 12px rgba(30, 144, 255, 0.1);
    font-family: "PingFang SC", "Helvetica Neue", Arial, sans-serif;
  }

  .container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    box-sizing: border-box;
    background-color: var(--bg-color);
    position: relative;
  }
  
  .content {
    flex: 1;
    width: 100%;
  }
  
  /* 页面标题 */
  .page-header {
    padding: 20px;
    background-color: #ffffff;
    display: flex;
    flex-direction: row;
    align-items: center;
  }
  
  /* 返回按钮样式 */
  .back-button {
    width: 30px;
    height: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: 10px;
  }
  
  .back-icon {
    font-size: 22px;
    font-weight: bold;
    color: var(--text-primary);
  }
  
  .page-title {
    font-size: 20px;
    font-weight: bold;
    color: var(--text-primary);
  }
  
  /* 动态列表样式 */
  .post-list {
    width: 100%;
    padding-bottom: 20px;
  }
  
  .post-card {
    margin: 12px 15px;
    background-color: #ffffff;
    border-radius: 16px;
    padding: 18px;
    box-shadow: var(--card-shadow);
    transition: transform 0.3s ease;
  }
  
  .post-card:active {
    transform: scale(0.98);
  }
  
  .post-content {
    margin-bottom: 18px;
  }
  
  .post-text {
    font-size: 15px;
    line-height: 1.7;
    color: var(--text-primary);
  }
  
  .post-footer {
    display: flex;
    flex-direction: column;
    border-top: 1px solid rgba(0, 0, 0, 0.05);
    padding-top: 15px;
    margin-top: 5px;
  }
  
  .post-info {
    display: flex;
    justify-content: space-between;
    margin-bottom: 12px;
  }
  
  .post-time {
    font-size: 12px;
    color: var(--text-light);
  }
  
  .stat-count {
    font-size: 12px;
    color: var(--text-light);
  }
  
  .action-bar {
    display: flex;
    flex-direction: row;
    width: 100%;
    background-color: #ffffff;
    padding: 10px 0 0;
    border-top: 1px solid rgba(0, 0, 0, 0.05);
    margin-top: 8px;
    box-sizing: border-box;
    justify-content: space-around;
  }
  
  .action-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 25%;
    padding: 8px 0;
    transition: all 0.3s ease;
  }
  
  .action-item:active {
    transform: scale(0.95);
    background-color: rgba(30, 144, 255, 0.05);
    border-radius: 8px;
  }
  
  .action-icon {
    width: 22px;
    height: 22px;
    margin-bottom: 5px;
    opacity: 0.8;
  }
  
  .action-count {
    font-size: 12px;
    color: var(--text-secondary);
    text-align: center;
  }
  
  /* 无数据提示 */
  .empty-tip {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 300px;
    color: var(--text-light);
    font-size: 15px;
  }
  
  .empty-tip::before {
    content: '';
    width: 80px;
    height: 80px;
    margin-bottom: 20px;
    background-color: rgba(30, 144, 255, 0.1);
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  /* 加载中动画 */
  .loading-container {
    display: flex;
    justify-content: center;
    padding: 20px 0;
  }
  
  .loading-indicator {
    width: 30px;
    height: 30px;
    border: 3px solid rgba(30, 144, 255, 0.2);
    border-top-color: var(--primary-color);
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
  }
  
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  
  /* 下拉刷新样式 */
  .refresh-tip {
    text-align: center;
    padding: 15px 0;
    color: var(--primary-color);
    font-size: 14px;
    font-weight: 500;
  }
</style> 