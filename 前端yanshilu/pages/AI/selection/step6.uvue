<template>
	<view class="container">
		<view class="progress-bar">
			<text class="progress-text">6/6</text>
		</view>

		<view class="question-container">
			<view class="emoji">🎓</view>
			<text class="question">您的目标省份是？</text>
			
			<view class="area-section">
				<text class="area-title">A区</text>
				<view class="options-container">
					<view 
						v-for="(area, index) in areaA" 
						:key="index"
						:class="['option-item', selectedAreas.includes(area) ? 'active' : '']"
						@click="toggleArea(area)"
					>
						{{area}}
					</view>
				</view>
			</view>
			
			<view class="area-section">
				<text class="area-title">B区</text>
				<view class="options-container">
					<view 
						v-for="(area, index) in areaB" 
						:key="index"
						:class="['option-item', selectedAreas.includes(area) ? 'active' : '']"
						@click="toggleArea(area)"
					>
						{{area}}
					</view>
				</view>
			</view>
		</view>

		<view class="button-group">
			<button class="prev-btn" @click="prevPage">上一步</button>
			<button class="complete-btn" @click="submitData">完成</button>
		</view>
	</view>
</template>

<script>
	/**
	 * @description AI择校第六步页面
	 */
	import { aiSelectionApis } from '../../../config.js';
	
	export default {
		name: 'AISelectionStep6',
		data() {
			return {
				areaA: ['北京市', '上海市', '浙江省', '江苏省', '湖北省', '广东省', '吉林省', '天津市'],
				areaB: ['四川省', '安徽省', '陕西省', '黑龙江省', '湖南省', '山东省', '福建省', '辽宁省', 
					'重庆市', '河南省', '江西省', '山西省'],
				selectedAreas: []
			}
		},
		onLoad() {
			// 检查是否有已保存的数据
			const savedAreas = uni.getStorageSync('step6_areas');
			if (savedAreas && Array.isArray(savedAreas)) {
				this.selectedAreas = savedAreas;
			}
		},
		methods: {
			/**
			 * @description 切换选择区域
			 * @param {String} area - 区域名称
			 */
			toggleArea(area) {
				const index = this.selectedAreas.indexOf(area);
				if (index === -1) {
					this.selectedAreas.push(area);
				} else {
					this.selectedAreas.splice(index, 1);
				}
				// 保存到本地存储
				uni.setStorageSync('step6_areas', this.selectedAreas);
			},
			
			/**
			 * @description 返回上一步
			 */
			prevPage() {
				uni.navigateBack();
			},
			
			/**
			 * @description 提交数据，开始分析
			 */
			async submitData() {
				if (this.selectedAreas.length === 0) {
					uni.showToast({
						title: '请至少选择一个目标省份',
						icon: 'none'
					});
					return;
				}

				try {
					uni.showLoading({
						title: '准备分析...'
					});
					
					// 从本地存储获取之前步骤的数据
					const formData = {
						identity: uni.getStorageSync('step1_data') || '',
						university: uni.getStorageSync('step2_school') || '',
						major: uni.getStorageSync('step2_major') || '',
						englishLevel: uni.getStorageSync('step3_english') || '',
						ranking: uni.getStorageSync('step3_ranking') || '',
						targetMajor: uni.getStorageSync('step4_major') || '',
						studyMode: uni.getStorageSync('step4_mode') || '',
						targetType: uni.getStorageSync('step5_target') || '',
						considerResearch: uni.getStorageSync('step5_research') || '',
						targetAreas: this.selectedAreas
					};
					
					console.log('提交数据:', formData);
					
					// 先保存分析请求
					const saveResult = await uniCloud.callFunction({
						name: aiSelectionApis.saveAnalysisRequest,
						data: {
							formData: formData
						},
						timeout: 10000 // 增加超时时间到10秒
					});
					
					uni.hideLoading();
					
					if (saveResult.result && saveResult.result.code === 0) {
						const analysisId = saveResult.result.data.id;
						
						// 直接跳转到分析中页面，不等待分析完成
						uni.navigateTo({
							url: '/pages/AI/selection/analyzing?id=' + analysisId
						});
						
						// 后台开始实际的AI分析过程
						uniCloud.callFunction({
							name: aiSelectionApis.startAnalysis,
							data: { id: analysisId },
							success: (res) => {
								console.log('分析开始:', res);
							},
							fail: (err) => {
								console.error('启动分析失败:', err);
							}
						});
					} else {
						throw new Error(saveResult.result?.msg || '准备分析失败');
					}
				} catch (e) {
					uni.hideLoading();
					uni.showModal({
						title: '提示',
						content: e.message || '准备分析失败，请重试',
						showCancel: false
					});
				}
			}
		}
	}
</script>

<style>
	.container {
		padding: 30rpx;
	}
	
	.progress-bar {
		text-align: center;
		margin-bottom: 40rpx;
	}
	
	.progress-text {
		font-size: 32rpx;
		color: #FF9853;
		background: #FFF;
		padding: 10rpx 30rpx;
		border-radius: 30rpx;
	}
	
	.question-container {
		margin-top: 40rpx;
	}
	
	.emoji {
		font-size: 48rpx;
		margin-bottom: 20rpx;
	}
	
	.question {
		font-size: 36rpx;
		font-weight: bold;
		color: #333;
		margin-bottom: 40rpx;
		display: block;
	}
	
	.area-section {
		margin-top: 40rpx;
	}
	
	.area-title {
		font-size: 32rpx;
		font-weight: bold;
		color: #666;
		margin-bottom: 20rpx;
		display: block;
	}
	
	.options-container {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: space-around;
		align-items: center;
		gap: 20rpx;
		margin-top: 20rpx;
		width: 100%;
	}
	
	.option-item {
		width: 30%;
		height: 80rpx;
		line-height: 80rpx;
		text-align: center;
		background: #F5F5F5;
		border-radius: 40rpx;
		font-size: 28rpx;
		color: #333;
		margin-bottom: 20rpx;
	}
	
	.active {
		background: #007AFF;
		color: #FFFFFF;
	}
	
	.button-group {
		position: fixed;
		bottom: 40rpx;
		left: 0;
		right: 0;
		padding: 0 30rpx;
		display: flex;
		flex-direction: row;
		justify-content: center;
		gap: 20rpx;
	}
	
	.prev-btn {
		width: 48%;
		height: 90rpx;
		line-height: 90rpx;
		border-radius: 45rpx;
		font-size: 32rpx;
		background: #FFFFFF;
		color: #007AFF;
		border: 1rpx solid #007AFF;
	}
	
	.complete-btn {
		width: 48%;
		height: 90rpx;
		line-height: 90rpx;
		border-radius: 45rpx;
		font-size: 32rpx;
		background: #007AFF;
		color: #FFFFFF;
	}
</style> 