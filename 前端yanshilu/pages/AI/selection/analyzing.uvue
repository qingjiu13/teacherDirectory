<template>
	<view class="analyzing-container">
		<view class="analysis-title">
			<text>AI 智能分析中</text>
		</view>
		
		<view class="progress-container">
			<view class="progress-bar">
				<view class="progress-filled" :style="{ width: progressPercent + '%' }"></view>
				<view class="robot-icon" :style="{ left: progressPercent + '%' }">
					<image src="/static/robot.png" mode="aspectFit"></image>
				</view>
			</view>
			<text class="progress-text">{{progressPercent}}%</text>
		</view>
		
		<view class="tips-container">
			<text class="tip-title">分析中，请稍候...</text>
			<text class="tip-content">{{currentTip}}</text>
		</view>
		
		<!-- 添加取消按钮 -->
		<view class="button-container">
			<button class="cancel-btn" @click="cancelAnalysis">取消</button>
		</view>
	</view>
</template>

<script>
	/**
	 * @description AI择校分析中页面
	 */
	import { aiSelectionApis } from '../../../config.js';
	
	export default {
		data() {
			return {
				progressPercent: 0,
				intervalId: null,
				statusCheckInterval: null,
				analysisId: '',
				tips: [
					'正在分析您的学术背景...',
					'正在匹配最适合的院校...',
					'正在评估录取可能性...',
					'正在生成个性化建议...',
					'即将完成分析，请稍等...'
				],
				currentTip: '正在分析您的学术背景...',
				checkCount: 0,
				maxChecks: 30 // 最多检查30次（约1.5分钟）
			}
		},
		onLoad(options) {
			console.log('分析页面加载，ID:', options.id);
			this.analysisId = options.id || '';
			
			// 在本地存储中保存此ID，以防页面跳转时丢失
			if (this.analysisId) {
				uni.setStorageSync('current_analysis_id', this.analysisId);
			} else {
				uni.showModal({
					title: '错误',
					content: '未找到分析ID，请重新开始',
					showCancel: false,
					success: () => {
						uni.navigateBack();
					}
				});
				return;
			}
			
			// 启动进度条动画（仅起到视觉反馈作用）
			this.startProgressAnimation();
			
			// 开始检查分析状态
			this.checkAnalysisStatus();
		},
		onUnload() {
			// 清除所有定时器
			if (this.intervalId) {
				clearInterval(this.intervalId);
			}
			if (this.statusCheckInterval) {
				clearInterval(this.statusCheckInterval);
			}
		},
		methods: {
			/**
			 * @description 启动进度条动画
			 */
			startProgressAnimation() {
				// 进度条初始值设为10%，给用户一些反馈
				this.progressPercent = 10;
				
				// 每5秒更换提示文字
				this.intervalId = setInterval(() => {
					const nextTipIndex = this.tips.indexOf(this.currentTip) + 1;
					this.currentTip = this.tips[nextTipIndex % this.tips.length];
					
					// 缓慢增加进度条
					if (this.progressPercent < 85) {
						this.progressPercent += Math.floor(Math.random() * 3) + 1;
					}
				}, 3000);
			},
			
			/**
			 * @description 检查分析状态
			 */
			checkAnalysisStatus() {
				// 每3秒检查一次分析状态
				this.statusCheckInterval = setInterval(async () => {
					try {
						this.checkCount++;
						console.log('检查分析状态，ID:', this.analysisId, '次数:', this.checkCount);
						
						// 超过最大检查次数
						if (this.checkCount > this.maxChecks) {
							clearInterval(this.statusCheckInterval);
							uni.showModal({
								title: '分析超时',
								content: '分析时间超过预期，您可以继续等待或稍后查看结果',
								confirmText: '继续等待',
								cancelText: '稍后查看',
								success: (res) => {
									if (res.confirm) {
										// 重置计数器，继续检查
										this.checkCount = 0;
										this.checkAnalysisStatus();
									} else {
										uni.navigateBack();
									}
								}
							});
							return;
						}
						
						// 真实请求API检查状态
						const result = await uniCloud.callFunction({
							name: aiSelectionApis.getSchoolAnalysis,
							data: {
								action: 'get',
								id: this.analysisId
							},
							timeout: 15000
						});
						
						console.log('分析状态查询结果:', result);
						
						if (result.result && result.result.code === 0) {
							const data = result.result.data;
							
							if (data && data.analysis_status === 'completed') {
								// 分析完成，跳转到结果页
								console.log('分析已完成，准备展示结果');
								this.progressPercent = 100;
								clearInterval(this.intervalId);
								clearInterval(this.statusCheckInterval);
								
								setTimeout(() => {
									uni.redirectTo({
										url: '/pages/ai/selection/result?id=' + this.analysisId
									});
								}, 800);
							} else if (data && data.analysis_status === 'failed') {
								// 分析失败，显示错误信息
								clearInterval(this.intervalId);
								clearInterval(this.statusCheckInterval);
								uni.showModal({
									title: '分析失败',
									content: data.error_message || '很抱歉，分析过程中出现问题',
									showCancel: false,
									success: () => {
										uni.navigateBack();
									}
								});
							} else if (data && data.analysis_status === 'analyzing') {
								// 分析正在进行中，更新进度
								console.log('分析进行中...');
								if (this.progressPercent < 90) {
									// 让进度条显示分析进行中，但不要到100%
									this.progressPercent += 2;
									if (this.progressPercent > 90) this.progressPercent = 90;
								}
							} else if (data && data.analysis_status === 'pending') {
								// 等待分析开始
								console.log('等待分析开始...');
								if (this.progressPercent < 30) {
									this.progressPercent += 2;
								}
							}
						} else {
							console.error('检查状态API调用失败:', result);
							// 不自动关闭，继续尝试
						}
					} catch (e) {
						console.error('检查分析状态失败:', e);
					}
				}, 3000); // 每3秒检查一次
			},
			
			/**
			 * @description 取消分析
			 */
			cancelAnalysis() {
				uni.showModal({
					title: '取消分析',
					content: '确定要取消当前分析吗？',
					success: (res) => {
						if (res.confirm) {
							// 清除定时器
							if (this.intervalId) {
								clearInterval(this.intervalId);
							}
							if (this.statusCheckInterval) {
								clearInterval(this.statusCheckInterval);
							}
							uni.navigateBack();
						}
					}
				});
			}
		}
	}
</script>

<style>
	.analyzing-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		padding: 40rpx;
		min-height: 80vh;
	}
	
	.analysis-title {
		font-size: 40rpx;
		font-weight: bold;
		margin-bottom: 80rpx;
		color: #007AFF;
	}
	
	.progress-container {
		width: 100%;
		margin-bottom: 60rpx;
	}
	
	.progress-bar {
		height: 20rpx;
		background-color: #f0f0f0;
		border-radius: 10rpx;
		position: relative;
		margin-bottom: 20rpx;
		overflow: visible;
	}
	
	.progress-filled {
		height: 100%;
		background: linear-gradient(to right, #3fadea, #007AFF);
		border-radius: 10rpx;
		transition: width 0.3s ease;
	}
	
	.robot-icon {
		position: absolute;
		top: -20rpx;
		transform: translateX(-50%);
		transition: left 0.3s ease;
	}
	
	.robot-icon image {
		width: 60rpx;
		height: 60rpx;
		animation: bounce 0.6s infinite alternate;
	}
	
	@keyframes bounce {
		from {
			transform: translateY(0);
		}
		to {
			transform: translateY(-10rpx);
		}
	}
	
	.progress-text {
		text-align: center;
		font-size: 28rpx;
		color: #007AFF;
		font-weight: bold;
	}
	
	.tips-container {
		background: #f8f8f8;
		padding: 30rpx;
		border-radius: 20rpx;
		width: 90%;
		text-align: center;
		margin-bottom: 60rpx;
	}
	
	.tip-title {
		font-size: 32rpx;
		font-weight: bold;
		color: #333;
		margin-bottom: 20rpx;
		display: block;
	}
	
	.tip-content {
		font-size: 28rpx;
		color: #666;
		line-height: 1.5;
	}
	
	/* 取消按钮样式 */
	.button-container {
		margin-top: 40rpx;
	}
	
	.cancel-btn {
		width: 200rpx;
		height: 80rpx;
		line-height: 80rpx;
		font-size: 28rpx;
		color: #666;
		background: #f2f2f2;
		border-radius: 40rpx;
	}
</style> 