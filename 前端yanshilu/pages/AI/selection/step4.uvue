<template>
	<view class="container">
		<view class="progress-bar">
			<text class="progress-text">4/6</text>
		</view>

		<view class="question-container">
			<view class="emoji">😄</view>
			<text class="question">您想报考的研究生专业是？</text>
			
			<view class="search-box">
				<input class="search-input" 
					v-model="searchText" 
					placeholder="请选择专业" 
					@focus="showMajorList = true"
				/>
			</view>
			
			<!-- 专业列表 -->
			<scroll-view 
				v-if="showMajorList" 
				class="major-list"
				scroll-y="true"
			>
				<view 
					v-for="(major, index) in filteredMajors" 
					:key="index"
					class="major-item"
					@click="selectMajor(major)"
				>
					<view class="major-name">{{major.name}}</view>
					<view class="major-code">{{major.code}} | {{major.category}}</view>
				</view>
			</scroll-view>
			
			<view v-if="selectedMajor" class="selected-info">
				<view class="selected-title">已选择:</view>
				<view class="selected-major">
					<text class="major-name">{{selectedMajor.name}}</text>
					<text class="major-code">{{selectedMajor.code}} | {{selectedMajor.category}}</text>
				</view>
			</view>
			
			<text class="question second-question">希望就读的学习方式是？</text>
			<view class="options-container">
				<view 
					v-for="(option, index) in studyModes" 
					:key="index"
					:class="['option-item', selectedMode === option ? 'active' : '']"
					@click="selectMode(option)"
				>
					{{option}}
				</view>
			</view>
		</view>

		<view class="button-group">
			<button class="prev-btn" @click="prevPage">上一步</button>
			<button class="next-btn" @click="nextPage">下一步</button>
		</view>
	</view>
</template>

<script>
	/**
	 * @description AI择校第四步页面
	 */
	import { aiSelectionApis } from '../../../config.js';
	import callCloudFunction from '../../../utils/cloudFunction.js';
	
	export default {
		name: 'AISelectionStep4',
		data() {
			return {
				searchText: '',
				showMajorList: false,
				majors: [],
				studyModes: ['全日制', '非全日制'],
				selectedMajor: null,
				selectedMode: '',
				loading: false,
				// 添加本地备用数据，防止云函数失败 - 包含考研专业的名称、编号和类别
				localMajors: [
					{ code: '0801', name: '计算机科学与技术', category: '学术学位' },
					{ code: '0835', name: '软件工程', category: '学术学位' },
					{ code: '0854', name: '电子信息', category: '专业学位' },
					{ code: '0812', name: '计算机技术', category: '专业学位' },
					{ code: '0251', name: '金融', category: '专业学位' },
					{ code: '0351', name: '法律', category: '专业学位' },
					{ code: '0452', name: '体育', category: '专业学位' },
					{ code: '0451', name: '教育', category: '专业学位' },
					{ code: '0551', name: '翻译', category: '专业学位' },
					{ code: '0501', name: '中国语言文学', category: '学术学位' },
					{ code: '0701', name: '数学', category: '学术学位' },
					{ code: '0702', name: '物理学', category: '学术学位' },
					{ code: '0703', name: '化学', category: '学术学位' },
					{ code: '0710', name: '生物学', category: '学术学位' },
					{ code: '1002', name: '临床医学', category: '学术学位' },
					{ code: '1001', name: '基础医学', category: '学术学位' },
					{ code: '0202', name: '应用经济学', category: '学术学位' },
					{ code: '0201', name: '理论经济学', category: '学术学位' },
					{ code: '0303', name: '社会学', category: '学术学位' },
					{ code: '0304', name: '民族学', category: '学术学位' }
				]
			}
		},
		computed: {
			/**
			 * @description 过滤后的专业列表
			 * @returns {Array} 过滤后的专业列表
			 */
			filteredMajors() {
				const majorsToFilter = this.majors.length > 0 ? this.majors : this.localMajors;
				if (!this.searchText) return majorsToFilter;
				
				const keyword = this.searchText.toLowerCase();
				return majorsToFilter.filter(major => 
					major.name.toLowerCase().includes(keyword) || 
					major.code.includes(keyword) ||
					major.category.toLowerCase().includes(keyword)
				);
			}
		},
		onLoad() {
			// 加载专业数据
			this.getMajorData();
			
			// 检查是否有保存的数据，如果有则回显
			const savedMajorJSON = uni.getStorageSync('step4_major');
			const savedMode = uni.getStorageSync('step4_mode');
			
			if (savedMajorJSON) {
				try {
					this.selectedMajor = JSON.parse(savedMajorJSON);
					this.searchText = this.selectedMajor.name;
				} catch (e) {
					console.error('解析已保存专业数据失败:', e);
				}
			}
			
			if (savedMode) {
				this.selectedMode = savedMode;
			}
		},
		methods: {
			/**
			 * @description 获取报考专业数据
			 */
			async getMajorData() {
				this.loading = true;
				try {
					const result = await callCloudFunction({
						name: aiSelectionApis.getGraduateMajors, // 使用获取研究生专业的接口
						data: {}
					});
					if (result.result && result.result.code === 0) {
						this.majors = result.result.data || [];
						console.log('获取到专业数据:', this.majors);
					} else {
						console.warn('使用本地专业列表');
						this.majors = this.localMajors;
					}
				} catch (e) {
					console.error('获取专业数据失败:', e);
					this.majors = this.localMajors;
					uni.showToast({
						title: '获取专业数据失败',
						icon: 'none'
					});
				} finally {
					this.loading = false;
				}
			},
			
			/**
			 * @description 根据关键词搜索专业
			 * @param {String} keyword - 搜索关键词
			 */
			async searchMajors(keyword) {
				if (!keyword) return;
				this.loading = true;
				try {
					const result = await callCloudFunction({
						name: aiSelectionApis.getGraduateMajors, // 使用获取研究生专业的接口
						data: { keyword }
					});
					if (result.result && result.result.code === 0) {
						// 只在有结果时更新列表，避免清空
						if (result.result.data && result.result.data.length > 0) {
							this.majors = result.result.data;
						}
					}
				} catch (e) {
					console.error('搜索专业失败:', e);
				} finally {
					this.loading = false;
				}
			},
			
			/**
			 * @description 选择专业
			 * @param {Object} major - 选择的专业对象，包含编号、名称和类别
			 */
			selectMajor(major) {
				this.searchText = major.name;
				this.selectedMajor = major;
				this.showMajorList = false;
				// 保存到本地存储 - 将对象转为JSON字符串
				uni.setStorageSync('step4_major', JSON.stringify(major));
			},
			
			/**
			 * @description 选择学习方式
			 * @param {String} mode - 选择的学习方式
			 */
			selectMode(mode) {
				this.selectedMode = mode;
				// 保存到本地存储
				uni.setStorageSync('step4_mode', mode);
			},
			
			/**
			 * @description 返回上一步
			 */
			prevPage() {
				uni.navigateBack();
			},
			
			/**
			 * @description 进入下一步
			 */
			nextPage() {
				if (!this.selectedMajor || !this.selectedMode) {
					uni.showToast({
						title: '请选择完整信息',
						icon: 'none'
					});
					return;
				}
				uni.navigateTo({
					url: '/pages/AI/selection/step5'
				});
			}
		}
	}
</script>

<style>
	.container {
		padding: 30rpx;
	}
	
	.progress-bar {
		text-align: center;
		margin-bottom: 40rpx;
	}
	
	.progress-text {
		font-size: 32rpx;
		color: #FF9853;
		background: #FFF;
		padding: 10rpx 30rpx;
		border-radius: 30rpx;
	}
	
	.question-container {
		margin-top: 40rpx;
	}
	
	.emoji {
		font-size: 48rpx;
		margin-bottom: 20rpx;
	}
	
	.question {
		font-size: 36rpx;
		font-weight: bold;
		color: #333;
		margin-bottom: 40rpx;
		display: block;
	}
	
	.second-question {
		margin-top: 60rpx;
	}
	
	.search-box {
		margin: 20rpx 0;
	}
	
	.search-input {
		width: 100%;
		height: 80rpx;
		background: #F5F5F5;
		border-radius: 40rpx;
		padding: 0 30rpx;
		font-size: 28rpx;
	}
	
	.major-list {
		max-height: 400rpx;
		background: #FFFFFF;
		border-radius: 20rpx;
		box-shadow: 0 2rpx 12rpx rgba(0, 0, 0, 0.1);
	}
	
	.major-item {
		padding: 20rpx 30rpx;
		font-size: 28rpx;
		border-bottom: 1rpx solid #EEEEEE;
	}
	
	.major-item:active {
		background: #F5F5F5;
	}
	
	.major-name {
		font-weight: bold;
		font-size: 28rpx;
	}
	
	.major-code {
		font-size: 24rpx;
		color: #666;
		margin-top: 6rpx;
	}
	
	.selected-info {
		margin: 30rpx 0;
		background: #F8F8F8;
		border-radius: 16rpx;
		padding: 20rpx;
	}
	
	.selected-title {
		font-size: 26rpx;
		color: #666;
		margin-bottom: 10rpx;
	}
	
	.selected-major {
		display: flex;
		flex-direction: column;
	}
	
	.options-container {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: space-around;
		align-items: center;
		gap: 20rpx;
		margin-top: 30rpx;
		width: 100%;
	}
	
	.option-item {
		width: 45%;
		height: 80rpx;
		line-height: 80rpx;
		text-align: center;
		background: #F5F5F5;
		border-radius: 40rpx;
		font-size: 28rpx;
		color: #333;
		margin-bottom: 20rpx;
	}
	
	.active {
		background: #007AFF;
		color: #FFFFFF;
	}
	
	.button-group {
		position: fixed;
		bottom: 40rpx;
		left: 0;
		right: 0;
		padding: 0 30rpx;
		display: flex;
		flex-direction: row;
		justify-content: center;
		gap: 20rpx;
	}
	
	.prev-btn, .next-btn {
		width: 45%;
		height: 90rpx;
		line-height: 90rpx;
		border-radius: 45rpx;
		font-size: 32rpx;
	}
	
	.prev-btn {
		background: #FFFFFF;
		color: #007AFF;
		border: 1rpx solid #007AFF;
	}
	
	.next-btn {
		background: #007AFF;
		color: #FFFFFF;
	}
</style> 