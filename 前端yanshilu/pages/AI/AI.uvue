<template>
	<view class="page-container">
		<!-- #ifdef MP-WEIXIN -->
		<!-- 微信小程序专用视图包装器 -->
		<view class="mp-container">
		<!-- #endif -->
			
			<!-- 筛选区域 -->
			<view class="filter-section">
				<view class="filter-content">
					<view class="filter-item school">
						<text class="filter-label">所在学校：</text>
						<input class="filter-input" v-model="userInfo.school" placeholder="请输入学校" />
					</view>
					<view class="filter-item major">
						<text class="filter-label">专业：</text>
						<input class="filter-input" v-model="userInfo.major" placeholder="请输入专业" />
					</view>
					<button class="save-button" @click="saveUserInfo">保存筛选</button>
				</view>
			</view>
			
			<!-- 回答区域 -->
			<view class="answer-section">
				<scroll-view scroll-y="true" class="answer-scroll">
					<view v-if="messages.length === 0" class="empty-message">
						<text>您可以开始提问了...</text>
					</view>
					<view v-else class="message-list">
						<view v-for="(msg, index) in messages" :key="index" class="message-item" :class="msg.type">
							<text class="message-content">{{msg.content}}</text>
						</view>
					</view>
				</scroll-view>
			</view>
			
			<!-- 功能区域 -->
			<view class="function-section">
				<view class="function-list">
					<view class="function-item" 
						:class="{active: currentFunction === null}" 
						@click="switchFunction(null)">
						<text class="function-item-text">通用</text>
					</view>
					<view class="function-item" 
						:class="{active: currentFunction === 'school'}" 
						@click="switchFunction('school')">
						<text class="function-item-text">择校</text>
					</view>
					<view class="function-item" 
						:class="{active: currentFunction === 'career'}" 
						@click="switchFunction('career')">
						<text class="function-item-text">职业规划</text>
					</view>
				</view>
			</view>
			
			<!-- 输入区域 -->
			<view class="input-section">
				<input class="message-input" 
					v-model="inputValue" 
					placeholder="请输入您的问题..." 
					@confirm="sendMessage" />
				<button class="send-button" @click="sendMessage">发送</button>
			</view>
			
		<!-- #ifdef MP-WEIXIN -->
		</view>
		<!-- #endif -->
	</view>
</template>

<script>
	/**
	 * @description AI助手页面
	 */
	import Routes from '../../utils/routes.js';
	
	export default {
		data() {
			return {
				userInfo: {
					school: '',
					major: ''
				},
				inputValue: '',
				currentFunction: null, // null, 'school', 'career'
				messages: []
			}
		},
		onLoad() {
			/**
			 * @description 页面加载时的处理逻辑
			 */
			// 尝试获取用户信息
			this.getUserInfo();
		},
		methods: {
			/**
			 * @description 获取用户信息
			 */
			getUserInfo() {
				// 这里可以从本地存储或API获取用户信息
				try {
					const userInfo = uni.getStorageSync('userInfo');
					if (userInfo) {
						this.userInfo = JSON.parse(userInfo);
					}
				} catch (e) {
					console.error('获取用户信息失败:', e);
				}
			},
			
			/**
			 * @description 保存用户信息
			 */
			saveUserInfo() {
				try {
					uni.setStorageSync('userInfo', JSON.stringify(this.userInfo));
					uni.showToast({
						title: '保存成功',
						icon: 'success'
					});
				} catch (e) {
					console.error('保存用户信息失败:', e);
					uni.showToast({
						title: '保存失败',
						icon: 'none'
					});
				}
			},
			
			/**
			 * @description 切换功能模式
			 * @param {String} mode - 功能模式
			 */
			switchFunction(mode) {
				this.currentFunction = mode;
				
				// 显示当前模式提示
				let modeName = '通用';
				if (mode === 'school') {
					modeName = '择校';
				} else if (mode === 'career') {
					modeName = '职业规划';
				}
				
				// 添加系统消息
				this.messages.push({
					type: 'system',
					content: `已切换到${modeName}模式`
				});
			},
			
			/**
			 * @description 发送消息
			 */
			sendMessage() {
				// 发送消息的逻辑
				if (!this.inputValue.trim()) {
					return;
				}
				
				// 添加用户消息
				this.messages.push({
					type: 'user',
					content: this.inputValue
				});
				
				// 根据当前功能模式处理消息
				const message = {
					content: this.inputValue,
					function: this.currentFunction,
					userInfo: this.userInfo
				};
				
				// 模拟AI回复
				setTimeout(() => {
					let aiResponse = '';
					if (this.currentFunction === 'school') {
						aiResponse = `关于择校问题，基于您就读的${this.userInfo.school || '(未设置学校)'}，${this.userInfo.major || '(未设置专业)'}专业，我的建议是...`;
					} else if (this.currentFunction === 'career') {
						aiResponse = `关于职业规划，考虑到您在${this.userInfo.school || '(未设置学校)'}学习${this.userInfo.major || '(未设置专业)'}，您可以考虑以下职业方向...`;
					} else {
						aiResponse = `您好，我是研师录AI助手，很高兴为您服务。您的问题是"${this.inputValue}"，我的回答是...`;
					}
					
					this.messages.push({
						type: 'ai',
						content: aiResponse
					});
				}, 500);
				
				// 清空输入
				this.inputValue = '';
			},
			
			/**
			 * @description 返回首页
			 */
			goBack() {
				try {
					Routes.navigator.navigateBack();
				} catch (e) {
					console.error('返回失败:', e);
					Routes.navigator.reLaunch(Routes.main.INDEX);
				}
			}
		}
	}
</script>

<style>
	.page-container {
		position: relative;
		width: 100%;
		height: 100vh;
		display: flex;
		flex-direction: column;
		padding: 20px;
		box-sizing: border-box;
		background-color: #f5f5f5;
	}
	
	/* #ifdef MP-WEIXIN */
	.mp-container {
		width: 100%;
		height: 100%;
		display: flex;
		flex-direction: column;
	}
	/* #endif */
	
	/* 筛选区域 */
	.filter-section {
		width: 100%;
		background-color: #f0f0f5;
		border: 1px solid #ddd;
		border-radius: 8px;
		margin-bottom: 20px;
		padding: 15px;
	}
	
	.filter-content {
		display: flex;
		flex-direction: column;
	}
	
	.filter-item {
		display: flex;
		flex-direction: row;
		align-items: center;
		margin-bottom: 10px;
	}
	
	.filter-label {
		width: 100px;
		font-size: 14px;
		color: #333;
	}
	
	.filter-input {
		flex: 1;
		height: 30px;
		border: 1px solid #ddd;
		border-radius: 4px;
		padding: 0 10px;
		background-color: #fff;
	}
	
	.save-button {
		align-self: flex-end;
		width: 100px;
		height: 30px;
		font-size: 14px;
		background-color: #007aff;
		color: #fff;
	}
	
	/* 回答区域 */
	.answer-section {
		flex: 1;
		width: 100%;
		background-color: #f0f0f5;
		border: 1px solid #ddd;
		border-radius: 8px;
		margin-bottom: 20px;
		overflow: hidden;
	}
	
	.answer-scroll {
		height: 100%;
		padding: 15px;
	}
	
	.empty-message {
		height: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
	}
	
	.empty-message text {
		color: #999;
		font-size: 14px;
	}
	
	.message-list {
		display: flex;
		flex-direction: column;
	}
	
	.message-item {
		max-width: 80%;
		padding: 10px 15px;
		border-radius: 8px;
		margin-bottom: 15px;
	}
	
	.message-item.user {
		align-self: flex-end;
		background-color: #007aff;
	}
	
	.message-item.user .message-content {
		color: #fff;
	}
	
	.message-item.ai {
		align-self: flex-start;
		background-color: #fff;
	}
	
	.message-item.system {
		align-self: center;
		background-color: #f0f0f0;
		padding: 5px 10px;
		border-radius: 15px;
	}
	
	.message-item.system .message-content {
		color: #666;
		font-size: 12px;
	}
	
	.message-content {
		font-size: 14px;
		color: #333;
	}
	
	/* 功能区域 */
	.function-section {
		width: 100%;
		background-color: #f0f0f5;
		border: 1px solid #ddd;
		border-radius: 8px;
		margin-bottom: 20px;
		padding: 10px;
	}
	
	.function-list {
		display: flex;
		flex-direction: row;
		justify-content: space-around;
	}
	
	.function-item {
		padding: 8px 15px;
		border-radius: 15px;
		background-color: #f0f0f0;
	}
	
	.function-item.active {
		background-color: #007aff;
	}
	
	.function-item.active .function-item-text {
		color: #fff;
	}
	
	.function-item-text {
		font-size: 14px;
		color: #333;
	}
	
	/* 输入区域 */
	.input-section {
		width: 100%;
		height: 50px;
		display: flex;
		flex-direction: row;
		align-items: center;
	}
	
	.message-input {
		flex: 1;
		height: 100%;
		background-color: #f0f0f5;
		border: 1px solid #ddd;
		border-radius: 8px;
		padding: 0 15px;
		margin-right: 10px;
	}
	
	.send-button {
		width: 80px;
		height: 50px;
		background-color: #007aff;
		color: #fff;
		border-radius: 8px;
		display: flex;
		align-items: center;
		justify-content: center;
	}
</style> 