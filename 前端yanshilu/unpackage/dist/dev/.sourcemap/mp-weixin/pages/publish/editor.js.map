{"version":3,"file":"editor.js","sources":["pages/publish/editor.uvue","../../HBuilderX/HBuilderX.4.45.2025010502/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvcHVibGlzaC9lZGl0b3IudXZ1ZQ"],"sourcesContent":["<template>\r\n  <view class=\"container\">\r\n    <view class=\"header\">\r\n      <view class=\"back-button\" @tap=\"goBack\">\r\n        <text>←</text>\r\n      </view>\r\n      <text class=\"header-title\">{{isDraft ? '编辑草稿' : '发布新动态'}}</text>\r\n    </view>\r\n    \r\n    <view class=\"form-content\">\r\n      <!-- 标题输入 -->\r\n      <view class=\"input-section\">\r\n        <view class=\"tag-row\">\r\n          <view class=\"tag-selection\" @tap=\"showTagSelector\">\r\n            <text class=\"tag-text\">{{selectedCategory}}</text>\r\n            <image class=\"tag-arrow\" src=\"/static/image/arrow_down.svg\" mode=\"aspectFit\"></image>\r\n          </view>\r\n          <view class=\"tag-item\" v-for=\"(tag, index) in selectedTags\" :key=\"index\">\r\n            <text>{{tag}}</text>\r\n            <text class=\"tag-remove\" @tap=\"removeTag(index)\">×</text>\r\n          </view>\r\n          <view class=\"add-tag\" @tap=\"showTagPrompt\" v-if=\"selectedTags.length < 3\">\r\n            <text>+</text>\r\n          </view>\r\n        </view>\r\n      </view>\r\n      \r\n      <!-- 内容输入 -->\r\n      <textarea \r\n        class=\"content-input\" \r\n        placeholder=\"请输入想要分享的内容...\" \r\n        v-model=\"postContent\"\r\n        maxlength=\"2000\"\r\n        auto-focus=\"false\"\r\n        auto-height=\"true\"\r\n      ></textarea>\r\n      \r\n      <!-- 字数统计 -->\r\n      <view class=\"word-count\">\r\n        <text>{{postContent.length}}/2000</text>\r\n      </view>\r\n      \r\n      <!-- 图片上传区域 -->\r\n      <view class=\"upload-section\">\r\n        <!-- 已上传图片预览 -->\r\n        <view class=\"uploaded-images\">\r\n          <view class=\"image-item\" v-for=\"(image, index) in images\" :key=\"index\">\r\n            <image class=\"preview-image\" :src=\"image\" mode=\"aspectFill\"></image>\r\n            <view class=\"delete-btn\" @tap.stop=\"deleteImage(index)\">×</view>\r\n          </view>\r\n          \r\n          <!-- 图片上传按钮，最多9张图片 -->\r\n          <view class=\"image-upload-btn\" @tap=\"chooseImage\" v-if=\"images.length < 9\">\r\n            <text class=\"upload-icon\">+</text>\r\n            <text class=\"upload-text\">添加图片</text>\r\n          </view>\r\n        </view>\r\n      </view>\r\n    </view>\r\n    \r\n    <!-- 底部按钮区域 -->\r\n    <view class=\"bottom-actions\">\r\n      <button class=\"action-btn save-btn\" @tap=\"saveAsDraft\">保存草稿</button>\r\n      <button class=\"action-btn publish-btn\" @tap=\"publishPost\" :disabled=\"!postContent.trim()\">发布</button>\r\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<script lang=\"uts\">\r\n  export default {\r\n    data() {\r\n      return {\r\n        postTitle: '',\r\n        postContent: '',\r\n        selectedCategory: '专业课',\r\n        selectedTags: [],\r\n        images: [],\r\n        userInfo: null,\r\n        isDraft: false,\r\n        draftId: null\r\n      }\r\n    },\r\n    // 组件初始化\r\n    onLoad(options) {\r\n      // 检查是否是编辑草稿\r\n      if (options.draftId) {\r\n        this.draftId = options.draftId;\r\n        this.loadDraft(options.draftId);\r\n      }\r\n      \r\n      // 获取用户信息\r\n      this.getUserInfo();\r\n    },\r\n    // 页面显示\r\n    onShow() {\r\n      // 检测草稿内容\r\n      if (!this.isDraft && !this.draftId) {\r\n        this.checkAutoSaveDraft();\r\n      }\r\n    },\r\n    // 页面隐藏\r\n    onHide() {\r\n      // 自动保存草稿\r\n      this.autoSaveDraft();\r\n    },\r\n    methods: {\r\n      /**\r\n       * @description 获取用户信息\r\n       */\r\n      getUserInfo() {\r\n        // 使用模拟数据\r\n        this.userInfo = {\r\n          id: 100,\r\n          nickname: '考研学生',\r\n          avatar: '/static/image/default_avatar.png',\r\n          school: '清华大学',\r\n          major: '计算机科学'\r\n        };\r\n        \r\n        // 实际API调用(暂时注释)\r\n        /*\r\n        uni.request({\r\n          url: 'YOUR_API_URL/user/info',\r\n          method: 'GET',\r\n          success: (res) => {\r\n            if (res.statusCode === 200 && res.data) {\r\n              this.userInfo = res.data;\r\n            }\r\n          },\r\n          fail: (err) => {\r\n            uni.__f__('error','at pages/publish/editor.uvue:131','获取用户信息失败:', err);\r\n          }\r\n        });\r\n        */\r\n      },\r\n      \r\n      /**\r\n       * @description 返回上一页\r\n       */\r\n      goBack() {\r\n        if (this.postContent || this.images.length > 0) {\r\n          uni.showModal({\r\n            title: '提示',\r\n            content: '是否保存为草稿？',\r\n            cancelText: '不保存',\r\n            confirmText: '保存',\r\n            success: (res) => {\r\n              if (res.confirm) {\r\n                this.saveAsDraft();\r\n              } else {\r\n                uni.navigateBack({\r\n                  delta: 1,\r\n                  fail: () => {\r\n                    // 如果返回失败，尝试使用reLaunch\r\n                    uni.reLaunch({\r\n                      url: '/pages/publish/publish'\r\n                    });\r\n                  }\r\n                });\r\n              }\r\n            }\r\n          });\r\n        } else {\r\n          uni.navigateBack({\r\n            delta: 1,\r\n            fail: () => {\r\n              // 如果返回失败，尝试使用reLaunch\r\n              uni.reLaunch({\r\n                url: '/pages/publish/publish'\r\n              });\r\n            }\r\n          });\r\n        }\r\n      },\r\n      \r\n      /**\r\n       * @description 显示标签选择器\r\n       */\r\n      showTagSelector() {\r\n        uni.showActionSheet({\r\n          itemList: ['专业课', '数学', '英语', '政治', '历史', '地理', '物理', '化学', '生物'],\r\n          success: (res) => {\r\n            const selectedIndex = res.tapIndex;\r\n            this.selectedCategory = ['专业课', '数学', '英语', '政治', '历史', '地理', '物理', '化学', '生物'][selectedIndex];\r\n          }\r\n        });\r\n      },\r\n      \r\n      /**\r\n       * @description 显示添加标签提示框\r\n       */\r\n      showTagPrompt() {\r\n        uni.showModal({\r\n          title: '添加标签',\r\n          content: '添加一个标签，方便他人查找（15字以内）',\r\n          editable: true,\r\n          placeholderText: '如：复习方法',\r\n          success: (res) => {\r\n            if (res.confirm && res.content) {\r\n              // 标签去重和长度限制\r\n              if (res.content.length > 15) {\r\n                uni.showToast({\r\n                  title: '标签过长',\r\n                  icon: 'none'\r\n                });\r\n                return;\r\n              }\r\n              \r\n              // 标签最多3个\r\n              if (this.selectedTags.length >= 3) {\r\n                uni.showToast({\r\n                  title: '最多添加3个标签',\r\n                  icon: 'none'\r\n                });\r\n                return;\r\n              }\r\n              \r\n              // 检查重复\r\n              if (this.selectedTags.includes(res.content)) {\r\n                uni.showToast({\r\n                  title: '标签已存在',\r\n                  icon: 'none'\r\n                });\r\n                return;\r\n              }\r\n              \r\n              // 添加标签\r\n              this.selectedTags.push(res.content);\r\n            }\r\n          }\r\n        });\r\n      },\r\n      \r\n      /**\r\n       * @description 移除标签\r\n       * @param {Number} index - 标签索引\r\n       */\r\n      removeTag(index) {\r\n        this.selectedTags.splice(index, 1);\r\n      },\r\n      \r\n      /**\r\n       * @description 选择图片\r\n       */\r\n      chooseImage() {\r\n        uni.chooseImage({\r\n          count: 9 - this.images.length, // 最多9张图片\r\n          sizeType: ['compressed'],\r\n          sourceType: ['album', 'camera'],\r\n          success: (res) => {\r\n            // 检查图片内容\r\n            this.checkImageContent(res.tempFilePaths);\r\n          }\r\n        });\r\n      },\r\n      \r\n      /**\r\n       * @description 检查图片内容(防止二维码等)\r\n       * @param {Array} imagePaths - 图片路径数组 \r\n       */\r\n      checkImageContent(imagePaths) {\r\n        // 模拟图片内容检查\r\n        // 实际应用中需要调用后端API进行检查\r\n        setTimeout(() => {\r\n          // 添加图片\r\n          this.images = [...this.images, ...imagePaths];\r\n          \r\n          // 超过9张则截取\r\n          if (this.images.length > 9) {\r\n            this.images = this.images.slice(0, 9);\r\n          }\r\n        }, 500);\r\n      },\r\n      \r\n      /**\r\n       * @description 删除图片\r\n       * @param {Number} index - 图片索引\r\n       */\r\n      deleteImage(index) {\r\n        this.images.splice(index, 1);\r\n      },\r\n      \r\n      /**\r\n       * @description 保存为草稿\r\n       */\r\n      saveAsDraft() {\r\n        // 检查是否有内容\r\n        if (!this.postContent && this.images.length === 0) {\r\n          uni.showToast({\r\n            title: '请先输入内容',\r\n            icon: 'none'\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 构建草稿数据\r\n        const draftData = {\r\n          id: this.draftId || null,\r\n          title: this.postTitle,\r\n          content: this.postContent,\r\n          category: this.selectedCategory,\r\n          tags: this.selectedTags,\r\n          images: this.images,\r\n          updateTime: new Date().getTime()\r\n        };\r\n        \r\n        // 模拟接口保存草稿\r\n        uni.showLoading({\r\n          title: '保存中...'\r\n        });\r\n        \r\n        setTimeout(() => {\r\n          uni.hideLoading();\r\n          uni.showToast({\r\n            title: '草稿保存成功',\r\n            icon: 'success'\r\n          });\r\n          \r\n          // 如果是新建草稿，生成一个模拟ID\r\n          if (!this.draftId) {\r\n            this.draftId = new Date().getTime().toString();\r\n          }\r\n          \r\n          // 延迟返回\r\n          setTimeout(() => {\r\n            uni.navigateBack({\r\n              delta: 1,\r\n              fail: () => {\r\n                // 如果返回失败，尝试使用reLaunch\r\n                uni.reLaunch({\r\n                  url: '/pages/publish/publish'\r\n                });\r\n              }\r\n            });\r\n          }, 1000);\r\n        }, 800);\r\n        \r\n        // 实际API调用(暂时注释)\r\n        /*\r\n        uni.request({\r\n          url: 'YOUR_API_URL/post/draft',\r\n          method: 'POST',\r\n          data: draftData,\r\n          success: (res) => {\r\n            if (res.statusCode === 200) {\r\n              uni.showToast({\r\n                title: '草稿保存成功',\r\n                icon: 'success'\r\n              });\r\n              \r\n              // 如果是新建草稿，保存返回的ID\r\n              if (!this.draftId && res.data && res.data.id) {\r\n                this.draftId = res.data.id;\r\n              }\r\n              \r\n              // 延迟返回\r\n              setTimeout(() => {\r\n                uni.navigateBack();\r\n              }, 1000);\r\n            } else {\r\n              uni.showToast({\r\n                title: '草稿保存失败',\r\n                icon: 'none'\r\n              });\r\n            }\r\n          },\r\n          fail: () => {\r\n            uni.showToast({\r\n              title: '网络异常',\r\n              icon: 'none'\r\n            });\r\n          }\r\n        });\r\n        */\r\n      },\r\n      \r\n      /**\r\n       * @description 自动保存草稿(本地)\r\n       */\r\n      autoSaveDraft() {\r\n        if (this.postContent || this.images.length > 0) {\r\n          try {\r\n            uni.setStorageSync('post_draft_auto', {\r\n              content: this.postContent,\r\n              category: this.selectedCategory,\r\n              tags: this.selectedTags,\r\n              images: this.images,\r\n              updateTime: new Date().getTime()\r\n            });\r\n          } catch (e) {\r\n            uni.__f__('error','at pages/publish/editor.uvue:391','自动保存草稿失败', e);\r\n          }\r\n        }\r\n      },\r\n      \r\n      /**\r\n       * @description 检查自动保存的草稿\r\n       */\r\n      checkAutoSaveDraft() {\r\n        try {\r\n          const autoDraft = uni.getStorageSync('post_draft_auto');\r\n          if (autoDraft && autoDraft.updateTime) {\r\n            const timeAgo = Math.floor((new Date().getTime() - autoDraft.updateTime) / 60000); // 分钟\r\n            \r\n            if (timeAgo < 60) { // 1小时内的草稿\r\n              uni.showModal({\r\n                title: '发现未发布的内容',\r\n                content: `您有${timeAgo}分钟前编辑的内容未发布，是否继续编辑？`,\r\n                success: (res) => {\r\n                  if (res.confirm) {\r\n                    this.postContent = autoDraft.content || '';\r\n                    this.selectedCategory = autoDraft.category || '专业课';\r\n                    this.selectedTags = autoDraft.tags || [];\r\n                    this.images = autoDraft.images || [];\r\n                  } else {\r\n                    // 清除草稿\r\n                    uni.removeStorageSync('post_draft_auto');\r\n                  }\r\n                }\r\n              });\r\n            } else {\r\n              // 草稿太旧，自动清除\r\n              uni.removeStorageSync('post_draft_auto');\r\n            }\r\n          }\r\n        } catch (e) {\r\n          uni.__f__('error','at pages/publish/editor.uvue:427','检查自动草稿失败', e);\r\n        }\r\n      },\r\n      \r\n      /**\r\n       * @description 加载草稿内容\r\n       * @param {String} draftId - 草稿ID\r\n       */\r\n      loadDraft(draftId) {\r\n        // 模拟加载草稿\r\n        setTimeout(() => {\r\n          const mockDraft = {\r\n            title: '考研复习经验分享',\r\n            content: '分享一下我的考研经验，希望对大家有所帮助...',\r\n            category: '专业课',\r\n            tags: ['复习方法', '时间规划'],\r\n            images: []\r\n          };\r\n          \r\n          this.postTitle = mockDraft.title;\r\n          this.postContent = mockDraft.content;\r\n          this.selectedCategory = mockDraft.category;\r\n          this.selectedTags = mockDraft.tags;\r\n          this.images = mockDraft.images;\r\n          this.isDraft = true;\r\n        }, 500);\r\n        \r\n        // 实际API调用(暂时注释)\r\n        /*\r\n        uni.request({\r\n          url: `YOUR_API_URL/post/draft/${draftId}`,\r\n          method: 'GET',\r\n          success: (res) => {\r\n            if (res.statusCode === 200 && res.data) {\r\n              const draft = res.data;\r\n              this.postTitle = draft.title || '';\r\n              this.postContent = draft.content || '';\r\n              this.selectedCategory = draft.category || '专业课';\r\n              this.selectedTags = draft.tags || [];\r\n              this.images = draft.images || [];\r\n              this.isDraft = true;\r\n            }\r\n          },\r\n          fail: (err) => {\r\n            uni.__f__('error','at pages/publish/editor.uvue:471','加载草稿失败:', err);\r\n            uni.showToast({\r\n              title: '草稿加载失败',\r\n              icon: 'none'\r\n            });\r\n          }\r\n        });\r\n        */\r\n      },\r\n      \r\n      /**\r\n       * @description 发布帖子\r\n       */\r\n      publishPost() {\r\n        // 内容检查\r\n        if (!this.postContent) {\r\n          uni.showToast({\r\n            title: '请输入内容',\r\n            icon: 'none'\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 模拟内容检测和发布过程\r\n        uni.showLoading({\r\n          title: '发布中...'\r\n        });\r\n        \r\n        setTimeout(() => {\r\n          uni.hideLoading();\r\n          uni.showToast({\r\n            title: '发布成功',\r\n            icon: 'success'\r\n          });\r\n          \r\n          // 清除自动保存的草稿\r\n          uni.removeStorageSync('post_draft_auto');\r\n          \r\n          // 延迟返回\r\n          setTimeout(() => {\r\n            uni.navigateBack({\r\n              delta: 1,\r\n              fail: () => {\r\n                // 如果返回失败，尝试使用reLaunch\r\n                uni.reLaunch({\r\n                  url: '/pages/publish/publish'\r\n                });\r\n              }\r\n            });\r\n          }, 1000);\r\n        }, 1500);\r\n        \r\n        // 注释掉原来的实现\r\n        /*\r\n        // 内容检测\r\n        this.checkContent(() => {\r\n          // 显示加载中\r\n          uni.showLoading({\r\n            title: '发布中...'\r\n          });\r\n          \r\n          // 先上传图片\r\n          this.uploadImages((imageUrls) => {\r\n            // 构建发布数据\r\n            const postData = {\r\n              title: this.postTitle || this.selectedCategory, // 如果没有标题，使用分类作为标题\r\n              content: this.postContent,\r\n              category: this.selectedCategory,\r\n              tags: this.selectedTags,\r\n              images: imageUrls,\r\n              draftId: this.draftId // 如果是草稿，提供草稿ID以便发布后删除\r\n            };\r\n            \r\n            // 调用接口发布帖子\r\n            uni.request({\r\n              url: 'YOUR_API_URL/post/publish',\r\n              method: 'POST',\r\n              data: postData,\r\n              success: (res) => {\r\n                uni.hideLoading();\r\n                \r\n                if (res.statusCode === 200) {\r\n                  uni.showToast({\r\n                    title: '发布成功',\r\n                    icon: 'success'\r\n                  });\r\n                  \r\n                  // 清除自动保存的草稿\r\n                  uni.removeStorageSync('post_draft_auto');\r\n                  \r\n                  // 延迟返回\r\n                  setTimeout(() => {\r\n                    uni.navigateBack();\r\n                  }, 1000);\r\n                } else {\r\n                  uni.showToast({\r\n                    title: res.data.message || '发布失败',\r\n                    icon: 'none'\r\n                  });\r\n                }\r\n              },\r\n              fail: () => {\r\n                uni.hideLoading();\r\n                uni.showToast({\r\n                  title: '网络异常',\r\n                  icon: 'none'\r\n                });\r\n              }\r\n            });\r\n          });\r\n        });\r\n        */\r\n      },\r\n      \r\n      /**\r\n       * @description 检查内容是否合规(无二维码、手机号、微信号)\r\n       * @param {Function} callback - 检查通过后的回调\r\n       */\r\n      checkContent(callback) {\r\n        // 正则表达式检查手机号和微信号\r\n        const phoneRegex = /1[3-9]\\d{9}/g;\r\n        const wechatRegex = /(微信|wx|weixin)[: ]*([a-zA-Z0-9_-]{6,20})/gi;\r\n        \r\n        if (phoneRegex.test(this.postContent) || wechatRegex.test(this.postContent)) {\r\n          uni.showToast({\r\n            title: '内容含有联系方式，请修改后重试',\r\n            icon: 'none'\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 调用后端API进行更复杂的内容检查\r\n        uni.request({\r\n          url: 'YOUR_API_URL/content/check',\r\n          method: 'POST',\r\n          data: {\r\n            content: this.postContent\r\n          },\r\n          success: (res) => {\r\n            if (res.statusCode === 200 && res.data.valid) {\r\n              callback && callback();\r\n            } else {\r\n              uni.showToast({\r\n                title: res.data.message || '内容不合规，请修改后重试',\r\n                icon: 'none'\r\n              });\r\n            }\r\n          },\r\n          fail: () => {\r\n            uni.showToast({\r\n              title: '网络异常，请稍后再试',\r\n              icon: 'none'\r\n            });\r\n          }\r\n        });\r\n      },\r\n      \r\n      /**\r\n       * @description 上传图片\r\n       * @param {Function} callback - 上传完成后的回调，参数为图片URL数组\r\n       */\r\n      uploadImages(callback) {\r\n        if (this.images.length === 0) {\r\n          callback && callback([]);\r\n          return;\r\n        }\r\n        \r\n        const uploadedUrls = [];\r\n        let uploadCount = 0;\r\n        \r\n        // 显示上传进度\r\n        uni.showLoading({\r\n          title: `上传图片 0/${this.images.length}`\r\n        });\r\n        \r\n        // 逐个上传图片\r\n        this.images.forEach((path) => {\r\n          uni.uploadFile({\r\n            url: 'YOUR_API_URL/upload/image',\r\n            filePath: path,\r\n            name: 'file',\r\n            success: (res) => {\r\n              uploadCount++;\r\n              \r\n              // 更新进度\r\n              uni.showLoading({\r\n                title: `上传图片 ${uploadCount}/${this.images.length}`\r\n              });\r\n              \r\n              // 解析响应\r\n              if (res.statusCode === 200) {\r\n                try {\r\n                  const data = JSON.parse(res.data);\r\n                  if (data.url) {\r\n                    uploadedUrls.push(data.url);\r\n                  }\r\n                } catch (e) {\r\n                  uni.__f__('error','at pages/publish/editor.uvue:668','解析上传响应失败', e);\r\n                }\r\n              }\r\n              \r\n              // 所有图片上传完成\r\n              if (uploadCount === this.images.length) {\r\n                uni.hideLoading();\r\n                callback && callback(uploadedUrls);\r\n              }\r\n            },\r\n            fail: () => {\r\n              uploadCount++;\r\n              \r\n              // 更新进度\r\n              uni.showLoading({\r\n                title: `上传图片 ${uploadCount}/${this.images.length}`\r\n              });\r\n              \r\n              // 所有图片上传完成\r\n              if (uploadCount === this.images.length) {\r\n                uni.hideLoading();\r\n                callback && callback(uploadedUrls);\r\n              }\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n  /* 全局样式变量 */\r\n  page {\r\n    --primary-color: #1E90FF;\r\n    --primary-light: #87CEEB;\r\n    --primary-dark: #0073CF;\r\n    --gradient-blue: linear-gradient(135deg, #1E90FF, #00BFFF);\r\n    --gradient-blue-light: linear-gradient(135deg, #87CEEB, #48D1CC);\r\n    --text-primary: #333333;\r\n    --text-secondary: #666666;\r\n    --text-light: #999999;\r\n    --bg-color: #F5F9FC;\r\n    --card-shadow: 0 4px 12px rgba(30, 144, 255, 0.1);\r\n    font-family: \"PingFang SC\", \"Helvetica Neue\", Arial, sans-serif;\r\n  }\r\n  \r\n  .container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n    background-color: var(--bg-color);\r\n  }\r\n  \r\n  .header {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    padding: 15px 20px;\r\n    background-image: var(--gradient-blue);\r\n    border-bottom-left-radius: 20px;\r\n    border-bottom-right-radius: 20px;\r\n    box-shadow: 0 4px 15px rgba(30, 144, 255, 0.2);\r\n  }\r\n  \r\n  .back-button {\r\n    padding: 8px;\r\n    font-size: 20px;\r\n    color: #ffffff;\r\n    width: 36px;\r\n    height: 36px;\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n    border-radius: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: all 0.3s ease;\r\n  }\r\n  \r\n  .back-button:active {\r\n    transform: scale(0.92);\r\n    background-color: rgba(255, 255, 255, 0.3);\r\n  }\r\n  \r\n  .header-title {\r\n    flex: 1;\r\n    text-align: center;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #ffffff;\r\n    letter-spacing: 0.5px;\r\n  }\r\n  \r\n  .form-content {\r\n    padding: 20px;\r\n    flex: 1;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .input-section {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .tag-row {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .tag-selection {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 8px 16px;\r\n    margin-right: 10px;\r\n    margin-bottom: 10px;\r\n    border: 1px solid rgba(30, 144, 255, 0.3);\r\n    border-radius: 20px;\r\n    font-size: 14px;\r\n    background-color: rgba(30, 144, 255, 0.05);\r\n    transition: all 0.3s ease;\r\n  }\r\n  \r\n  .tag-selection:active {\r\n    background-color: rgba(30, 144, 255, 0.1);\r\n    transform: scale(0.98);\r\n  }\r\n  \r\n  .tag-text {\r\n    margin-right: 5px;\r\n    color: var(--primary-color);\r\n    font-weight: 500;\r\n  }\r\n  \r\n  .tag-arrow {\r\n    width: 14px;\r\n    height: 14px;\r\n    opacity: 0.8;\r\n  }\r\n  \r\n  .tag-item {\r\n    padding: 8px 16px;\r\n    margin-right: 10px;\r\n    margin-bottom: 10px;\r\n    border-radius: 20px;\r\n    font-size: 14px;\r\n    background-image: var(--gradient-blue-light);\r\n    color: #ffffff;\r\n    box-shadow: 0 2px 6px rgba(30, 144, 255, 0.2);\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  \r\n  .tag-remove {\r\n    margin-left: 8px;\r\n    color: #ffffff;\r\n    font-size: 16px;\r\n    opacity: 0.8;\r\n  }\r\n  \r\n  .add-tag {\r\n    padding: 8px 16px;\r\n    margin-right: 10px;\r\n    margin-bottom: 10px;\r\n    border: 1px dashed rgba(30, 144, 255, 0.5);\r\n    border-radius: 20px;\r\n    font-size: 14px;\r\n    background-color: rgba(30, 144, 255, 0.05);\r\n    color: var(--primary-color);\r\n    transition: all 0.3s ease;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n  \r\n  .add-tag:active {\r\n    background-color: rgba(30, 144, 255, 0.1);\r\n    transform: scale(0.98);\r\n  }\r\n  \r\n  .add-tag text {\r\n    font-size: 18px;\r\n    margin-right: 2px;\r\n  }\r\n  \r\n  .content-input {\r\n    width: 100%;\r\n    min-height: 200px;\r\n    padding: 15px;\r\n    font-size: 15px;\r\n    line-height: 1.6;\r\n    border: 1px solid rgba(0, 0, 0, 0.08);\r\n    border-radius: 12px;\r\n    margin-bottom: 15px;\r\n    box-sizing: border-box;\r\n    background-color: #ffffff;\r\n    color: var(--text-primary);\r\n    transition: all 0.3s ease;\r\n  }\r\n  \r\n  .content-input:focus {\r\n    border-color: var(--primary-color);\r\n    box-shadow: 0 0 0 3px rgba(30, 144, 255, 0.1);\r\n  }\r\n  \r\n  .word-count {\r\n    text-align: right;\r\n    font-size: 13px;\r\n    color: var(--text-secondary);\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .upload-section {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin-bottom: 25px;\r\n  }\r\n  \r\n  .image-upload-btn {\r\n    width: 100px;\r\n    height: 100px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: 1px dashed rgba(30, 144, 255, 0.5);\r\n    border-radius: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 12px;\r\n    background-color: rgba(30, 144, 255, 0.03);\r\n    transition: all 0.3s ease;\r\n  }\r\n  \r\n  .image-upload-btn:active {\r\n    background-color: rgba(30, 144, 255, 0.08);\r\n    transform: scale(0.98);\r\n  }\r\n  \r\n  .upload-icon {\r\n    font-size: 30px;\r\n    color: var(--primary-color);\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  .upload-text {\r\n    color: var(--primary-color);\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .uploaded-images {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n  \r\n  .image-item {\r\n    position: relative;\r\n    width: 100px;\r\n    height: 100px;\r\n    margin-right: 12px;\r\n    margin-bottom: 12px;\r\n    border-radius: 12px;\r\n    overflow: hidden;\r\n    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .preview-image {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n  }\r\n  \r\n  .delete-btn {\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 5px;\r\n    width: 22px;\r\n    height: 22px;\r\n    background-color: rgba(0, 0, 0, 0.6);\r\n    color: #ffffff;\r\n    font-size: 16px;\r\n    text-align: center;\r\n    line-height: 22px;\r\n    border-radius: 50%;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n  }\r\n  \r\n  .bottom-actions {\r\n    display: flex;\r\n    padding: 15px 20px 25px;\r\n    background-color: #ffffff;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.05);\r\n    box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);\r\n  }\r\n  \r\n  .action-btn {\r\n    flex: 1;\r\n    height: 45px;\r\n    line-height: 45px;\r\n    text-align: center;\r\n    border-radius: 22.5px;\r\n    font-size: 16px;\r\n    font-weight: 500;\r\n    transition: all 0.3s ease;\r\n  }\r\n  \r\n  .save-btn {\r\n    background-color: rgba(30, 144, 255, 0.1);\r\n    color: var(--primary-color);\r\n    margin-right: 15px;\r\n  }\r\n  \r\n  .save-btn:active {\r\n    background-color: rgba(30, 144, 255, 0.2);\r\n    transform: scale(0.98);\r\n  }\r\n  \r\n  .publish-btn {\r\n    background-image: var(--gradient-blue);\r\n    color: #ffffff;\r\n    box-shadow: 0 3px 10px rgba(30, 144, 255, 0.3);\r\n  }\r\n  \r\n  .publish-btn:active {\r\n    transform: scale(0.98);\r\n    box-shadow: 0 2px 6px rgba(30, 144, 255, 0.2);\r\n  }\r\n</style>","import MiniProgramPage from 'E:/yanshilu小程序前端/前端yanshilu/pages/publish/editor.uvue'\nwx.createPage(MiniProgramPage)"],"names":["_sfc_main","defineComponent","data","postTitle","postContent","selectedCategory","selectedTags","images","userInfo","isDraft","draftId","onLoad","options","this","loadDraft","getUserInfo","onShow","checkAutoSaveDraft","onHide","autoSaveDraft","methods","id","nickname","avatar","school","major","goBack","length","uni","showModal","title","content","cancelText","confirmText","success","res","confirm","saveAsDraft","navigateBack","delta","fail","reLaunch","url","showTagSelector","showActionSheet","itemList","selectedIndex","tapIndex","showTagPrompt","editable","placeholderText","showToast","icon","includes","push","removeTag","index","splice","chooseImage","count","sizeType","sourceType","checkImageContent","tempFilePaths","imagePaths","setTimeout","slice","deleteImage","UTSJSONObject","category","tags","updateTime","Date","getTime","showLoading","hideLoading","toString","setStorageSync","e","__f__","autoDraft","getStorageSync","timeAgo","Math","floor","removeStorageSync","mockDraft","publishPost","checkContent","callback","test","request","method","statusCode","valid","message","uploadImages","uploadedUrls","uploadCount","forEach","path","uploadFile","filePath","name","UTS","JSON","parse","wx","createPage","MiniProgramPage"],"mappings":"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"}