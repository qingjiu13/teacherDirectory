{"version":3,"file":"editor.js","sources":["pages/publish/editor.uvue","../../HBuilderX/HBuilderX.4.45.2025010502/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvcHVibGlzaC9lZGl0b3IudXZ1ZQ"],"sourcesContent":["<template>\r\n  <view class=\"container\">\r\n    <view class=\"header\">\r\n      <view class=\"back-button\" @tap=\"goBack\">\r\n        <text>←</text>\r\n      </view>\r\n      <text class=\"header-title\">{{isDraft ? '编辑草稿' : '发布新动态'}}</text>\r\n    </view>\r\n    \r\n    <view class=\"form-content\">\r\n      <!-- 标题输入 -->\r\n      <view class=\"input-section\">\r\n        <view class=\"tag-row\">\r\n          <view class=\"tag-selection\" @tap=\"showTagSelector\">\r\n            <text class=\"tag-text\">{{selectedCategory}}</text>\r\n            <image class=\"tag-arrow\" src=\"/static/image/arrow_down.svg\" mode=\"aspectFit\"></image>\r\n          </view>\r\n          <view class=\"tag-item\" v-for=\"(tag, index) in selectedTags\" :key=\"index\">\r\n            <text>{{tag}}</text>\r\n            <text class=\"tag-remove\" @tap=\"removeTag(index)\">×</text>\r\n          </view>\r\n          <view class=\"add-tag\" @tap=\"showTagPrompt\" v-if=\"selectedTags.length < 3\">\r\n            <text>+</text>\r\n          </view>\r\n        </view>\r\n      </view>\r\n      \r\n      <!-- 内容输入 -->\r\n      <textarea \r\n        class=\"content-input\" \r\n        placeholder=\"请输入想要分享的内容...\" \r\n        v-model=\"postContent\"\r\n        maxlength=\"2000\"\r\n        auto-focus=\"false\"\r\n        auto-height=\"true\"\r\n      ></textarea>\r\n      \r\n      <!-- 字数统计 -->\r\n      <view class=\"word-count\">\r\n        <text>{{postContent.length}}/2000</text>\r\n      </view>\r\n      \r\n      <!-- 图片上传区域 -->\r\n      <view class=\"upload-section\">\r\n        <!-- 已上传图片预览 -->\r\n        <view class=\"uploaded-images\">\r\n          <view class=\"image-item\" v-for=\"(image, index) in images\" :key=\"index\">\r\n            <image class=\"preview-image\" :src=\"image\" mode=\"aspectFill\"></image>\r\n            <view class=\"delete-btn\" @tap.stop=\"deleteImage(index)\">×</view>\r\n          </view>\r\n          \r\n          <!-- 图片上传按钮，最多9张图片 -->\r\n          <view class=\"image-upload-btn\" @tap=\"chooseImage\" v-if=\"images.length < 9\">\r\n            <text class=\"upload-icon\">+</text>\r\n            <text class=\"upload-text\">添加图片</text>\r\n          </view>\r\n        </view>\r\n      </view>\r\n    </view>\r\n    \r\n    <!-- 底部按钮区域 -->\r\n    <view class=\"bottom-actions\">\r\n      <button class=\"action-btn save-btn\" @tap=\"saveAsDraft\">保存草稿</button>\r\n      <button class=\"action-btn publish-btn\" @tap=\"publishPost\" :disabled=\"!postContent.trim()\">发布</button>\r\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<script lang=\"uts\">\r\n  export default {\r\n    data() {\r\n      return {\r\n        postTitle: '',\r\n        postContent: '',\r\n        selectedCategory: '专业课',\r\n        selectedTags: [],\r\n        images: [],\r\n        userInfo: null,\r\n        isDraft: false,\r\n        draftId: null\r\n      }\r\n    },\r\n    // 组件初始化\r\n    onLoad(options) {\r\n      // 检查是否是编辑草稿\r\n      if (options.draftId) {\r\n        this.draftId = options.draftId;\r\n        this.loadDraft(options.draftId);\r\n      }\r\n      \r\n      // 获取用户信息\r\n      this.getUserInfo();\r\n    },\r\n    // 页面显示\r\n    onShow() {\r\n      // 检测草稿内容\r\n      if (!this.isDraft && !this.draftId) {\r\n        this.checkAutoSaveDraft();\r\n      }\r\n    },\r\n    // 页面隐藏\r\n    onHide() {\r\n      // 自动保存草稿\r\n      this.autoSaveDraft();\r\n    },\r\n    methods: {\r\n      /**\r\n       * @description 获取用户信息\r\n       */\r\n      getUserInfo() {\r\n        // 使用模拟数据\r\n        this.userInfo = {\r\n          id: 100,\r\n          nickname: '考研学生',\r\n          avatar: '/static/image/default_avatar.png',\r\n          school: '清华大学',\r\n          major: '计算机科学'\r\n        };\r\n        \r\n        // 实际API调用(暂时注释)\r\n        /*\r\n        uni.request({\r\n          url: 'YOUR_API_URL/user/info',\r\n          method: 'GET',\r\n          success: (res) => {\r\n            if (res.statusCode === 200 && res.data) {\r\n              this.userInfo = res.data;\r\n            }\r\n          },\r\n          fail: (err) => {\r\n            uni.__f__('error','at pages/publish/editor.uvue:131','获取用户信息失败:', err);\r\n          }\r\n        });\r\n        */\r\n      },\r\n      \r\n      /**\r\n       * @description 返回上一页\r\n       */\r\n      goBack() {\r\n        if (this.postContent || this.images.length > 0) {\r\n          uni.showModal({\r\n            title: '提示',\r\n            content: '是否保存为草稿？',\r\n            cancelText: '不保存',\r\n            confirmText: '保存',\r\n            success: (res) => {\r\n              if (res.confirm) {\r\n                this.saveAsDraft();\r\n              } else {\r\n                uni.navigateBack({\r\n                  delta: 1,\r\n                  fail: () => {\r\n                    // 如果返回失败，尝试使用reLaunch\r\n                    uni.reLaunch({\r\n                      url: '/pages/publish/publish'\r\n                    });\r\n                  }\r\n                });\r\n              }\r\n            }\r\n          });\r\n        } else {\r\n          uni.navigateBack({\r\n            delta: 1,\r\n            fail: () => {\r\n              // 如果返回失败，尝试使用reLaunch\r\n              uni.reLaunch({\r\n                url: '/pages/publish/publish'\r\n              });\r\n            }\r\n          });\r\n        }\r\n      },\r\n      \r\n      /**\r\n       * @description 显示标签选择器\r\n       */\r\n      showTagSelector() {\r\n        uni.showActionSheet({\r\n          itemList: ['专业课', '数学', '英语', '政治', '历史', '地理', '物理', '化学', '生物'],\r\n          success: (res) => {\r\n            const selectedIndex = res.tapIndex;\r\n            this.selectedCategory = ['专业课', '数学', '英语', '政治', '历史', '地理', '物理', '化学', '生物'][selectedIndex];\r\n          }\r\n        });\r\n      },\r\n      \r\n      /**\r\n       * @description 显示添加标签提示框\r\n       */\r\n      showTagPrompt() {\r\n        uni.showModal({\r\n          title: '添加标签',\r\n          content: '添加一个标签，方便他人查找（15字以内）',\r\n          editable: true,\r\n          placeholderText: '如：复习方法',\r\n          success: (res) => {\r\n            if (res.confirm && res.content) {\r\n              // 标签去重和长度限制\r\n              if (res.content.length > 15) {\r\n                uni.showToast({\r\n                  title: '标签过长',\r\n                  icon: 'none'\r\n                });\r\n                return;\r\n              }\r\n              \r\n              // 标签最多3个\r\n              if (this.selectedTags.length >= 3) {\r\n                uni.showToast({\r\n                  title: '最多添加3个标签',\r\n                  icon: 'none'\r\n                });\r\n                return;\r\n              }\r\n              \r\n              // 检查重复\r\n              if (this.selectedTags.includes(res.content)) {\r\n                uni.showToast({\r\n                  title: '标签已存在',\r\n                  icon: 'none'\r\n                });\r\n                return;\r\n              }\r\n              \r\n              // 添加标签\r\n              this.selectedTags.push(res.content);\r\n            }\r\n          }\r\n        });\r\n      },\r\n      \r\n      /**\r\n       * @description 移除标签\r\n       * @param {Number} index - 标签索引\r\n       */\r\n      removeTag(index) {\r\n        this.selectedTags.splice(index, 1);\r\n      },\r\n      \r\n      /**\r\n       * @description 选择图片\r\n       */\r\n      chooseImage() {\r\n        uni.chooseImage({\r\n          count: 9 - this.images.length, // 最多9张图片\r\n          sizeType: ['compressed'],\r\n          sourceType: ['album', 'camera'],\r\n          success: (res) => {\r\n            // 检查图片内容\r\n            this.checkImageContent(res.tempFilePaths);\r\n          }\r\n        });\r\n      },\r\n      \r\n      /**\r\n       * @description 检查图片内容(防止二维码等)\r\n       * @param {Array} imagePaths - 图片路径数组 \r\n       */\r\n      checkImageContent(imagePaths) {\r\n        // 模拟图片内容检查\r\n        // 实际应用中需要调用后端API进行检查\r\n        setTimeout(() => {\r\n          // 添加图片\r\n          this.images = [...this.images, ...imagePaths];\r\n          \r\n          // 超过9张则截取\r\n          if (this.images.length > 9) {\r\n            this.images = this.images.slice(0, 9);\r\n          }\r\n        }, 500);\r\n      },\r\n      \r\n      /**\r\n       * @description 删除图片\r\n       * @param {Number} index - 图片索引\r\n       */\r\n      deleteImage(index) {\r\n        this.images.splice(index, 1);\r\n      },\r\n      \r\n      /**\r\n       * @description 保存为草稿\r\n       */\r\n      saveAsDraft() {\r\n        // 检查是否有内容\r\n        if (!this.postContent && this.images.length === 0) {\r\n          uni.showToast({\r\n            title: '请先输入内容',\r\n            icon: 'none'\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 构建草稿数据\r\n        const draftData = {\r\n          id: this.draftId || null,\r\n          title: this.postTitle,\r\n          content: this.postContent,\r\n          category: this.selectedCategory,\r\n          tags: this.selectedTags,\r\n          images: this.images,\r\n          updateTime: new Date().getTime()\r\n        };\r\n        \r\n        // 模拟接口保存草稿\r\n        uni.showLoading({\r\n          title: '保存中...'\r\n        });\r\n        \r\n        setTimeout(() => {\r\n          uni.hideLoading();\r\n          uni.showToast({\r\n            title: '草稿保存成功',\r\n            icon: 'success'\r\n          });\r\n          \r\n          // 如果是新建草稿，生成一个模拟ID\r\n          if (!this.draftId) {\r\n            this.draftId = new Date().getTime().toString();\r\n          }\r\n          \r\n          // 延迟返回\r\n          setTimeout(() => {\r\n            uni.navigateBack({\r\n              delta: 1,\r\n              fail: () => {\r\n                // 如果返回失败，尝试使用reLaunch\r\n                uni.reLaunch({\r\n                  url: '/pages/publish/publish'\r\n                });\r\n              }\r\n            });\r\n          }, 1000);\r\n        }, 800);\r\n        \r\n        // 实际API调用(暂时注释)\r\n        /*\r\n        uni.request({\r\n          url: 'YOUR_API_URL/post/draft',\r\n          method: 'POST',\r\n          data: draftData,\r\n          success: (res) => {\r\n            if (res.statusCode === 200) {\r\n              uni.showToast({\r\n                title: '草稿保存成功',\r\n                icon: 'success'\r\n              });\r\n              \r\n              // 如果是新建草稿，保存返回的ID\r\n              if (!this.draftId && res.data && res.data.id) {\r\n                this.draftId = res.data.id;\r\n              }\r\n              \r\n              // 延迟返回\r\n              setTimeout(() => {\r\n                uni.navigateBack();\r\n              }, 1000);\r\n            } else {\r\n              uni.showToast({\r\n                title: '草稿保存失败',\r\n                icon: 'none'\r\n              });\r\n            }\r\n          },\r\n          fail: () => {\r\n            uni.showToast({\r\n              title: '网络异常',\r\n              icon: 'none'\r\n            });\r\n          }\r\n        });\r\n        */\r\n      },\r\n      \r\n      /**\r\n       * @description 自动保存草稿(本地)\r\n       */\r\n      autoSaveDraft() {\r\n        if (this.postContent || this.images.length > 0) {\r\n          try {\r\n            uni.setStorageSync('post_draft_auto', {\r\n              content: this.postContent,\r\n              category: this.selectedCategory,\r\n              tags: this.selectedTags,\r\n              images: this.images,\r\n              updateTime: new Date().getTime()\r\n            });\r\n          } catch (e) {\r\n            uni.__f__('error','at pages/publish/editor.uvue:391','自动保存草稿失败', e);\r\n          }\r\n        }\r\n      },\r\n      \r\n      /**\r\n       * @description 检查自动保存的草稿\r\n       */\r\n      checkAutoSaveDraft() {\r\n        try {\r\n          const autoDraft = uni.getStorageSync('post_draft_auto');\r\n          if (autoDraft && autoDraft.updateTime) {\r\n            const timeAgo = Math.floor((new Date().getTime() - autoDraft.updateTime) / 60000); // 分钟\r\n            \r\n            if (timeAgo < 60) { // 1小时内的草稿\r\n              uni.showModal({\r\n                title: '发现未发布的内容',\r\n                content: `您有${timeAgo}分钟前编辑的内容未发布，是否继续编辑？`,\r\n                success: (res) => {\r\n                  if (res.confirm) {\r\n                    this.postContent = autoDraft.content || '';\r\n                    this.selectedCategory = autoDraft.category || '专业课';\r\n                    this.selectedTags = autoDraft.tags || [];\r\n                    this.images = autoDraft.images || [];\r\n                  } else {\r\n                    // 清除草稿\r\n                    uni.removeStorageSync('post_draft_auto');\r\n                  }\r\n                }\r\n              });\r\n            } else {\r\n              // 草稿太旧，自动清除\r\n              uni.removeStorageSync('post_draft_auto');\r\n            }\r\n          }\r\n        } catch (e) {\r\n          uni.__f__('error','at pages/publish/editor.uvue:427','检查自动草稿失败', e);\r\n        }\r\n      },\r\n      \r\n      /**\r\n       * @description 加载草稿内容\r\n       * @param {String} draftId - 草稿ID\r\n       */\r\n      loadDraft(draftId) {\r\n        // 模拟加载草稿\r\n        setTimeout(() => {\r\n          const mockDraft = {\r\n            title: '考研复习经验分享',\r\n            content: '分享一下我的考研经验，希望对大家有所帮助...',\r\n            category: '专业课',\r\n            tags: ['复习方法', '时间规划'],\r\n            images: []\r\n          };\r\n          \r\n          this.postTitle = mockDraft.title;\r\n          this.postContent = mockDraft.content;\r\n          this.selectedCategory = mockDraft.category;\r\n          this.selectedTags = mockDraft.tags;\r\n          this.images = mockDraft.images;\r\n          this.isDraft = true;\r\n        }, 500);\r\n        \r\n        // 实际API调用(暂时注释)\r\n        /*\r\n        uni.request({\r\n          url: `YOUR_API_URL/post/draft/${draftId}`,\r\n          method: 'GET',\r\n          success: (res) => {\r\n            if (res.statusCode === 200 && res.data) {\r\n              const draft = res.data;\r\n              this.postTitle = draft.title || '';\r\n              this.postContent = draft.content || '';\r\n              this.selectedCategory = draft.category || '专业课';\r\n              this.selectedTags = draft.tags || [];\r\n              this.images = draft.images || [];\r\n              this.isDraft = true;\r\n            }\r\n          },\r\n          fail: (err) => {\r\n            uni.__f__('error','at pages/publish/editor.uvue:471','加载草稿失败:', err);\r\n            uni.showToast({\r\n              title: '草稿加载失败',\r\n              icon: 'none'\r\n            });\r\n          }\r\n        });\r\n        */\r\n      },\r\n      \r\n      /**\r\n       * @description 发布帖子\r\n       */\r\n      publishPost() {\r\n        // 内容检查\r\n        if (!this.postContent) {\r\n          uni.showToast({\r\n            title: '请输入内容',\r\n            icon: 'none'\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 模拟内容检测和发布过程\r\n        uni.showLoading({\r\n          title: '发布中...'\r\n        });\r\n        \r\n        setTimeout(() => {\r\n          uni.hideLoading();\r\n          uni.showToast({\r\n            title: '发布成功',\r\n            icon: 'success'\r\n          });\r\n          \r\n          // 清除自动保存的草稿\r\n          uni.removeStorageSync('post_draft_auto');\r\n          \r\n          // 延迟返回\r\n          setTimeout(() => {\r\n            uni.navigateBack({\r\n              delta: 1,\r\n              fail: () => {\r\n                // 如果返回失败，尝试使用reLaunch\r\n                uni.reLaunch({\r\n                  url: '/pages/publish/publish'\r\n                });\r\n              }\r\n            });\r\n          }, 1000);\r\n        }, 1500);\r\n        \r\n        // 注释掉原来的实现\r\n        /*\r\n        // 内容检测\r\n        this.checkContent(() => {\r\n          // 显示加载中\r\n          uni.showLoading({\r\n            title: '发布中...'\r\n          });\r\n          \r\n          // 先上传图片\r\n          this.uploadImages((imageUrls) => {\r\n            // 构建发布数据\r\n            const postData = {\r\n              title: this.postTitle || this.selectedCategory, // 如果没有标题，使用分类作为标题\r\n              content: this.postContent,\r\n              category: this.selectedCategory,\r\n              tags: this.selectedTags,\r\n              images: imageUrls,\r\n              draftId: this.draftId // 如果是草稿，提供草稿ID以便发布后删除\r\n            };\r\n            \r\n            // 调用接口发布帖子\r\n            uni.request({\r\n              url: 'YOUR_API_URL/post/publish',\r\n              method: 'POST',\r\n              data: postData,\r\n              success: (res) => {\r\n                uni.hideLoading();\r\n                \r\n                if (res.statusCode === 200) {\r\n                  uni.showToast({\r\n                    title: '发布成功',\r\n                    icon: 'success'\r\n                  });\r\n                  \r\n                  // 清除自动保存的草稿\r\n                  uni.removeStorageSync('post_draft_auto');\r\n                  \r\n                  // 延迟返回\r\n                  setTimeout(() => {\r\n                    uni.navigateBack();\r\n                  }, 1000);\r\n                } else {\r\n                  uni.showToast({\r\n                    title: res.data.message || '发布失败',\r\n                    icon: 'none'\r\n                  });\r\n                }\r\n              },\r\n              fail: () => {\r\n                uni.hideLoading();\r\n                uni.showToast({\r\n                  title: '网络异常',\r\n                  icon: 'none'\r\n                });\r\n              }\r\n            });\r\n          });\r\n        });\r\n        */\r\n      },\r\n      \r\n      /**\r\n       * @description 检查内容是否合规(无二维码、手机号、微信号)\r\n       * @param {Function} callback - 检查通过后的回调\r\n       */\r\n      checkContent(callback) {\r\n        // 正则表达式检查手机号和微信号\r\n        const phoneRegex = /1[3-9]\\d{9}/g;\r\n        const wechatRegex = /(微信|wx|weixin)[: ]*([a-zA-Z0-9_-]{6,20})/gi;\r\n        \r\n        if (phoneRegex.test(this.postContent) || wechatRegex.test(this.postContent)) {\r\n          uni.showToast({\r\n            title: '内容含有联系方式，请修改后重试',\r\n            icon: 'none'\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 调用后端API进行更复杂的内容检查\r\n        uni.request({\r\n          url: 'YOUR_API_URL/content/check',\r\n          method: 'POST',\r\n          data: {\r\n            content: this.postContent\r\n          },\r\n          success: (res) => {\r\n            if (res.statusCode === 200 && res.data.valid) {\r\n              callback && callback();\r\n            } else {\r\n              uni.showToast({\r\n                title: res.data.message || '内容不合规，请修改后重试',\r\n                icon: 'none'\r\n              });\r\n            }\r\n          },\r\n          fail: () => {\r\n            uni.showToast({\r\n              title: '网络异常，请稍后再试',\r\n              icon: 'none'\r\n            });\r\n          }\r\n        });\r\n      },\r\n      \r\n      /**\r\n       * @description 上传图片\r\n       * @param {Function} callback - 上传完成后的回调，参数为图片URL数组\r\n       */\r\n      uploadImages(callback) {\r\n        if (this.images.length === 0) {\r\n          callback && callback([]);\r\n          return;\r\n        }\r\n        \r\n        const uploadedUrls = [];\r\n        let uploadCount = 0;\r\n        \r\n        // 显示上传进度\r\n        uni.showLoading({\r\n          title: `上传图片 0/${this.images.length}`\r\n        });\r\n        \r\n        // 逐个上传图片\r\n        this.images.forEach((path) => {\r\n          uni.uploadFile({\r\n            url: 'YOUR_API_URL/upload/image',\r\n            filePath: path,\r\n            name: 'file',\r\n            success: (res) => {\r\n              uploadCount++;\r\n              \r\n              // 更新进度\r\n              uni.showLoading({\r\n                title: `上传图片 ${uploadCount}/${this.images.length}`\r\n              });\r\n              \r\n              // 解析响应\r\n              if (res.statusCode === 200) {\r\n                try {\r\n                  const data = JSON.parse(res.data);\r\n                  if (data.url) {\r\n                    uploadedUrls.push(data.url);\r\n                  }\r\n                } catch (e) {\r\n                  uni.__f__('error','at pages/publish/editor.uvue:668','解析上传响应失败', e);\r\n                }\r\n              }\r\n              \r\n              // 所有图片上传完成\r\n              if (uploadCount === this.images.length) {\r\n                uni.hideLoading();\r\n                callback && callback(uploadedUrls);\r\n              }\r\n            },\r\n            fail: () => {\r\n              uploadCount++;\r\n              \r\n              // 更新进度\r\n              uni.showLoading({\r\n                title: `上传图片 ${uploadCount}/${this.images.length}`\r\n              });\r\n              \r\n              // 所有图片上传完成\r\n              if (uploadCount === this.images.length) {\r\n                uni.hideLoading();\r\n                callback && callback(uploadedUrls);\r\n              }\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n    background-color: #ffffff;\r\n  }\r\n  \r\n  .header {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    padding: 10px 15px;\r\n    border-bottom: 1px solid #eeeeee;\r\n  }\r\n  \r\n  .back-button {\r\n    padding: 5px 10px;\r\n    font-size: 20px;\r\n  }\r\n  \r\n  .header-title {\r\n    flex: 1;\r\n    text-align: center;\r\n    font-size: 16px;\r\n    color: #666;\r\n  }\r\n  \r\n  .form-content {\r\n    padding: 15px;\r\n    flex: 1;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .input-section {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  .tag-row {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  .tag-selection {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 5px 15px;\r\n    margin-right: 10px;\r\n    margin-bottom: 10px;\r\n    border: 1px solid #eeeeee;\r\n    border-radius: 20px;\r\n    font-size: 14px;\r\n    background-color: #f8f8f8;\r\n  }\r\n  \r\n  .tag-text {\r\n    margin-right: 5px;\r\n    color: #333;\r\n  }\r\n  \r\n  .tag-arrow {\r\n    width: 14px;\r\n    height: 14px;\r\n  }\r\n  \r\n  .tag-item {\r\n    padding: 5px 15px;\r\n    margin-right: 10px;\r\n    margin-bottom: 10px;\r\n    border: 1px solid #eeeeee;\r\n    border-radius: 20px;\r\n    font-size: 14px;\r\n    background-color: #f0f0f0;\r\n  }\r\n  \r\n  .tag-remove {\r\n    margin-left: 5px;\r\n    color: #999;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .add-tag {\r\n    padding: 5px 15px;\r\n    margin-right: 10px;\r\n    margin-bottom: 10px;\r\n    border: 1px solid #eeeeee;\r\n    border-radius: 20px;\r\n    font-size: 14px;\r\n    background-color: #f0f0f0;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .content-input {\r\n    width: 100%;\r\n    min-height: 200px;\r\n    padding: 10px;\r\n    font-size: 15px;\r\n    line-height: 1.5;\r\n    border: 1px solid #eeeeee;\r\n    border-radius: 8px;\r\n    margin-bottom: 15px;\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  .word-count {\r\n    text-align: right;\r\n    font-size: 12px;\r\n    color: #999;\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  .upload-section {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .image-upload-btn {\r\n    width: 100px;\r\n    height: 100px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: 1px dashed #cccccc;\r\n    border-radius: 8px;\r\n    margin-right: 10px;\r\n    margin-bottom: 10px;\r\n    background-color: #f9f9f9;\r\n  }\r\n  \r\n  .upload-icon {\r\n    font-size: 30px;\r\n    color: #999999;\r\n  }\r\n  \r\n  .upload-text {\r\n    margin-top: 5px;\r\n    color: #999;\r\n  }\r\n  \r\n  .uploaded-images {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n  \r\n  .image-item {\r\n    position: relative;\r\n    width: 100px;\r\n    height: 100px;\r\n    margin-right: 10px;\r\n    margin-bottom: 10px;\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .preview-image {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n  }\r\n  \r\n  .delete-btn {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    width: 22px;\r\n    height: 22px;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    color: #ffffff;\r\n    font-size: 16px;\r\n    text-align: center;\r\n    line-height: 22px;\r\n    border-radius: 0 0 0 8px;\r\n  }\r\n  \r\n  .bottom-actions {\r\n    display: flex;\r\n    padding: 15px;\r\n    border-top: 1px solid #eeeeee;\r\n    background-color: #ffffff;\r\n  }\r\n  \r\n  .action-btn {\r\n    flex: 1;\r\n    height: 40px;\r\n    line-height: 40px;\r\n    text-align: center;\r\n    border-radius: 20px;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .save-btn {\r\n    background-color: #f5f5f5;\r\n    color: #333333;\r\n    margin-right: 15px;\r\n  }\r\n  \r\n  .publish-btn {\r\n    background-color: #007aff;\r\n    color: #ffffff;\r\n  }\r\n</style>","import MiniProgramPage from 'E:/yanshilu小程序前端/前端yanshilu/pages/publish/editor.uvue'\nwx.createPage(MiniProgramPage)"],"names":["defineComponent","uni"],"mappings":"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"}