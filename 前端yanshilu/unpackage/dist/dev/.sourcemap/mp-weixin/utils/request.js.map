{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\r\n * HTTP请求拦截器 - 集成JWT认证\r\n * @module utils/request\r\n */\r\n\r\nimport { getToken, checkAndRefreshToken, clearTokens } from './jwt.js';\r\nimport { Navigator, CommonRoutes } from './routes.js';\r\nimport { BASE_URL } from '../config.js';\r\n\r\n// 请求基础URL\r\nconst baseURL = BASE_URL || '';\r\n\r\n/**\r\n * 统一请求方法\r\n * @param {Object} options - 请求选项\r\n * @param {string} options.url - 请求地址\r\n * @param {string} [options.method='GET'] - 请求方法\r\n * @param {Object} [options.data] - 请求数据\r\n * @param {Object} [options.header] - 请求头\r\n * @param {boolean} [options.auth=true] - 是否需要认证\r\n * @param {boolean} [options.loading=true] - 是否显示加载提示\r\n * @returns {Promise<any>} 请求响应\r\n */\r\nconst request = (options = {}) => {\r\n  const {\r\n    url,\r\n    method = 'GET',\r\n    data = {},\r\n    header = {},\r\n    auth = true,\r\n    loading = true\r\n  } = options;\r\n\r\n  // 显示加载提示\r\n  if (loading) {\r\n    uni.showLoading({\r\n      title: '加载中...',\r\n      mask: true\r\n    });\r\n  }\r\n\r\n  // 构建请求URL\r\n  const requestUrl = url.startsWith('http') ? url : baseURL + url;\r\n\r\n  // 构建请求头\r\n  const requestHeader = {\r\n    'Content-Type': 'application/json',\r\n    ...header\r\n  };\r\n\r\n  // 添加认证头\r\n  if (auth) {\r\n    const token = getToken();\r\n    if (token) {\r\n      requestHeader.Authorization = `Bearer ${token}`;\r\n    }\r\n  }\r\n\r\n  // 发起请求\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: requestUrl,\r\n      method,\r\n      data,\r\n      header: requestHeader,\r\n      success: async (res) => {\r\n        // 处理响应\r\n        const { statusCode, data } = res;\r\n\r\n        // 隐藏加载提示\r\n        if (loading) {\r\n          uni.hideLoading();\r\n        }\r\n\r\n        // 处理 HTTP 状态码\r\n        if (statusCode >= 200 && statusCode < 300) {\r\n          resolve(data);\r\n        } else if (statusCode === 401) {\r\n          // 尝试刷新 token\r\n          try {\r\n            const newToken = await checkAndRefreshToken();\r\n            if (newToken) {\r\n              // 使用新 token 重试请求\r\n              const retryOptions = {\r\n                ...options,\r\n                loading: false  // 避免重复显示加载\r\n              };\r\n              const result = await request(retryOptions);\r\n              resolve(result);\r\n            } else {\r\n              // 跳转到登录页\r\n              handleAuthError();\r\n              reject(new Error('未授权，请重新登录'));\r\n            }\r\n          } catch (error) {\r\n            handleAuthError();\r\n            reject(error);\r\n          }\r\n        } else {\r\n          // 其他错误状态码\r\n          const errorMsg = data?.message || `请求失败(${statusCode})`;\r\n          showError(errorMsg);\r\n          reject(new Error(errorMsg));\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        // 隐藏加载提示\r\n        if (loading) {\r\n          uni.hideLoading();\r\n        }\r\n        \r\n        // 处理请求失败\r\n        const errorMsg = '网络请求失败，请检查网络连接';\r\n        showError(errorMsg);\r\n        reject(new Error(errorMsg));\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 处理认证错误\r\n */\r\nfunction handleAuthError() {\r\n  clearTokens();\r\n  \r\n  // 显示提示\r\n  uni.showToast({\r\n    title: '登录已过期，请重新登录',\r\n    icon: 'none',\r\n    duration: 2000\r\n  });\r\n  \r\n  // 延迟跳转到登录页面\r\n  setTimeout(() => {\r\n    Navigator.reLaunch(CommonRoutes.LOGIN);\r\n  }, 1500);\r\n}\r\n\r\n/**\r\n * 显示错误提示\r\n * @param {string} message - 错误消息\r\n */\r\nfunction showError(message) {\r\n  uni.showToast({\r\n    title: message,\r\n    icon: 'none',\r\n    duration: 2000\r\n  });\r\n}\r\n\r\n/**\r\n * GET请求\r\n * @param {string} url - 请求地址\r\n * @param {Object} [data] - 请求参数\r\n * @param {Object} [options] - 其他选项\r\n * @returns {Promise<any>} 请求响应\r\n */\r\nexport function get(url, data = {}, options = {}) {\r\n  return request({\r\n    url,\r\n    method: 'GET',\r\n    data,\r\n    ...options\r\n  });\r\n}\r\n\r\n/**\r\n * POST请求\r\n * @param {string} url - 请求地址\r\n * @param {Object} [data] - 请求数据\r\n * @param {Object} [options] - 其他选项\r\n * @returns {Promise<any>} 请求响应\r\n */\r\nexport function post(url, data = {}, options = {}) {\r\n  return request({\r\n    url,\r\n    method: 'POST',\r\n    data,\r\n    ...options\r\n  });\r\n}\r\n\r\n/**\r\n * PUT请求\r\n * @param {string} url - 请求地址\r\n * @param {Object} [data] - 请求数据\r\n * @param {Object} [options] - 其他选项\r\n * @returns {Promise<any>} 请求响应\r\n */\r\nexport function put(url, data = {}, options = {}) {\r\n  return request({\r\n    url,\r\n    method: 'PUT',\r\n    data,\r\n    ...options\r\n  });\r\n}\r\n\r\n/**\r\n * DELETE请求\r\n * @param {string} url - 请求地址\r\n * @param {Object} [data] - 请求参数\r\n * @param {Object} [options] - 其他选项\r\n * @returns {Promise<any>} 请求响应\r\n */\r\nexport function del(url, data = {}, options = {}) {\r\n  return request({\r\n    url,\r\n    method: 'DELETE',\r\n    data,\r\n    ...options\r\n  });\r\n}\r\n\r\nexport default {\r\n  request,\r\n  get,\r\n  post,\r\n  put,\r\n  del\r\n}; "],"names":["baseURL","BASE_URL","request","options","url","method","data","header","auth","loading","uni","showLoading","title","mask","requestUrl","startsWith","requestHeader","token","getToken","Authorization","Promise","resolve","reject","success","async","res","statusCode","index","hideLoading","checkAndRefreshToken","retryOptions","result","Error","error","errorMsg","message","showError","fail","err","handleAuthError","clearTokens","showToast","icon","duration","setTimeout","Navigator","reLaunch","CommonRoutes","LOGIN"],"mappings":"mGAUMA,0BAAkBC,SAalBC,EAAU,CAACC,EAAU,MACnB,MAAAC,IACJA,EAAAC,OACAA,EAAS,MAAAC,KACTA,EAAO,CAAE,EAAAC,OACTA,EAAS,CAAE,EAAAC,KACXA,GAAO,EAAAC,QACPA,GAAU,GACRN,EAGAM,GACFC,EAAAA,MAAIC,YAAY,CACdC,MAAO,SACPC,MAAM,IAKV,MAAMC,EAAaV,EAAIW,WAAW,QAAUX,EAAMJ,EAAUI,EAGtDY,EAAgB,CACpB,eAAgB,sBACbT,GAIL,GAAIC,EAAM,CACF,MAAAS,EAAQC,EAAAA,WACVD,IACYD,EAAAG,cAAgB,UAAUF,IAE3C,CAGD,OAAO,IAAIG,SAAQ,CAACC,EAASC,KAC3BZ,EAAAA,MAAIR,QAAQ,CACVE,IAAKU,EACLT,SACAC,OACAC,OAAQS,EACRO,QAASC,MAAOC,IAEd,MAAMC,WAAEA,EAAYpB,KAAAA,GAASmB,EAQzB,GALAhB,GACFC,EAAGiB,MAACC,cAIFF,GAAc,KAAOA,EAAa,IACpCL,EAAQf,QAClB,GAAkC,MAAfoB,EAEL,IAEF,SADuBG,EAAAA,uBACT,CAEZ,MAAMC,EAAe,IAChB3B,EACHM,SAAS,GAELsB,QAAe7B,EAAQ4B,GAC7BT,EAAQU,EACtB,UAGqBT,EAAA,IAAIU,MAAM,aAKpB,OAHQC,OAEPX,EAAOW,EACR,KACI,CAEL,MAAMC,GAAW,MAAA5B,OAAA,EAAAA,EAAM6B,UAAW,QAAQT,KAC1CU,EAAUF,GACHZ,EAAA,IAAIU,MAAME,GAClB,GAEHG,KAAOC,IAED7B,GACFC,EAAGiB,MAACC,cAIN,MAAMM,EAAW,iBACjBE,EAAUF,GACHZ,EAAA,IAAIU,MAAME,GAAS,GAE7B,GACF,EAMH,SAASK,IACPC,EAAAA,cAGA9B,EAAAA,MAAI+B,UAAU,CACZ7B,MAAO,cACP8B,KAAM,OACNC,SAAU,MAIZC,YAAW,KACTC,EAAAA,UAAUC,SAASC,eAAaC,MAAK,GACpC,KACL,CAMA,SAASZ,EAAUD,GACjBzB,EAAAA,MAAI+B,UAAU,CACZ7B,MAAOuB,EACPO,KAAM,OACNC,SAAU,KAEd,cAyBO,SAAcvC,EAAKE,EAAO,CAAA,EAAIH,EAAU,CAAA,GAC7C,OAAOD,EAAQ,CACbE,MACAC,OAAQ,OACRC,UACGH,GAEP"}