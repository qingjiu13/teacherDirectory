{"version":3,"file":"auth.js","sources":["utils/auth.js"],"sourcesContent":["/**\r\n * 用户认证状态管理工具\r\n * @module utils/auth\r\n */\r\nimport { getToken, hasToken, checkAndRefreshToken, clearTokens, parseToken } from './jwt.js';\r\nimport { Navigator, CommonRoutes } from './routes.js';\r\nimport { get } from './request.js';\r\n\r\n// 用户状态存储键\r\nconst USER_INFO_KEY = 'userInfo';\r\nconst LOGIN_STATUS_KEY = 'loginStatus';\r\n\r\n/**\r\n * 用户登录状态枚举\r\n * @enum {number}\r\n */\r\nexport const LoginStatus = {\r\n  NOT_LOGGED_IN: 0, // 未登录\r\n  LOGGED_IN: 1,     // 已登录\r\n  TOKEN_EXPIRED: 2, // 令牌过期\r\n  REFRESHING: 3     // 正在刷新\r\n};\r\n\r\n/**\r\n * 存储用户信息\r\n * @param {Object} userInfo - 用户信息对象\r\n */\r\nexport function setUserInfo(userInfo) {\r\n  try {\r\n    uni.setStorageSync(USER_INFO_KEY, JSON.stringify(userInfo));\r\n    setLoginStatus(LoginStatus.LOGGED_IN);\r\n  } catch (e) {\r\n    console.error('存储用户信息失败:', e);\r\n  }\r\n}\r\n\r\n/**\r\n * 获取用户信息\r\n * @returns {Object|null} 用户信息对象，如果不存在则返回null\r\n */\r\nexport function getUserInfo() {\r\n  try {\r\n    const userInfo = uni.getStorageSync(USER_INFO_KEY);\r\n    return userInfo ? JSON.parse(userInfo) : null;\r\n  } catch (e) {\r\n    console.error('获取用户信息失败:', e);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 设置登录状态\r\n * @param {LoginStatus} status - 登录状态\r\n */\r\nexport function setLoginStatus(status) {\r\n  try {\r\n    uni.setStorageSync(LOGIN_STATUS_KEY, status);\r\n  } catch (e) {\r\n    console.error('设置登录状态失败:', e);\r\n  }\r\n}\r\n\r\n/**\r\n * 获取当前登录状态\r\n * @returns {LoginStatus} 当前登录状态\r\n */\r\nexport function getLoginStatus() {\r\n  try {\r\n    const status = uni.getStorageSync(LOGIN_STATUS_KEY);\r\n    return status !== '' ? status : LoginStatus.NOT_LOGGED_IN;\r\n  } catch (e) {\r\n    console.error('获取登录状态失败:', e);\r\n    return LoginStatus.NOT_LOGGED_IN;\r\n  }\r\n}\r\n\r\n/**\r\n * 清除用户信息和登录状态\r\n */\r\nexport function clearUserInfo() {\r\n  try {\r\n    uni.removeStorageSync(USER_INFO_KEY);\r\n    setLoginStatus(LoginStatus.NOT_LOGGED_IN);\r\n  } catch (e) {\r\n    console.error('清除用户信息失败:', e);\r\n  }\r\n}\r\n\r\n/**\r\n * 登出用户\r\n * @param {boolean} [redirect=true] - 是否重定向到登录页面\r\n */\r\nexport function logout(redirect = true) {\r\n  clearTokens();\r\n  clearUserInfo();\r\n  \r\n  // 提示用户已登出\r\n  uni.showToast({\r\n    title: '已退出登录',\r\n    icon: 'none',\r\n    duration: 2000\r\n  });\r\n  \r\n  // 重定向到登录页面\r\n  if (redirect) {\r\n    setTimeout(() => {\r\n      Navigator.reLaunch(CommonRoutes.LOGIN);\r\n    }, 1500);\r\n  }\r\n}\r\n\r\n/**\r\n * 检查用户是否已登录\r\n * @returns {boolean} 是否已登录\r\n */\r\nexport function isLoggedIn() {\r\n  return hasToken() && getLoginStatus() === LoginStatus.LOGGED_IN;\r\n}\r\n\r\n/**\r\n * 检查登录状态并处理\r\n * @param {boolean} [redirect=true] - 若未登录是否重定向到登录页面\r\n * @returns {Promise<boolean>} 登录状态的Promise\r\n */\r\nexport async function checkLoginStatus(redirect = true) {\r\n  // 检查令牌是否存在\r\n  if (!hasToken()) {\r\n    if (redirect) {\r\n      Navigator.redirectTo(CommonRoutes.LOGIN);\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    // 检查并刷新令牌\r\n    const token = await checkAndRefreshToken();\r\n    if (!token) {\r\n      if (redirect) {\r\n        Navigator.redirectTo(CommonRoutes.LOGIN);\r\n      }\r\n      return false;\r\n    }\r\n    \r\n    // 如果状态显示未登录但有有效令牌，更新状态\r\n    if (getLoginStatus() !== LoginStatus.LOGGED_IN) {\r\n      setLoginStatus(LoginStatus.LOGGED_IN);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('检查登录状态失败:', error);\r\n    if (redirect) {\r\n      Navigator.redirectTo(CommonRoutes.LOGIN);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * 从令牌中获取用户ID\r\n * @returns {string|null} 用户ID\r\n */\r\nexport function getUserIdFromToken() {\r\n  const token = getToken();\r\n  if (!token) return null;\r\n  \r\n  const payload = parseToken(token);\r\n  return payload?.userId || null;\r\n}\r\n\r\n/**\r\n * 刷新用户信息\r\n * @returns {Promise<Object|null>} 用户信息的Promise\r\n */\r\nexport async function refreshUserInfo() {\r\n  try {\r\n    // 确保用户已登录\r\n    if (!await checkLoginStatus(false)) {\r\n      return null;\r\n    }\r\n    \r\n    // 调用获取用户信息的API\r\n    const result = await get('/api/user/info');\r\n    if (result && result.code === 200) {\r\n      setUserInfo(result.data);\r\n      return result.data;\r\n    }\r\n    \r\n    return null;\r\n  } catch (error) {\r\n    console.error('刷新用户信息失败:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 设置登录状态监听器\r\n * @param {Function} callback - 状态变化时的回调函数\r\n */\r\nexport function setupLoginStatusListener(callback) {\r\n  // 定期检查登录状态\r\n  const timer = setInterval(async () => {\r\n    const wasLoggedIn = isLoggedIn();\r\n    const isLoggedInNow = await checkLoginStatus(false);\r\n    \r\n    // 如果状态发生变化，调用回调\r\n    if (wasLoggedIn !== isLoggedInNow) {\r\n      callback(isLoggedInNow);\r\n    }\r\n  }, 60000); // 每分钟检查一次\r\n  \r\n  // 返回清理函数\r\n  return () => clearInterval(timer);\r\n}\r\n\r\nexport default {\r\n  LoginStatus,\r\n  setUserInfo,\r\n  getUserInfo,\r\n  clearUserInfo,\r\n  isLoggedIn,\r\n  logout,\r\n  checkLoginStatus,\r\n  getUserIdFromToken,\r\n  refreshUserInfo,\r\n  setupLoginStatusListener\r\n}; "],"names":["LoginStatus","hasToken","status","uni","getStorageSync","e","index","__f__","getLoginStatus"],"mappings":"0EAgBaA,EACI,EADJA,EAEA,qBAiGN,WACL,OAAOC,EAAQA,YAlDV,WACD,IACF,MAAMC,EAASC,EAAAA,MAAIC,eA1DE,eA2Dd,MAAW,KAAXF,EAAgBA,EAASF,CAIjC,OAHQK,GAEP,OADAF,EAAAG,MAAAC,MAAA,QAAA,sBAAc,YAAaF,GACpBL,CACR,CACH,CA0CuBQ,KAAqBR,CAC5C"}