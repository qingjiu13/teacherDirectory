{"version":3,"file":"checkload.js","sources":["utils/checkload.js"],"sourcesContent":["/**\r\n * @description 登录状态检查工具\r\n * 提供检查用户是否登录及相关跳转功能\r\n */\r\n\r\nimport { Navigator, CommonRoutes } from './routes.js';\r\n\r\n/**\r\n * @description 获取用户信息\r\n * @returns {Object|null} 用户信息对象，未登录则返回null\r\n */\r\nexport const getUserInfo = () => {\r\n  // 返回模拟的用户信息以便调试\r\n  return {\r\n    id: 1,\r\n    name: '测试用户',\r\n    email: 'test@example.com'\r\n  };\r\n  try {\r\n    // 从本地存储获取用户信息\r\n    const userInfoStr = uni.getStorageSync('userInfo');\r\n    if (userInfoStr) {\r\n      return JSON.parse(userInfoStr);\r\n    }\r\n    return null;\r\n  } catch (e) {\r\n    console.error('获取用户信息失败:', e);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * @description 获取当前登录状态\r\n * @returns {boolean} 是否已登录\r\n */\r\nexport const isLoggedIn = () => {\r\n  // 返回已登录状态以便调试\r\n  return true;\r\n  // 检查token是否存在且有效\r\n  const token = uni.getStorageSync('token');\r\n  // 检查用户信息是否存在\r\n  const userInfo = getUserInfo();\r\n  \r\n  return !!token && !!userInfo;\r\n};\r\n\r\n/**\r\n * @description 跳转到登录页面\r\n * @param {string} redirect 登录成功后重定向的页面路径\r\n */\r\nexport const goToLogin = (redirect) => {\r\n  const currentPage = getCurrentPages()[getCurrentPages().length - 1];\r\n  const redirectUrl = redirect || currentPage.route;\r\n  \r\n  Navigator.toLogin(redirectUrl);\r\n};\r\n\r\n/**\r\n * @description 检查登录状态，未登录则跳转到登录页面\r\n * @param {Object} options 配置选项\r\n * @param {boolean} options.showToast 是否显示提示，默认为true\r\n * @param {string} options.redirect 登录成功后的重定向页面\r\n * @returns {boolean} 是否已登录\r\n */\r\nexport const checkLogin = (options = {}) => {\r\n  const { showToast = true, redirect = null } = options;\r\n  \r\n  if (!isLoggedIn()) {\r\n    if (showToast) {\r\n      uni.showToast({\r\n        title: '请先登录',\r\n        icon: 'none'\r\n      });\r\n    }\r\n    \r\n    // 延迟跳转，让提示显示完\r\n    setTimeout(() => {\r\n      goToLogin(redirect);\r\n    }, 1500);\r\n    \r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n};\r\n\r\n/**\r\n * @description 更新登录状态信息\r\n * @param {Object} userInfo 用户信息\r\n * @param {string} token 登录令牌\r\n */\r\nexport const updateLoginStatus = (userInfo, token) => {\r\n  // 保存用户信息到本地存储\r\n  uni.setStorageSync('userInfo', JSON.stringify(userInfo));\r\n  \r\n  // 保存token到本地存储\r\n  if (token) {\r\n    uni.setStorageSync('token', token);\r\n  }\r\n  \r\n  // 这里还可以添加其他登录状态更新逻辑\r\n};\r\n\r\n/**\r\n * @description 退出登录\r\n * @param {Object} options 配置选项\r\n * @param {boolean} options.redirect 是否重定向到登录页，默认为false\r\n */\r\nexport const logout = (options = {}) => {\r\n  const { redirect = false } = options;\r\n  \r\n  // 清除本地存储的登录信息\r\n  uni.removeStorageSync('token');\r\n  uni.removeStorageSync('userInfo');\r\n  \r\n  // 显示提示\r\n  uni.showToast({\r\n    title: '已退出登录',\r\n    icon: 'success'\r\n  });\r\n  \r\n  // 是否重定向到登录页\r\n  if (redirect) {\r\n    setTimeout(() => {\r\n      Navigator.toLogin();\r\n    }, 1500);\r\n  }\r\n};\r\n\r\nexport default {\r\n  getUserInfo,\r\n  isLoggedIn,\r\n  checkLogin,\r\n  goToLogin,\r\n  updateLoginStatus,\r\n  logout\r\n}; "],"names":["isLoggedIn","options","showToast","redirect","id","name","email","removeStorageSync","uni","title","icon","setTimeout","Navigator","toLogin","userInfo","token","index","setStorageSync","JSON","stringify"],"mappings":"6EAmCaA,EAAa,KAEjB,qBA2BiB,CAACC,EAAU,MACnC,MAAMC,UAAEA,GAAY,EAAMC,SAAAA,EAAW,MAASF,EAkBvC,OAAA,CAAA,sBAxEkB,KAElB,CACLG,GAAI,EACJC,KAAM,OACNC,MAAO,yDA4FW,CAACL,EAAU,MACzB,MAAAE,SAAEA,GAAW,GAAUF,UAGzBM,kBAAkB,iBAClBA,kBAAkB,YAGtBC,EAAAA,MAAIN,UAAU,CACZO,MAAO,QACPC,KAAM,YAIJP,GACFQ,YAAW,KACTC,EAASA,UAACC,SAAO,GAChB,KACJ,4BAnC8B,CAACC,EAAUC,KAE1CP,EAAGQ,MAACC,eAAe,WAAYC,KAAKC,UAAUL,IAG1CC,GACFP,EAAAA,MAAIS,eAAe,QAASF,EAC7B"}