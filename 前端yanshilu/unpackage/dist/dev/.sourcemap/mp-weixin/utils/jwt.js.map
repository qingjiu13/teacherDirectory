{"version":3,"file":"jwt.js","sources":["utils/jwt.js"],"sourcesContent":["/**\r\n * JWT工具类 - 处理JSON Web Token的存储、获取、刷新等操作\r\n * @module utils/jwt\r\n */\r\n\r\n/**\r\n * 存储JWT令牌到本地\r\n * @param {string} token - JWT令牌\r\n * @param {string} [refreshToken] - 刷新令牌（可选）\r\n */\r\nexport function setToken(token, refreshToken) {\r\n  try {\r\n    uni.setStorageSync('jwtToken', token);\r\n    if (refreshToken) {\r\n      uni.setStorageSync('refreshToken', refreshToken);\r\n    }\r\n  } catch (e) {\r\n    console.error('存储JWT令牌失败:', e);\r\n  }\r\n}\r\n\r\n/**\r\n * 获取JWT令牌\r\n * @returns {string|null} JWT令牌，如果不存在则返回null\r\n */\r\nexport function getToken() {\r\n  try {\r\n    return uni.getStorageSync('jwtToken');\r\n  } catch (e) {\r\n    console.error('获取JWT令牌失败:', e);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 获取刷新令牌\r\n * @returns {string|null} 刷新令牌，如果不存在则返回null\r\n */\r\nexport function getRefreshToken() {\r\n  try {\r\n    return uni.getStorageSync('refreshToken');\r\n  } catch (e) {\r\n    console.error('获取刷新令牌失败:', e);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 清除所有令牌\r\n */\r\nexport function clearTokens() {\r\n  try {\r\n    uni.removeStorageSync('jwtToken');\r\n    uni.removeStorageSync('refreshToken');\r\n  } catch (e) {\r\n    console.error('清除令牌失败:', e);\r\n  }\r\n}\r\n\r\n/**\r\n * 检查JWT令牌是否存在\r\n * @returns {boolean} 是否存在令牌\r\n */\r\nexport function hasToken() {\r\n  return !!getToken();\r\n}\r\n\r\n/**\r\n * 解析JWT令牌（不验证签名）\r\n * @param {string} token - JWT令牌\r\n * @returns {Object|null} 解析后的载荷对象\r\n */\r\nexport function parseToken(token) {\r\n  try {\r\n    if (!token) return null;\r\n    const base64Url = token.split('.')[1];\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64).split('').map(function(c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      }).join('')\r\n    );\r\n    return JSON.parse(jsonPayload);\r\n  } catch (e) {\r\n    console.error('解析JWT令牌失败:', e);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 检查令牌是否过期\r\n * @param {string} token - JWT令牌\r\n * @returns {boolean} 是否已过期\r\n */\r\nexport function isTokenExpired(token) {\r\n  const payload = parseToken(token);\r\n  if (!payload || !payload.exp) return true;\r\n  \r\n  // exp是秒级时间戳，需要转换为毫秒\r\n  const expDate = new Date(payload.exp * 1000);\r\n  return expDate <= new Date();\r\n}\r\n\r\n/**\r\n * 检查令牌状态并处理过期情况\r\n * @returns {Promise<string|null>} 有效的JWT令牌或null\r\n */\r\nexport async function checkAndRefreshToken() {\r\n  const token = getToken();\r\n  if (!token) return null;\r\n  \r\n  if (isTokenExpired(token)) {\r\n    try {\r\n      return await refreshToken();\r\n    } catch (e) {\r\n      console.error('刷新令牌失败:', e);\r\n      clearTokens();\r\n      // 可以在这里触发重新登录\r\n      uni.reLaunch({ url: '/pages/login/login' });\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  return token;\r\n}\r\n\r\n/**\r\n * 刷新JWT令牌\r\n * @returns {Promise<string>} 新的JWT令牌\r\n */\r\nexport async function refreshToken() {\r\n  const refreshToken = getRefreshToken();\r\n  if (!refreshToken) {\r\n    throw new Error('没有可用的刷新令牌');\r\n  }\r\n  \r\n  // 这里替换为您的API请求实现\r\n  try {\r\n    const response = await uni.request({\r\n      url: '/api/auth/refresh',  // 替换为您的刷新API地址\r\n      method: 'POST',\r\n      data: { refreshToken },\r\n      header: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n    const { data } = response;\r\n    if (data.token) {\r\n      setToken(data.token, data.refreshToken || refreshToken);\r\n      return data.token;\r\n    } else {\r\n      throw new Error(data.message || '刷新令牌失败');\r\n    }\r\n  } catch (error) {\r\n    clearTokens();\r\n    throw error;\r\n  }\r\n} "],"names":["setToken","token","refreshToken","uni","setStorageSync","e","index","__f__","getToken","getStorageSync","clearTokens","removeStorageSync","isTokenExpired","payload","base64","split","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","parseToken","exp","Date","async","getRefreshToken","Error","response","request","url","method","data","header","message","error","reLaunch"],"mappings":"oDAUO,SAASA,EAASC,EAAOC,GAC1B,IACFC,EAAAA,MAAIC,eAAe,WAAYH,GAC3BC,GACFC,EAAAA,MAAIC,eAAe,eAAgBF,EAItC,OAFQG,GACPF,EAAAG,MAAAC,MAAA,QAAA,qBAAc,aAAcF,EAC7B,CACH,CAMO,SAASG,IACV,IACKL,OAAAA,EAAGG,MAACG,eAAe,WAI3B,OAHQJ,GAEA,OADPF,EAAAG,MAAAC,MAAA,QAAA,qBAAc,aAAcF,GACrB,IACR,CACH,CAkBO,SAASK,IACV,YACEC,kBAAkB,oBAClBA,kBAAkB,eAGvB,OAFQN,GACPF,2CAAc,UAAWE,EAC1B,CACH,CAqCO,SAASO,EAAeX,GACvB,MAAAY,EAvBD,SAAoBZ,GACrB,IACF,IAAKA,EAAc,OAAA,KACnB,MACMa,EADYb,EAAMc,MAAM,KAAK,GACVC,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KACpDC,EAAcC,mBAClBC,KAAKL,GAAQC,MAAM,IAAIK,KAAI,SAASC,GAC3B,MAAA,KAAO,KAAOA,EAAEC,WAAW,GAAGC,SAAS,KAAKC,OAAQ,EACnE,IAASC,KAAK,KAEH,OAAAC,KAAKC,MAAMV,EAInB,OAHQZ,GAEA,OADPF,EAAAG,MAAAC,MAAA,QAAA,qBAAc,aAAcF,GACrB,IACR,CACH,CAQkBuB,CAAW3B,GACvB,IAACY,IAAYA,EAAQgB,IAAY,OAAA,EAI9B,OADS,IAAIC,KAAmB,IAAdjB,EAAQgB,UACXC,IACxB,8BAMOC,iBACL,MAAM9B,EAAQO,IACd,IAAKP,EAAc,OAAA,KAEf,GAAAW,EAAeX,GACb,IACF,aAiBC8B,iBACL,MAAM7B,EA7FD,WACD,IACKC,OAAAA,EAAGG,MAACG,eAAe,eAI3B,OAHQJ,GAEA,OADPF,EAAAG,MAAAC,MAAA,QAAA,qBAAc,YAAaF,GACpB,IACR,CACH,CAsFuB2B,GACrB,IAAK9B,EACG,MAAA,IAAI+B,MAAM,aAId,IACF,MAAMC,QAAiB/B,EAAGG,MAAC6B,QAAQ,CACjCC,IAAK,oBACLC,OAAQ,OACRC,KAAM,CAAEpC,aAAAA,GACRqC,OAAQ,CAAE,eAAgB,uBAGtBD,KAAEA,GAASJ,EACjB,GAAII,EAAKrC,MAEP,OADAD,EAASsC,EAAKrC,MAAOqC,EAAKpC,cAAgBA,GACnCoC,EAAKrC,MAEZ,MAAM,IAAIgC,MAAMK,EAAKE,SAAW,SAKnC,OAHQC,GAED,UAAAA,CACP,CACH,CA3CmBvC,EAOd,OANQG,GAKA,OAJPF,EAAcG,MAAAC,MAAA,QAAA,sBAAA,UAAWF,OAGzBF,EAAAA,MAAIuC,SAAS,CAAEN,IAAK,uBACb,IACR,CAGI,OAAAnC,CACT,4DA7DO,WACE,QAAEO,GACX"}