{"code":"import { defineComponent } from \"vue\";\nexport default defineComponent({\n    data() {\n        return {\n            postTitle: '',\n            postContent: '',\n            selectedCategory: '专业课',\n            selectedTags: [],\n            images: [],\n            userInfo: null,\n            isDraft: false,\n            draftId: null\n        };\n    },\n    // 组件初始化\n    onLoad(options) {\n        // 检查是否是编辑草稿\n        if (options.draftId) {\n            this.draftId = options.draftId;\n            this.loadDraft(options.draftId);\n        }\n        // 获取用户信息\n        this.getUserInfo();\n    },\n    // 页面显示\n    onShow() {\n        // 检测草稿内容\n        if (!this.isDraft && !this.draftId) {\n            this.checkAutoSaveDraft();\n        }\n    },\n    // 页面隐藏\n    onHide() {\n        // 自动保存草稿\n        this.autoSaveDraft();\n    },\n    methods: {\n        /**\n         * @description 获取用户信息\n         */\n        getUserInfo() {\n            // 使用模拟数据\n            this.userInfo = {\n                id: 100,\n                nickname: '考研学生',\n                avatar: '/static/image/default_avatar.png',\n                school: '清华大学',\n                major: '计算机科学'\n            };\n            // 实际API调用(暂时注释)\n            /*\n            uni.request({\n              url: 'YOUR_API_URL/user/info',\n              method: 'GET',\n              success: (res) => {\n                if (res.statusCode === 200 && res.data) {\n                  this.userInfo = res.data;\n                }\n              },\n              fail: (err) => {\n                uni.__f__('error','at pages/publish/editor.uvue:131','获取用户信息失败:', err);\n              }\n            });\n            */\n        },\n        /**\n         * @description 返回上一页\n         */\n        goBack() {\n            if (this.postContent || this.images.length > 0) {\n                uni.showModal({\n                    title: '提示',\n                    content: '是否保存为草稿？',\n                    cancelText: '不保存',\n                    confirmText: '保存',\n                    success: (res) => {\n                        if (res.confirm) {\n                            this.saveAsDraft();\n                        }\n                        else {\n                            uni.navigateBack({\n                                delta: 1,\n                                fail: () => {\n                                    // 如果返回失败，尝试使用reLaunch\n                                    uni.reLaunch({\n                                        url: '/pages/publish/publish'\n                                    });\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n            else {\n                uni.navigateBack({\n                    delta: 1,\n                    fail: () => {\n                        // 如果返回失败，尝试使用reLaunch\n                        uni.reLaunch({\n                            url: '/pages/publish/publish'\n                        });\n                    }\n                });\n            }\n        },\n        /**\n         * @description 显示标签选择器\n         */\n        showTagSelector() {\n            uni.showActionSheet({\n                itemList: ['专业课', '数学', '英语', '政治', '历史', '地理', '物理', '化学', '生物'],\n                success: (res) => {\n                    const selectedIndex = res.tapIndex;\n                    this.selectedCategory = ['专业课', '数学', '英语', '政治', '历史', '地理', '物理', '化学', '生物'][selectedIndex];\n                }\n            });\n        },\n        /**\n         * @description 显示添加标签提示框\n         */\n        showTagPrompt() {\n            uni.showModal({\n                title: '添加标签',\n                content: '添加一个标签，方便他人查找（15字以内）',\n                editable: true,\n                placeholderText: '如：复习方法',\n                success: (res) => {\n                    if (res.confirm && res.content) {\n                        // 标签去重和长度限制\n                        if (res.content.length > 15) {\n                            uni.showToast({\n                                title: '标签过长',\n                                icon: 'none'\n                            });\n                            return null;\n                        }\n                        // 标签最多3个\n                        if (this.selectedTags.length >= 3) {\n                            uni.showToast({\n                                title: '最多添加3个标签',\n                                icon: 'none'\n                            });\n                            return null;\n                        }\n                        // 检查重复\n                        if (this.selectedTags.includes(res.content)) {\n                            uni.showToast({\n                                title: '标签已存在',\n                                icon: 'none'\n                            });\n                            return null;\n                        }\n                        // 添加标签\n                        this.selectedTags.push(res.content);\n                    }\n                }\n            });\n        },\n        /**\n         * @description 移除标签\n         * @param {Number} index - 标签索引\n         */\n        removeTag(index = null) {\n            this.selectedTags.splice(index, 1);\n        },\n        /**\n         * @description 选择图片\n         */\n        chooseImage() {\n            uni.chooseImage({\n                count: 9 - this.images.length,\n                sizeType: ['compressed'],\n                sourceType: ['album', 'camera'],\n                success: (res) => {\n                    // 检查图片内容\n                    this.checkImageContent(res.tempFilePaths);\n                }\n            });\n        },\n        /**\n         * @description 检查图片内容(防止二维码等)\n         * @param {Array} imagePaths - 图片路径数组\n         */\n        checkImageContent(imagePaths = null) {\n            // 模拟图片内容检查\n            // 实际应用中需要调用后端API进行检查\n            setTimeout(() => {\n                // 添加图片\n                this.images = [...this.images, ...imagePaths];\n                // 超过9张则截取\n                if (this.images.length > 9) {\n                    this.images = this.images.slice(0, 9);\n                }\n            }, 500);\n        },\n        /**\n         * @description 删除图片\n         * @param {Number} index - 图片索引\n         */\n        deleteImage(index = null) {\n            this.images.splice(index, 1);\n        },\n        /**\n         * @description 保存为草稿\n         */\n        saveAsDraft() {\n            // 检查是否有内容\n            if (!this.postContent && this.images.length === 0) {\n                uni.showToast({\n                    title: '请先输入内容',\n                    icon: 'none'\n                });\n                return null;\n            }\n            // 构建草稿数据\n            const draftData = new UTSJSONObject({\n                id: this.draftId || null,\n                title: this.postTitle,\n                content: this.postContent,\n                category: this.selectedCategory,\n                tags: this.selectedTags,\n                images: this.images,\n                updateTime: new Date().getTime()\n            });\n            // 模拟接口保存草稿\n            uni.showLoading({\n                title: '保存中...'\n            });\n            setTimeout(() => {\n                uni.hideLoading();\n                uni.showToast({\n                    title: '草稿保存成功',\n                    icon: 'success'\n                });\n                // 如果是新建草稿，生成一个模拟ID\n                if (!this.draftId) {\n                    this.draftId = new Date().getTime().toString();\n                }\n                // 延迟返回\n                setTimeout(() => {\n                    uni.navigateBack({\n                        delta: 1,\n                        fail: () => {\n                            // 如果返回失败，尝试使用reLaunch\n                            uni.reLaunch({\n                                url: '/pages/publish/publish'\n                            });\n                        }\n                    });\n                }, 1000);\n            }, 800);\n            // 实际API调用(暂时注释)\n            /*\n            uni.request({\n              url: 'YOUR_API_URL/post/draft',\n              method: 'POST',\n              data: draftData,\n              success: (res) => {\n                if (res.statusCode === 200) {\n                  uni.showToast({\n                    title: '草稿保存成功',\n                    icon: 'success'\n                  });\n                  \n                  // 如果是新建草稿，保存返回的ID\n                  if (!this.draftId && res.data && res.data.id) {\n                    this.draftId = res.data.id;\n                  }\n                  \n                  // 延迟返回\n                  setTimeout(() => {\n                    uni.navigateBack();\n                  }, 1000);\n                } else {\n                  uni.showToast({\n                    title: '草稿保存失败',\n                    icon: 'none'\n                  });\n                }\n              },\n              fail: () => {\n                uni.showToast({\n                  title: '网络异常',\n                  icon: 'none'\n                });\n              }\n            });\n            */\n        },\n        /**\n         * @description 自动保存草稿(本地)\n         */\n        autoSaveDraft() {\n            if (this.postContent || this.images.length > 0) {\n                try {\n                    uni.setStorageSync('post_draft_auto', new UTSJSONObject({\n                        content: this.postContent,\n                        category: this.selectedCategory,\n                        tags: this.selectedTags,\n                        images: this.images,\n                        updateTime: new Date().getTime()\n                    }));\n                }\n                catch (e) {\n                    uni.__f__('error', 'at pages/publish/editor.uvue:391', '自动保存草稿失败', e);\n                }\n            }\n        },\n        /**\n         * @description 检查自动保存的草稿\n         */\n        checkAutoSaveDraft() {\n            try {\n                const autoDraft = uni.getStorageSync('post_draft_auto');\n                if (autoDraft && autoDraft.updateTime) {\n                    const timeAgo = Math.floor((new Date().getTime() - autoDraft.updateTime) / 60000); // 分钟\n                    if (timeAgo < 60) { // 1小时内的草稿\n                        uni.showModal({\n                            title: '发现未发布的内容',\n                            content: `您有${timeAgo}分钟前编辑的内容未发布，是否继续编辑？`,\n                            success: (res) => {\n                                if (res.confirm) {\n                                    this.postContent = autoDraft.content || '';\n                                    this.selectedCategory = autoDraft.category || '专业课';\n                                    this.selectedTags = autoDraft.tags || [];\n                                    this.images = autoDraft.images || [];\n                                }\n                                else {\n                                    // 清除草稿\n                                    uni.removeStorageSync('post_draft_auto');\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        // 草稿太旧，自动清除\n                        uni.removeStorageSync('post_draft_auto');\n                    }\n                }\n            }\n            catch (e) {\n                uni.__f__('error', 'at pages/publish/editor.uvue:427', '检查自动草稿失败', e);\n            }\n        },\n        /**\n         * @description 加载草稿内容\n         * @param {String} draftId - 草稿ID\n         */\n        loadDraft(draftId = null) {\n            // 模拟加载草稿\n            setTimeout(() => {\n                const mockDraft = new UTSJSONObject({\n                    title: '考研复习经验分享',\n                    content: '分享一下我的考研经验，希望对大家有所帮助...',\n                    category: '专业课',\n                    tags: ['复习方法', '时间规划'],\n                    images: []\n                });\n                this.postTitle = mockDraft.title;\n                this.postContent = mockDraft.content;\n                this.selectedCategory = mockDraft.category;\n                this.selectedTags = mockDraft.tags;\n                this.images = mockDraft.images;\n                this.isDraft = true;\n            }, 500);\n            // 实际API调用(暂时注释)\n            /*\n            uni.request({\n              url: `YOUR_API_URL/post/draft/${draftId}`,\n              method: 'GET',\n              success: (res) => {\n                if (res.statusCode === 200 && res.data) {\n                  const draft = res.data;\n                  this.postTitle = draft.title || '';\n                  this.postContent = draft.content || '';\n                  this.selectedCategory = draft.category || '专业课';\n                  this.selectedTags = draft.tags || [];\n                  this.images = draft.images || [];\n                  this.isDraft = true;\n                }\n              },\n              fail: (err) => {\n                uni.__f__('error','at pages/publish/editor.uvue:471','加载草稿失败:', err);\n                uni.showToast({\n                  title: '草稿加载失败',\n                  icon: 'none'\n                });\n              }\n            });\n            */\n        },\n        /**\n         * @description 发布帖子\n         */\n        publishPost() {\n            // 内容检查\n            if (!this.postContent) {\n                uni.showToast({\n                    title: '请输入内容',\n                    icon: 'none'\n                });\n                return null;\n            }\n            // 模拟内容检测和发布过程\n            uni.showLoading({\n                title: '发布中...'\n            });\n            setTimeout(() => {\n                uni.hideLoading();\n                uni.showToast({\n                    title: '发布成功',\n                    icon: 'success'\n                });\n                // 清除自动保存的草稿\n                uni.removeStorageSync('post_draft_auto');\n                // 延迟返回\n                setTimeout(() => {\n                    uni.navigateBack({\n                        delta: 1,\n                        fail: () => {\n                            // 如果返回失败，尝试使用reLaunch\n                            uni.reLaunch({\n                                url: '/pages/publish/publish'\n                            });\n                        }\n                    });\n                }, 1000);\n            }, 1500);\n            // 注释掉原来的实现\n            /*\n            // 内容检测\n            this.checkContent(() => {\n              // 显示加载中\n              uni.showLoading({\n                title: '发布中...'\n              });\n              \n              // 先上传图片\n              this.uploadImages((imageUrls) => {\n                // 构建发布数据\n                const postData = {\n                  title: this.postTitle || this.selectedCategory, // 如果没有标题，使用分类作为标题\n                  content: this.postContent,\n                  category: this.selectedCategory,\n                  tags: this.selectedTags,\n                  images: imageUrls,\n                  draftId: this.draftId // 如果是草稿，提供草稿ID以便发布后删除\n                };\n                \n                // 调用接口发布帖子\n                uni.request({\n                  url: 'YOUR_API_URL/post/publish',\n                  method: 'POST',\n                  data: postData,\n                  success: (res) => {\n                    uni.hideLoading();\n                    \n                    if (res.statusCode === 200) {\n                      uni.showToast({\n                        title: '发布成功',\n                        icon: 'success'\n                      });\n                      \n                      // 清除自动保存的草稿\n                      uni.removeStorageSync('post_draft_auto');\n                      \n                      // 延迟返回\n                      setTimeout(() => {\n                        uni.navigateBack();\n                      }, 1000);\n                    } else {\n                      uni.showToast({\n                        title: res.data.message || '发布失败',\n                        icon: 'none'\n                      });\n                    }\n                  },\n                  fail: () => {\n                    uni.hideLoading();\n                    uni.showToast({\n                      title: '网络异常',\n                      icon: 'none'\n                    });\n                  }\n                });\n              });\n            });\n            */\n        },\n        /**\n         * @description 检查内容是否合规(无二维码、手机号、微信号)\n         * @param {Function} callback - 检查通过后的回调\n         */\n        checkContent(callback = null) {\n            // 正则表达式检查手机号和微信号\n            const phoneRegex = /1[3-9]\\d{9}/g;\n            const wechatRegex = /(微信|wx|weixin)[: ]*([a-zA-Z0-9_-]{6,20})/gi;\n            if (phoneRegex.test(this.postContent) || wechatRegex.test(this.postContent)) {\n                uni.showToast({\n                    title: '内容含有联系方式，请修改后重试',\n                    icon: 'none'\n                });\n                return null;\n            }\n            // 调用后端API进行更复杂的内容检查\n            uni.request({\n                url: 'YOUR_API_URL/content/check',\n                method: 'POST',\n                data: new UTSJSONObject({\n                    content: this.postContent\n                }),\n                success: (res) => {\n                    if (res.statusCode === 200 && res.data.valid) {\n                        callback && callback();\n                    }\n                    else {\n                        uni.showToast({\n                            title: res.data.message || '内容不合规，请修改后重试',\n                            icon: 'none'\n                        });\n                    }\n                },\n                fail: () => {\n                    uni.showToast({\n                        title: '网络异常，请稍后再试',\n                        icon: 'none'\n                    });\n                }\n            });\n        },\n        /**\n         * @description 上传图片\n         * @param {Function} callback - 上传完成后的回调，参数为图片URL数组\n         */\n        uploadImages(callback = null) {\n            if (this.images.length === 0) {\n                callback && callback([]);\n                return null;\n            }\n            const uploadedUrls = [];\n            let uploadCount = 0;\n            // 显示上传进度\n            uni.showLoading({\n                title: `上传图片 0/${this.images.length}`\n            });\n            // 逐个上传图片\n            this.images.forEach((path) => {\n                uni.uploadFile({\n                    url: 'YOUR_API_URL/upload/image',\n                    filePath: path,\n                    name: 'file',\n                    success: (res) => {\n                        uploadCount++;\n                        // 更新进度\n                        uni.showLoading({\n                            title: `上传图片 ${uploadCount}/${this.images.length}`\n                        });\n                        // 解析响应\n                        if (res.statusCode === 200) {\n                            try {\n                                const data = UTS.JSON.parse(res.data);\n                                if (data.url) {\n                                    uploadedUrls.push(data.url);\n                                }\n                            }\n                            catch (e) {\n                                uni.__f__('error', 'at pages/publish/editor.uvue:668', '解析上传响应失败', e);\n                            }\n                        }\n                        // 所有图片上传完成\n                        if (uploadCount === this.images.length) {\n                            uni.hideLoading();\n                            callback && callback(uploadedUrls);\n                        }\n                    },\n                    fail: () => {\n                        uploadCount++;\n                        // 更新进度\n                        uni.showLoading({\n                            title: `上传图片 ${uploadCount}/${this.images.length}`\n                        });\n                        // 所有图片上传完成\n                        if (uploadCount === this.images.length) {\n                            uni.hideLoading();\n                            callback && callback(uploadedUrls);\n                        }\n                    }\n                });\n            });\n        }\n    }\n});\n//# sourceMappingURL=E:/yanshilu%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AFyanshilu/pages/publish/editor.uvue?vue&type=script&lang.uts.js.map","references":[],"uniExtApis":["uni.showModal","uni.navigateBack","uni.reLaunch","uni.showActionSheet","uni.showToast","uni.chooseImage","uni.showLoading","uni.hideLoading","uni.setStorageSync","uni.__f__","uni.getStorageSync","uni.removeStorageSync","uni.request","uni.uploadFile"],"map":"{\"version\":3,\"file\":\"editor.uvue?vue&type=script&lang.uts.js\",\"sourceRoot\":\"\",\"sources\":[\"editor.uvue?vue&type=script&lang.uts\"],\"names\":[],\"mappings\":\"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\"}"}
