{"version":3,"file":"combobox.js","sources":["components/combobox/combobox.uvue","../../HBuilderX/HBuilderX.4.45.2025010502/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/RToveWFuc2hpbHXph43mlrDmnaXov4cv5YmN56uveWFuc2hpbHVfMS9jb21wb25lbnRzL2NvbWJvYm94L2NvbWJvYm94LnV2dWU"],"sourcesContent":["<template name=\"ChoiceSelected\">\n    <!-- 自定义下拉选择框 start-->\n    <view class=\"selected-all\" @click.stop>\n        <view :class=\"isShowChoice ? 'drop-down-box-selected' : 'drop-down-box'\" @click=\"btnShowHideClick\" ref=\"dropdownTrigger\">\n            <!-- 纯下拉选择模式 -->\n            <text v-if=\"mode === 'select'\" :class=\"[choiceIndex === -1 ? 'dropdown-placeholder' : 'dropdown-content']\">{{displayContent}}</text>\n            \n            <!-- 搜索筛选模式 -->\n            <input \n                v-else\n                type=\"text\" \n                class=\"search-input\" \n                v-model=\"searchKeyword\" \n                :placeholder=\"searchPlaceholder\" \n                @input=\"onSearchInput\" \n                @focus=\"onSearchFocus\"\n                @click.stop/>\n            \n            <!-- 统一的箭头图标 -->\n            <view class=\"arrow-container\">\n                <image class=\"dropdown-icon\" :class=\"{'dropdown-icon-rotate': isShowChoice}\" src=\"../../static/image/arrow/arrow_down.svg\" mode=\"widthFix\"></image>\n            </view>\n        </view>\n        <!-- 弹框内容 -->\n        <view class=\"dialog-view\" :class=\"{active: isShowChoice}\" v-if=\"isShowChoice\" :style=\"{\n            top: dropdownTop + 'px',\n            left: dropdownLeft + 'px',\n            width: dropdownWidth + 'px'\n        }\" @click.stop>\n            <scroll-view scroll-y=\"true\" class=\"dialog-scroll\">\n                <view v-if=\"filteredChoiceList.length > 0\">\n                    <text class=\"dialog-title\" :class=\"{'dialog-title-selected': choiceIndex == index}\"\n                        v-for=\"(item, index) in filteredChoiceList\" :key=\"item.choiceItemId\" @click=\"btnChoiceClick(index)\">{{item.choiceItemContent}}</text>\n                </view>\n                <view v-else class=\"empty-result\">\n                    <text class=\"empty-result-text\">无匹配数据</text>\n                </view>\n            </scroll-view>\n        </view>\n    </view>\n    <!-- 自定义下拉选择框 end -->\n</template>\n\n<script lang=\"uts\">\n    let dropdownInstances = [];\n    \n    export default {\n        name: \"ChoiceSelected\",\n        data() {\n            return {\n                isShowChoice: false,\n                dropdownTop: 0,\n                dropdownLeft: 0,\n                dropdownWidth: 0,\n                displayContent: this.defaultText, // 使用传入的默认文本\n                searchKeyword: '', // 搜索关键词\n                searchTimer: null, // 防抖定时器\n                filteredList: [] // 过滤后的列表\n            };\n        },\n        props: {\n            choiceIndex: {\n                type: Number,\n                default: -1 // 默认-1表示未选择\n            },\n            choiceList: {\n                type: Array,\n                default: () => []\n            },\n            defaultText: {\n                type: String,\n                default: '请选择'\n            },\n            mode: {\n                type: String,\n                default: 'select', // 'select' | 'search'\n                validator: (value) => ['select', 'search'].includes(value)\n            },\n            debounce: {\n                type: Number,\n                default: 300\n            },\n            searchPlaceholder: {\n                type: String,\n                default: '请输入关键词'\n            }\n        },\n        created() {\n            // 将当前实例添加到实例数组，便于全局管理\n            dropdownInstances.push(this);\n        },\n        beforeDestroy() {\n            // 移除当前实例\n            const index = dropdownInstances.indexOf(this);\n            if (index > -1) {\n                dropdownInstances.splice(index, 1);\n            }\n            // 清除防抖定时器\n            if (this.searchTimer) {\n                clearTimeout(this.searchTimer);\n            }\n        },\n        computed: {\n            /**\n             * @description 根据搜索关键词过滤选项列表\n             * @returns {Array} 过滤后的选项列表\n             */\n            filteredChoiceList() {\n                if (!this.searchKeyword || this.mode === 'select') {\n                    return this.choiceList;\n                }\n                \n                // 根据关键词过滤选项\n                return this.choiceList.filter(item => \n                    item.choiceItemContent.toLowerCase().includes(this.searchKeyword.toLowerCase())\n                );\n            }\n        },\n        watch: {\n            choiceIndex(newVal) {\n                // 当choiceIndex变化时更新显示内容\n                if (newVal >= 0 && newVal < this.choiceList.length) {\n                    const selectedItem = this.choiceList[newVal];\n                    this.displayContent = selectedItem.choiceItemContent;\n                    // 在搜索模式下，设置搜索关键词为选中项\n                    if (this.mode === 'search') {\n                        this.searchKeyword = selectedItem.choiceItemContent;\n                    }\n                } else {\n                    this.displayContent = this.defaultText;\n                    if (this.mode === 'search') {\n                        this.searchKeyword = '';\n                    }\n                }\n            },\n            defaultText(newVal) {\n                // 如果当前没有选择任何选项，更新默认文本\n                if (this.choiceIndex < 0 || this.choiceIndex >= this.choiceList.length) {\n                    this.displayContent = newVal;\n                }\n            }\n        },\n        methods: {\n            /**\n             * @description 处理选项点击事件，关闭下拉框并触发选择事件\n             * @param {Number} position - 选中项的索引位置\n             */\n            btnChoiceClick: function(position) {\n                var _this = this;\n                _this.isShowChoice = false;\n                \n                // 在搜索模式下，我们需要找出在原始列表中的实际位置\n                if (_this.mode === 'search' && _this.searchKeyword) {\n                    const selectedItem = _this.filteredChoiceList[position];\n                    const originalIndex = _this.choiceList.findIndex(\n                        item => item.choiceItemId === selectedItem.choiceItemId\n                    );\n                    if (originalIndex !== -1) {\n                        _this.$emit(\"onChoiceClick\", originalIndex);\n                        return;\n                    }\n                }\n                \n                // 对于普通模式或未找到匹配项\n                _this.$emit(\"onChoiceClick\", position);\n            },\n            \n            /**\n             * @description 切换下拉框的显示与隐藏状态\n             * @param {Event} event - 点击事件对象\n             */\n            btnShowHideClick: function(event) {\n                // 阻止事件冒泡\n                event.stopPropagation();\n                \n                var _this = this;\n                if (_this.isShowChoice) {\n                    _this.isShowChoice = false;\n                } else {\n                    // 关闭其他所有下拉框\n                    this.closeOtherDropdowns();\n                    \n                    // 使用uni.createSelectorQuery获取触发按钮的位置和尺寸\n                    const query = uni.createSelectorQuery().in(this);\n                    query.select('.drop-down-box, .drop-down-box-selected').boundingClientRect(data => {\n                        if (data) {\n                            _this.dropdownTop = data.top + data.height;\n                            _this.dropdownLeft = data.left;\n                            _this.dropdownWidth = data.width;\n                            _this.isShowChoice = true;\n                        }\n                    }).exec();\n                }\n            },\n            \n            /**\n             * @description 关闭其他下拉框，只保留当前实例的下拉框\n             */\n            closeOtherDropdowns() {\n                dropdownInstances.forEach(instance => {\n                    if (instance !== this && instance.isShowChoice) {\n                        instance.isShowChoice = false;\n                    }\n                });\n            },\n            \n            /**\n             * @description 处理搜索输入事件，带防抖\n             * @param {Event} event - 输入事件对象\n             */\n            onSearchInput(event) {\n                const _this = this;\n                \n                // 清除之前的定时器\n                if (_this.searchTimer) {\n                    clearTimeout(_this.searchTimer);\n                }\n                \n                // 设置防抖定时器\n                _this.searchTimer = setTimeout(() => {\n                    // 触发搜索输入事件\n                    _this.$emit('search-input', _this.searchKeyword);\n                    \n                    // 确保下拉框处于打开状态\n                    if (!_this.isShowChoice) {\n                        _this.btnShowHideClick(event);\n                    }\n                }, _this.debounce);\n            },\n            \n            /**\n             * @description 处理搜索框聚焦事件\n             * @param {Event} event - 聚焦事件对象\n             */\n            onSearchFocus(event) {\n                // 如果下拉框未显示，则显示\n                if (!this.isShowChoice) {\n                    this.btnShowHideClick(event);\n                }\n            }\n        }\n    }\n</script>\n\n<style>\n    /* end */\n    .dialog-title-selected {\n        color: white;\n        font-size: 28rpx;\n        padding-left: 20rpx;\n        padding-top: 8rpx;\n        padding-bottom: 8rpx;\n        padding-right: 15rpx;\n        background-color: #55ffff;\n    }\n\n    .dialog-title {\n        color: black;\n        font-size: 28rpx;\n        padding-left: 20rpx;\n        padding-top: 8rpx;\n        padding-bottom: 8rpx;\n        padding-right: 15rpx;\n        background-color: white;\n    }\n    \n    .dialog-scroll {\n        width: 100%;\n        max-height: 300rpx; /* 限制滚动区域的最大高度 */\n        -webkit-overflow-scrolling: touch; /* 提升iOS滚动体验 */\n    }\n\n    .dialog-view {\n        display: flex;\n        flex-direction: column;\n        border: 2rpx solid #F0AD4E;\n        box-sizing: border-box;\n        position: fixed;\n        z-index: 9999;\n        background-color: #ffffff;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n        max-height: 400rpx; /* 限制整个下拉框的最大高度 */\n        transform-origin: top center;\n        opacity: 0;\n        transform: scaleY(0);\n        transition: all 0.2s ease;\n        overflow: hidden; /* 确保内容不会溢出 */\n        border-radius: 0 0 10rpx 10rpx; /* 增加底部圆角 */\n    }\n    \n    .dialog-view.active {\n        opacity: 1;\n        transform: scaleY(1);\n    }\n\n    .dropdown-icon {\n        width: 26rpx;\n        height: 26rpx;\n        margin-left: 5rpx;\n        margin-right: 10rpx;\n        transition: transform 0.3s ease;\n        flex-shrink: 0;\n    }\n    \n    .dropdown-icon-rotate {\n        transform: rotate(180deg);\n    }\n\n    .dropdown-content {\n        color: black;\n        font-size: 28rpx;\n        padding-left: 10rpx;\n        padding-top: 5rpx;\n        padding-bottom: 5rpx;\n        flex-grow: 1;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n    \n    .dropdown-placeholder {\n        color: #999;\n        font-size: 28rpx;\n        padding-left: 10rpx;\n        padding-top: 5rpx;\n        padding-bottom: 5rpx;\n        flex-grow: 1;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n\n    .drop-down-box-selected {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        min-height: 60rpx;\n        width: 100%;\n        border: 2rpx solid #F0AD4E;\n        box-sizing: border-box;\n        padding: 0 5rpx;\n        border-radius: 10rpx; /* 添加圆角 */\n    }\n\n    .drop-down-box {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        min-height: 60rpx;\n        width: 100%;\n        border: 2rpx solid gray;\n        border-radius: 10rpx; /* 添加圆角 */\n        box-sizing: border-box;\n        padding: 0 5rpx;\n    }\n\n    .selected-all {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        width: 100%;\n    }\n    \n    /* 搜索模式相关样式 */\n    .arrow-container {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-left: 5rpx;\n        margin-right: 5rpx;\n        flex-shrink: 0;\n        min-width: 30rpx;\n        z-index: 2;\n    }\n    \n    .search-input {\n        flex: 1;\n        padding-left: 10rpx;\n        padding-right: 15rpx;\n        height: 50rpx;\n        font-size: 28rpx;\n        color: black;\n    }\n    \n    .empty-result {\n        display: flex;\n        justify-content: center;\n        padding: 20rpx 0;\n    }\n    \n    .empty-result-text {\n        color: #999;\n        font-size: 28rpx;\n    }\n\n    /* start */\n</style>\n ","import Component from 'E:/yanshilu重新来过/前端yanshilu_1/components/combobox/combobox.uvue'\nwx.createComponent(Component)"],"names":["defineComponent","uni"],"mappings":"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"}