{"version":3,"file":"ai-chat.js","sources":["store/modules/common/ai-chat.js"],"sourcesContent":["/**\r\n * @description AI聊天模块 - 处理AI对话功能（共享模块）\r\n */\r\nimport { services } from '../../services';\r\n\r\n// 初始状态\r\nconst state = {\r\n  isLoading: false,\r\n  isTesting: false,\r\n  error: null,\r\n  messages: [],\r\n  conversationId: null,\r\n  lastResponse: null,\r\n  testResult: null\r\n};\r\n\r\n// Getters\r\nconst getters = {\r\n  isLoading: state => state.isLoading,\r\n  isTesting: state => state.isTesting,\r\n  error: state => state.error,\r\n  messages: state => state.messages,\r\n  lastResponse: state => state.lastResponse,\r\n  conversationId: state => state.conversationId,\r\n  testResult: state => state.testResult\r\n};\r\n\r\n// 引入常量类型\r\nconst SET_LOADING = 'SET_LOADING';\r\nconst SET_TESTING = 'SET_TESTING';\r\nconst SET_ERROR = 'SET_ERROR';\r\nconst SET_MESSAGES = 'SET_MESSAGES';\r\nconst ADD_MESSAGE = 'ADD_MESSAGE';\r\nconst SET_CONVERSATION_ID = 'SET_CONVERSATION_ID';\r\nconst SET_LAST_RESPONSE = 'SET_LAST_RESPONSE';\r\nconst CLEAR_CONVERSATION = 'CLEAR_CONVERSATION';\r\nconst SET_TEST_RESULT = 'SET_TEST_RESULT';\r\n\r\n// Mutations\r\nconst mutations = {\r\n  [SET_LOADING](state, status) {\r\n    state.isLoading = status;\r\n  },\r\n  [SET_TESTING](state, status) {\r\n    state.isTesting = status;\r\n  },\r\n  [SET_ERROR](state, error) {\r\n    state.error = error;\r\n  },\r\n  [SET_MESSAGES](state, messages) {\r\n    state.messages = messages;\r\n  },\r\n  [ADD_MESSAGE](state, message) {\r\n    state.messages.push(message);\r\n  },\r\n  [SET_CONVERSATION_ID](state, id) {\r\n    state.conversationId = id;\r\n  },\r\n  [SET_LAST_RESPONSE](state, response) {\r\n    state.lastResponse = response;\r\n  },\r\n  [CLEAR_CONVERSATION](state) {\r\n    state.messages = [];\r\n    state.conversationId = null;\r\n    state.lastResponse = null;\r\n  },\r\n  [SET_TEST_RESULT](state, result) {\r\n    state.testResult = result;\r\n  }\r\n};\r\n\r\n// Actions\r\nconst actions = {\r\n  /**\r\n   * @description 发送聊天消息\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} payload - 请求参数\r\n   * @param {string} payload.message - 消息内容\r\n   * @param {Object} [payload.context] - 上下文信息\r\n   * @returns {Promise<Object>} 发送结果\r\n   */\r\n  async sendChatMessage({ commit, state }, { message, context = {} }) {\r\n    try {\r\n      commit(SET_LOADING, true);\r\n      commit(SET_ERROR, null);\r\n      \r\n      // 添加用户消息到列表\r\n      const userMessage = {\r\n        id: Date.now().toString(),\r\n        content: message,\r\n        role: 'user',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      commit(ADD_MESSAGE, userMessage);\r\n      \r\n      // 准备请求参数\r\n      const requestParams = {\r\n        message,\r\n        conversationId: state.conversationId,\r\n        context\r\n      };\r\n      \r\n      // 发送请求\r\n      const response = await services.aiChat.sendMessage(requestParams);\r\n      \r\n      if (!response.success) {\r\n        throw new Error(response.error?.message || '发送消息失败');\r\n      }\r\n      \r\n      // 保存会话ID（如果是新会话）\r\n      if (response.data.conversationId && !state.conversationId) {\r\n        commit(SET_CONVERSATION_ID, response.data.conversationId);\r\n      }\r\n      \r\n      // 添加AI回复到消息列表\r\n      const aiMessage = {\r\n        id: response.data.messageId || `ai-${Date.now()}`,\r\n        content: response.data.content,\r\n        role: 'assistant',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      commit(ADD_MESSAGE, aiMessage);\r\n      commit(SET_LAST_RESPONSE, response.data);\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('发送聊天消息失败:', error);\r\n      commit(SET_ERROR, error.message || '发送聊天消息失败');\r\n      \r\n      // 添加错误消息\r\n      const errorMessage = {\r\n        id: `error-${Date.now()}`,\r\n        content: '抱歉，我遇到了一些问题，请稍后再试。',\r\n        role: 'assistant',\r\n        isError: true,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      commit(ADD_MESSAGE, errorMessage);\r\n      \r\n      return { success: false, error };\r\n    } finally {\r\n      commit(SET_LOADING, false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 获取历史消息\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string} conversationId - 会话ID\r\n   * @returns {Promise<Object>} 历史消息\r\n   */\r\n  async getConversationHistory({ commit }, conversationId) {\r\n    try {\r\n      commit(SET_LOADING, true);\r\n      commit(SET_ERROR, null);\r\n      \r\n      const response = await services.aiChat.getMessages(conversationId);\r\n      \r\n      if (response.success) {\r\n        commit(SET_MESSAGES, response.data.messages || []);\r\n        commit(SET_CONVERSATION_ID, conversationId);\r\n      } else {\r\n        throw new Error(response.error?.message || '获取历史消息失败');\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('获取历史消息失败:', error);\r\n      commit(SET_ERROR, error.message || '获取历史消息失败');\r\n      return { success: false, error };\r\n    } finally {\r\n      commit(SET_LOADING, false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 创建新会话\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object>} 创建结果\r\n   */\r\n  async createNewConversation({ commit }) {\r\n    try {\r\n      commit(SET_LOADING, true);\r\n      commit(SET_ERROR, null);\r\n      commit(CLEAR_CONVERSATION);\r\n      \r\n      const response = await services.aiChat.createConversation();\r\n      \r\n      if (response.success) {\r\n        commit(SET_CONVERSATION_ID, response.data.conversationId);\r\n      } else {\r\n        throw new Error(response.error?.message || '创建会话失败');\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('创建会话失败:', error);\r\n      commit(SET_ERROR, error.message || '创建会话失败');\r\n      return { success: false, error };\r\n    } finally {\r\n      commit(SET_LOADING, false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 清除当前会话\r\n   * @param {Object} context - Vuex上下文\r\n   */\r\n  clearConversation({ commit }) {\r\n    commit(CLEAR_CONVERSATION);\r\n  },\r\n  \r\n  /**\r\n   * @description 测试AIQA接口\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string} question - 用户提问\r\n   * @returns {Promise<Object>} 测试结果\r\n   */\r\n  async testAIQA({ commit }, question) {\r\n    try {\r\n      commit(SET_LOADING, true);\r\n      commit(SET_TESTING, true);\r\n      commit(SET_ERROR, null);\r\n      \r\n      const result = await services.aiChat.testAIQA(question);\r\n      \r\n      if (result.success) {\r\n        commit(SET_TEST_RESULT, result.data);\r\n      } else {\r\n        commit(SET_ERROR, result.error || { message: '获取AI回复失败' });\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('测试AIQA失败:', error);\r\n      commit(SET_ERROR, error.message || '测试AIQA失败');\r\n      return { success: false, error };\r\n    } finally {\r\n      commit(SET_LOADING, false);\r\n      commit(SET_TESTING, false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 清除测试结果\r\n   * @param {Object} context - Vuex上下文\r\n   */\r\n  clearTestResult({ commit }) {\r\n    commit(SET_TEST_RESULT, null);\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n}; "],"names":["state","services","uni"],"mappings":"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"}