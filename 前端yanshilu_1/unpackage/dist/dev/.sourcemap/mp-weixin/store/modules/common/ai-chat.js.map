{"version":3,"file":"ai-chat.js","sources":["store/modules/common/ai-chat.js"],"sourcesContent":["/**\r\n * @description AI聊天模块 - 处理AI对话功能（共享模块）\r\n */\r\nimport { services } from '../../services';\r\n\r\n// 初始状态\r\nconst state = {\r\n  isLoading: false,\r\n  isTesting: false,\r\n  error: null,\r\n  messages: [],\r\n  conversationId: null,\r\n  lastResponse: null,\r\n  testResult: null,\r\n  // 新增历史会话管理\r\n  historyChats: [],\r\n  historySummaries: [], // 新增：历史会话摘要列表（只包含ID和标题等基本信息）\r\n  currentChatId: null\r\n};\r\n\r\n// Getters\r\nconst getters = {\r\n  isLoading: state => state.isLoading,\r\n  isTesting: state => state.isTesting,\r\n  error: state => state.error,\r\n  messages: state => state.messages,\r\n  lastResponse: state => state.lastResponse,\r\n  conversationId: state => state.conversationId,\r\n  testResult: state => state.testResult,\r\n  // 新增历史会话相关getters\r\n  historyChats: state => state.historyChats,\r\n  historySummaries: state => state.historySummaries, // 新增：历史会话摘要列表getter\r\n  currentChatId: state => state.currentChatId\r\n};\r\n\r\n// 引入常量类型\r\nconst SET_LOADING = 'SET_LOADING';\r\nconst SET_TESTING = 'SET_TESTING';\r\nconst SET_ERROR = 'SET_ERROR';\r\nconst SET_MESSAGES = 'SET_MESSAGES';\r\nconst ADD_MESSAGE = 'ADD_MESSAGE';\r\nconst SET_CONVERSATION_ID = 'SET_CONVERSATION_ID';\r\nconst SET_LAST_RESPONSE = 'SET_LAST_RESPONSE';\r\nconst CLEAR_CONVERSATION = 'CLEAR_CONVERSATION';\r\nconst SET_TEST_RESULT = 'SET_TEST_RESULT';\r\n// 新增历史会话相关常量\r\nconst SET_HISTORY_CHATS = 'SET_HISTORY_CHATS';\r\nconst SET_HISTORY_SUMMARIES = 'SET_HISTORY_SUMMARIES'; // 新增：设置历史摘要常量\r\nconst ADD_HISTORY_CHAT = 'ADD_HISTORY_CHAT';\r\nconst UPDATE_HISTORY_CHAT = 'UPDATE_HISTORY_CHAT';\r\nconst REMOVE_HISTORY_CHAT = 'REMOVE_HISTORY_CHAT';\r\nconst SET_CURRENT_CHAT_ID = 'SET_CURRENT_CHAT_ID';\r\n\r\n// Mutations\r\nconst mutations = {\r\n  [SET_LOADING](state, status) {\r\n    state.isLoading = status;\r\n  },\r\n  [SET_TESTING](state, status) {\r\n    state.isTesting = status;\r\n  },\r\n  [SET_ERROR](state, error) {\r\n    state.error = error;\r\n  },\r\n  [SET_MESSAGES](state, messages) {\r\n    state.messages = messages;\r\n  },\r\n  [ADD_MESSAGE](state, message) {\r\n    state.messages.push(message);\r\n  },\r\n  [SET_CONVERSATION_ID](state, id) {\r\n    state.conversationId = id;\r\n  },\r\n  [SET_LAST_RESPONSE](state, response) {\r\n    state.lastResponse = response;\r\n  },\r\n  [CLEAR_CONVERSATION](state) {\r\n    state.messages = [];\r\n    state.conversationId = null;\r\n    state.lastResponse = null;\r\n  },\r\n  [SET_TEST_RESULT](state, result) {\r\n    state.testResult = result;\r\n  },\r\n  // 新增历史会话相关mutations\r\n  [SET_HISTORY_CHATS](state, chats) {\r\n    state.historyChats = chats;\r\n  },\r\n  [SET_HISTORY_SUMMARIES](state, summaries) { // 新增：设置历史摘要的mutation\r\n    state.historySummaries = summaries;\r\n  },\r\n  [ADD_HISTORY_CHAT](state, chat) {\r\n    // 添加到列表前端，最新的对话在最前面\r\n    state.historyChats.unshift(chat);\r\n  },\r\n  [UPDATE_HISTORY_CHAT](state, updatedChat) {\r\n    const index = state.historyChats.findIndex(chat => chat.id === updatedChat.id);\r\n    if (index !== -1) {\r\n      state.historyChats.splice(index, 1, updatedChat);\r\n    }\r\n  },\r\n  [REMOVE_HISTORY_CHAT](state, chatId) {\r\n    state.historyChats = state.historyChats.filter(chat => chat.id !== chatId);\r\n    state.historySummaries = state.historySummaries.filter(chat => chat.id !== chatId);\r\n  },\r\n  [SET_CURRENT_CHAT_ID](state, chatId) {\r\n    state.currentChatId = chatId;\r\n  }\r\n};\r\n\r\n// Actions\r\nconst actions = {\r\n  /**\r\n   * @description 发送聊天消息\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} payload - 请求参数\r\n   * @param {string} payload.message - 消息内容\r\n   * @param {Object} [payload.context] - 上下文信息\r\n   * @returns {Promise<Object>} 发送结果\r\n   */\r\n  async sendChatMessage({ commit, state }, { message, context = {} }) {\r\n    try {\r\n      commit(SET_LOADING, true);\r\n      commit(SET_ERROR, null);\r\n      \r\n      // 添加用户消息到列表\r\n      const userMessage = {\r\n        id: Date.now().toString(),\r\n        content: message,\r\n        role: 'user',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      commit(ADD_MESSAGE, userMessage);\r\n      \r\n      // 准备请求参数\r\n      const requestParams = {\r\n        message,\r\n        conversationId: state.conversationId,\r\n        context\r\n      };\r\n      \r\n      // 发送请求\r\n      const response = await services.aiChat.sendMessage(requestParams);\r\n      \r\n      if (!response.success) {\r\n        throw response.error || { message: response.message || '发送消息失败' };\r\n      }\r\n      \r\n      // 保存会话ID（如果是新会话）\r\n      if (response.data.conversationId && !state.conversationId) {\r\n        commit(SET_CONVERSATION_ID, response.data.conversationId);\r\n      }\r\n      \r\n      // 添加AI回复到消息列表\r\n      const aiMessage = {\r\n        id: response.data.messageId || `ai-${Date.now()}`,\r\n        content: response.data.content,\r\n        role: 'assistant',\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      commit(ADD_MESSAGE, aiMessage);\r\n      commit(SET_LAST_RESPONSE, response.data);\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('发送聊天消息失败:', error);\r\n      commit(SET_ERROR, error);\r\n      \r\n      // 添加错误消息\r\n      const errorMessage = {\r\n        id: `error-${Date.now()}`,\r\n        content: error.message || '系统错误',\r\n        role: 'assistant',\r\n        isError: true,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      commit(ADD_MESSAGE, errorMessage);\r\n      \r\n      return { success: false, error, message: error.message };\r\n    } finally {\r\n      commit(SET_LOADING, false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 获取历史消息\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string} conversationId - 会话ID\r\n   * @returns {Promise<Object>} 历史消息\r\n   */\r\n  async getConversationHistory({ commit }, conversationId) {\r\n    try {\r\n      commit(SET_LOADING, true);\r\n      commit(SET_ERROR, null);\r\n      \r\n      const response = await services.aiChat.getMessages(conversationId);\r\n      \r\n      if (response.success) {\r\n        commit(SET_MESSAGES, response.data.messages || []);\r\n        commit(SET_CONVERSATION_ID, conversationId);\r\n      } else {\r\n        throw response.error || { message: response.message || '获取历史消息失败' };\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('获取历史消息失败:', error);\r\n      commit(SET_ERROR, error);\r\n      return { success: false, error, message: error.message };\r\n    } finally {\r\n      commit(SET_LOADING, false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 创建新会话\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object>} 创建结果\r\n   */\r\n  async createNewConversation({ commit }) {\r\n    try {\r\n      commit(SET_LOADING, true);\r\n      commit(SET_ERROR, null);\r\n      commit(CLEAR_CONVERSATION);\r\n      \r\n      const response = await services.aiChat.createConversation();\r\n      \r\n      if (response.success) {\r\n        commit(SET_CONVERSATION_ID, response.data.conversationId);\r\n      } else {\r\n        throw response.error || { message: response.message || '创建会话失败' };\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('创建会话失败:', error);\r\n      commit(SET_ERROR, error);\r\n      return { success: false, error, message: error.message };\r\n    } finally {\r\n      commit(SET_LOADING, false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 清除当前会话\r\n   * @param {Object} context - Vuex上下文\r\n   */\r\n  clearConversation({ commit }) {\r\n    commit(CLEAR_CONVERSATION);\r\n  },\r\n  \r\n  /**\r\n   * @description 测试AIQA接口\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} payload - 请求参数\r\n   * @param {string} payload.question - 用户提问\r\n   * @param {Object} payload.contextInfo - 用户上下文信息\r\n   * @param {string} [payload.chatId] - 聊天会话ID\r\n   * @returns {Promise<Object>} 测试结果\r\n   */\r\n  async testAIQA({ commit, dispatch }, { question, contextInfo = {}, chatId = null }) {\r\n    try {\r\n      commit(SET_LOADING, true);\r\n      commit(SET_TESTING, true);\r\n      commit(SET_ERROR, null);\r\n      \r\n      // 如果有会话ID，设置当前会话ID\r\n      if (chatId) {\r\n        commit(SET_CURRENT_CHAT_ID, chatId);\r\n      }\r\n      \r\n      // 调用服务，传递问题和上下文信息\r\n      const result = await services.aiChat.testAIQA(question, contextInfo);\r\n      \r\n      if (result.success) {\r\n        commit(SET_TEST_RESULT, result.data);\r\n      } else {\r\n        commit(SET_ERROR, result.error || { message: result.message || '测试AIQA失败' });\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('测试AIQA失败:', error);\r\n      commit(SET_ERROR, error);\r\n      return { success: false, error, message: error.message };\r\n    } finally {\r\n      commit(SET_LOADING, false);\r\n      commit(SET_TESTING, false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 清除测试结果\r\n   * @param {Object} context - Vuex上下文\r\n   */\r\n  clearTestResult({ commit }) {\r\n    commit(SET_TEST_RESULT, null);\r\n  },\r\n  \r\n  /**\r\n   * @description 获取历史会话列表\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object>} 历史会话\r\n   */\r\n  async getHistoryChats({ commit }) {\r\n    try {\r\n      commit(SET_LOADING, true);\r\n      \r\n      // 尝试从后端获取历史会话摘要\r\n      const response = await services.aiChat.getConversationSummaries();\r\n      \r\n      if (response.success) {\r\n        // 如果成功，则更新历史摘要状态\r\n        commit(SET_HISTORY_SUMMARIES, response.data.summaries || []);\r\n        return { success: true, data: response.data.summaries };\r\n      } else {\r\n        // 如果后端API不可用，从本地存储中获取\r\n        const localChats = uni.getStorageSync('chat_history') || '[]';\r\n        const chats = JSON.parse(localChats);\r\n        \r\n        // 从完整历史记录中提取摘要信息\r\n        const summaries = chats.map(chat => ({\r\n          id: chat.id,\r\n          title: chat.title || '新对话',\r\n          createdAt: chat.createdAt,\r\n          updatedAt: chat.updatedAt\r\n        }));\r\n        \r\n        commit(SET_HISTORY_SUMMARIES, summaries);\r\n        return { success: true, data: summaries };\r\n      }\r\n    } catch (error) {\r\n      console.error('获取历史会话失败:', error);\r\n      return { success: false, error, message: error.message };\r\n    } finally {\r\n      commit(SET_LOADING, false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 保存或更新聊天记录摘要\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} chatData - 聊天数据\r\n   * @returns {Promise<Object>} 保存结果\r\n   */\r\n  async saveChat({ commit, state }, chatData) {\r\n    try {\r\n      // 尝试调用后端API保存完整对话内容\r\n      try {\r\n        // 如果后端API可用，则调用API保存完整对话\r\n        await services.aiChat.saveConversation({\r\n          id: chatData.id,\r\n          title: chatData.title || '新对话',\r\n          messages: state.messages, // 保存完整的消息内容到后端\r\n          createdAt: chatData.createdAt || new Date(),\r\n          updatedAt: new Date()\r\n        });\r\n      } catch (apiError) {\r\n        console.error('保存对话到后端失败，将使用本地存储', apiError);\r\n      }\r\n      \r\n      // 从本地获取所有历史摘要\r\n      const localSummaries = uni.getStorageSync('chat_summaries') || '[]';\r\n      let summaries = JSON.parse(localSummaries);\r\n      \r\n      // 查找当前聊天是否存在\r\n      const existingIndex = summaries.findIndex(chat => chat.id === chatData.id);\r\n      \r\n      if (existingIndex !== -1) {\r\n        // 存在则更新摘要\r\n        summaries[existingIndex] = {\r\n          id: chatData.id,\r\n          title: chatData.title || '新对话',\r\n          createdAt: chatData.createdAt || new Date(),\r\n          updatedAt: new Date()\r\n        };\r\n        commit(UPDATE_HISTORY_CHAT, summaries[existingIndex]);\r\n      } else {\r\n        // 不存在则添加摘要\r\n        summaries.unshift({\r\n          id: chatData.id,\r\n          title: chatData.title || '新对话',\r\n          createdAt: chatData.createdAt || new Date(),\r\n          updatedAt: new Date()\r\n        });\r\n        commit(ADD_HISTORY_CHAT, {\r\n          id: chatData.id,\r\n          title: chatData.title || '新对话',\r\n          createdAt: chatData.createdAt || new Date(),\r\n          updatedAt: new Date()\r\n        });\r\n      }\r\n      \r\n      // 限制最大保存数量\r\n      if (summaries.length > 50) {\r\n        summaries = summaries.slice(0, 50);\r\n      }\r\n      \r\n      // 保存摘要到本地\r\n      uni.setStorageSync('chat_summaries', JSON.stringify(summaries));\r\n      \r\n      // 同时更新Vuex中的历史摘要\r\n      commit(SET_HISTORY_SUMMARIES, summaries);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('保存聊天摘要失败:', error);\r\n      return { success: false, error, message: error.message };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 删除聊天记录\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string} chatId - 聊天ID\r\n   * @returns {Promise<Object>} 删除结果\r\n   */\r\n  async deleteChat({ commit, state }, chatId) {\r\n    try {\r\n      if (!chatId) {\r\n        console.error('删除聊天记录失败: 缺少chatId参数');\r\n        return { success: false, message: '删除失败：没有指定要删除的聊天ID' };\r\n      }\r\n      \r\n      console.log('正在删除聊天记录:', chatId);\r\n      \r\n      // 尝试调用后端API删除对话\r\n      try {\r\n        // 如果后端API可用，则调用删除API\r\n        await services.aiChat.deleteConversation(chatId);\r\n      } catch (apiError) {\r\n        console.error('从后端删除对话失败，将仅删除本地记录', apiError);\r\n      }\r\n      \r\n      // 从本地获取所有历史摘要\r\n      const localSummaries = uni.getStorageSync('chat_summaries') || '[]';\r\n      let summaries = JSON.parse(localSummaries);\r\n      \r\n      // 过滤掉要删除的记录\r\n      const originalLength = summaries.length;\r\n      summaries = summaries.filter(chat => chat.id !== chatId);\r\n      \r\n      // 检查是否真的删除了记录\r\n      if (summaries.length === originalLength) {\r\n        console.warn('未找到要删除的记录ID:', chatId);\r\n      } else {\r\n        console.log(`成功从${originalLength}条记录中删除1条记录，剩余${summaries.length}条`);\r\n      }\r\n      \r\n      // 更新本地存储\r\n      uni.setStorageSync('chat_summaries', JSON.stringify(summaries));\r\n      \r\n      // 更新Vuex状态\r\n      commit(REMOVE_HISTORY_CHAT, chatId);\r\n      \r\n      // 如果删除的是当前会话，清空当前会话\r\n      if (state.currentChatId === chatId) {\r\n        commit(SET_CURRENT_CHAT_ID, null);\r\n        commit(CLEAR_CONVERSATION);\r\n      }\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('删除聊天记录失败:', error);\r\n      return { success: false, error, message: error.message };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 设置当前会话\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string} chatId - 聊天ID\r\n   */\r\n  setCurrentChat({ commit }, chatId) {\r\n    commit(SET_CURRENT_CHAT_ID, chatId);\r\n  },\r\n  \r\n  /**\r\n   * @description 加载指定会话\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string} chatId - 聊天ID\r\n   * @returns {Promise<Object>} 会话数据\r\n   */\r\n  async loadChat({ commit, state, dispatch }, chatId) {\r\n    try {\r\n      commit(SET_LOADING, true);\r\n      commit(SET_ERROR, null);\r\n      \r\n      // 设置当前会话ID\r\n      commit(SET_CURRENT_CHAT_ID, chatId);\r\n      \r\n      // 从后端获取完整会话内容\r\n      const response = await services.aiChat.getMessages(chatId);\r\n      \r\n      if (response.success) {\r\n        // 设置会话消息\r\n        commit(SET_MESSAGES, response.data.messages || []);\r\n        commit(SET_CONVERSATION_ID, chatId);\r\n        return { success: true, data: response.data };\r\n      } else {\r\n        // 如果后端API失败，尝试从本地获取\r\n        const localChats = uni.getStorageSync('chat_history') || '[]';\r\n        const chats = JSON.parse(localChats);\r\n        \r\n        const chat = chats.find(c => c.id === chatId);\r\n        if (!chat) {\r\n          throw new Error('找不到指定的会话记录');\r\n        }\r\n        \r\n        // 设置会话消息\r\n        commit(SET_MESSAGES, chat.messages || []);\r\n        \r\n        return { success: true, data: chat };\r\n      }\r\n    } catch (error) {\r\n      console.error('加载会话记录失败:', error);\r\n      commit(SET_ERROR, error);\r\n      return { success: false, error, message: error.message };\r\n    } finally {\r\n      commit(SET_LOADING, false);\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n}; "],"names":["state","services","uni"],"mappings":"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"}