{"version":3,"file":"actions.js","sources":["store/modules/user/actions.js"],"sourcesContent":["/**\r\n * @description 用户模块的actions\r\n */\r\n\r\nimport { login, getUserInfo, refreshToken, jwt } from '../../services/auth.api';\r\n\r\nexport default {\r\n  /**\r\n   * @description 用户登录\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} credentials - 登录凭证\r\n   * @returns {Promise<Object>} 登录结果\r\n   */\r\n  async login({ commit }, credentials) {\r\n    try {\r\n      const response = await login(credentials);\r\n      \r\n      if (response.success) {\r\n        const { token, refreshToken, expiresIn, userInfo, role } = response.data;\r\n        \r\n        // 设置认证信息\r\n        commit('SET_AUTH', { token, refreshToken, expiresIn });\r\n        commit('SET_LOGGED_IN', true);\r\n        commit('SET_ROLE', role);\r\n        commit('SET_USER_INFO', userInfo);\r\n        \r\n        return { success: true, data: response.data };\r\n      } else {\r\n        return { success: false, message: response.message || '登录失败' };\r\n      }\r\n    } catch (error) {\r\n      console.error('登录失败:', error);\r\n      return { success: false, message: error.message || '登录过程中发生错误' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 获取用户信息\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object>} 用户信息\r\n   */\r\n  async getUserInfo({ commit, state, dispatch }) {\r\n    try {\r\n      // 如果没有token，先尝试刷新token\r\n      if (!state.auth.token) {\r\n        const refreshResult = await dispatch('refreshToken');\r\n        if (!refreshResult.success) {\r\n          return { success: false, message: '获取用户信息失败: 无有效令牌' };\r\n        }\r\n      }\r\n      \r\n      const response = await getUserInfo(state.auth.token);\r\n      \r\n      if (response.success) {\r\n        commit('SET_USER_INFO', response.data);\r\n        return { success: true, data: response.data };\r\n      } else {\r\n        return { success: false, message: response.message || '获取用户信息失败' };\r\n      }\r\n    } catch (error) {\r\n      console.error('获取用户信息失败:', error);\r\n      return { success: false, message: error.message || '获取用户信息过程中发生错误' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 刷新令牌\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object>} 刷新结果\r\n   */\r\n  async refreshToken({ commit, state }) {\r\n    try {\r\n      if (!state.auth.refreshToken) {\r\n        return { success: false, message: '没有可用的刷新令牌' };\r\n      }\r\n      \r\n      const response = await refreshToken(state.auth.refreshToken);\r\n      \r\n      if (response.success) {\r\n        const { token, refreshToken, expiresIn } = response.data;\r\n        commit('SET_AUTH', { token, refreshToken, expiresIn });\r\n        return { success: true };\r\n      } else {\r\n        commit('CLEAR_AUTH');\r\n        return { success: false, message: response.message || '刷新令牌失败' };\r\n      }\r\n    } catch (error) {\r\n      console.error('刷新令牌失败:', error);\r\n      commit('CLEAR_AUTH');\r\n      return { success: false, message: error.message || '刷新令牌过程中发生错误' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 用户登出\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object>} 登出结果\r\n   */\r\n  logout({ commit }) {\r\n    commit('CLEAR_AUTH');\r\n    return { success: true, message: '登出成功' };\r\n  },\r\n  \r\n  /**\r\n   * @description 检查登录状态\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object>} 登录状态\r\n   */\r\n  async checkLoginStatus({ state, commit, dispatch }) {\r\n    try {\r\n      // 如果本地存储没有登录标记，直接返回未登录\r\n      if (!state.isLoggedIn) {\r\n        return { success: false, message: '未登录' };\r\n      }\r\n      \r\n      // 检查令牌是否有效\r\n      const token = state.auth.token;\r\n      const tokenExpireTime = state.auth.tokenExpireTime;\r\n      \r\n      // 如果令牌不存在或已过期\r\n      if (!token || !tokenExpireTime || tokenExpireTime <= Date.now()) {\r\n        // 尝试使用刷新令牌\r\n        const refreshResult = await dispatch('refreshToken');\r\n        if (!refreshResult.success) {\r\n          // 如果刷新失败，清除认证信息\r\n          commit('CLEAR_AUTH');\r\n          return { success: false, message: '登录已过期' };\r\n        }\r\n      }\r\n      \r\n      // 获取最新的用户信息\r\n      const userInfoResult = await dispatch('getUserInfo');\r\n      if (!userInfoResult.success) {\r\n        // 如果获取用户信息失败，可能是令牌无效\r\n        commit('CLEAR_AUTH');\r\n        return { success: false, message: '获取用户信息失败，请重新登录' };\r\n      }\r\n      \r\n      return { success: true, message: '已登录' };\r\n    } catch (error) {\r\n      console.error('检查登录状态失败:', error);\r\n      commit('CLEAR_AUTH');\r\n      return { success: false, message: error.message || '检查登录状态过程中发生错误' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 更新用户信息\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} userInfo - 用户信息\r\n   * @returns {Promise<Object>} 更新结果\r\n   */\r\n  async updateUserInfo({ commit, state }, userInfo) {\r\n    try {\r\n      // 这里应该有一个真实的API请求\r\n      // 模拟API请求成功\r\n      setTimeout(() => {}, 300);\r\n      \r\n      commit('UPDATE_USER_INFO', userInfo);\r\n      return { success: true, message: '用户信息已更新' };\r\n    } catch (error) {\r\n      console.error('更新用户信息失败:', error);\r\n      return { success: false, message: error.message || '更新用户信息过程中发生错误' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 更新注册状态\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} registrationData - 注册数据\r\n   * @returns {Promise<Object>} 更新结果\r\n   */\r\n  updateRegistration({ commit }, registrationData) {\r\n    commit('SET_REGISTRATION', registrationData);\r\n    return { success: true };\r\n  }\r\n};"],"names":["login","uni","getUserInfo","refreshToken"],"mappings":"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"}