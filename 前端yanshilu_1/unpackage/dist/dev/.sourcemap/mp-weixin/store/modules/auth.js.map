{"version":3,"file":"auth.js","sources":["store/modules/auth.js"],"sourcesContent":["/**\r\n * @description 用户认证状态管理模块\r\n */\r\n\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport { Base64 } from 'js-base64';\r\n\r\n// 模拟API请求\r\nconst api = {\r\n  /**\r\n   * @description 模拟登录请求\r\n   * @param {Object} credentials - 登录凭证\r\n   * @param {string} credentials.username - 用户名\r\n   * @param {string} credentials.password - 密码\r\n   * @param {string} credentials.role - 角色（student/teacher）\r\n   * @returns {Promise<Object>} 登录结果\r\n   */\r\n  login(credentials) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const { username, role } = credentials;\r\n        \r\n        // 创建JWT payload\r\n        const payload = {\r\n          sub: `user_${Date.now()}`,\r\n          name: username,\r\n          role: role,\r\n          iat: Math.floor(Date.now() / 1000),\r\n          exp: Math.floor(Date.now() / 1000) + 7200 // 2小时后过期\r\n        };\r\n        \r\n        // 模拟JWT结构 (header.payload.signature)\r\n        const header = Base64.encode(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));\r\n        const payloadBase64 = Base64.encode(JSON.stringify(payload));\r\n        const signature = Base64.encode('mock_signature'); // 模拟签名\r\n        \r\n        const token = `${header}.${payloadBase64}.${signature}`;\r\n        const refreshToken = `refresh_${header}.${Base64.encode(JSON.stringify({\r\n          ...payload,\r\n          exp: Math.floor(Date.now() / 1000) + 86400 // 24小时后过期\r\n        }))}.${signature}`;\r\n        \r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            token,\r\n            refreshToken,\r\n            expiresIn: 7200,\r\n            userInfo: {\r\n              name: username,\r\n              avatar: 'https://example.com/avatar.png',\r\n              tags: ['标签1', '标签2'],\r\n              balance: role === 'teacher' ? 1000 : null,\r\n            },\r\n            role\r\n          }\r\n        });\r\n      }, 500);\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * @description 模拟获取用户信息\r\n   * @param {string} token - 用户token\r\n   * @returns {Promise<Object>} 用户信息\r\n   */\r\n  getUserInfo(token) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const role = token.startsWith('teacher') ? 'teacher' : 'student';\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            name: `${role}用户`,\r\n            avatar: 'https://example.com/avatar.png',\r\n            tags: ['标签1', '标签2', '标签3'],\r\n            balance: role === 'teacher' ? 1500 : null,\r\n            orders: {\r\n              student: {\r\n                pendingPayment: role === 'student' ? [{ id: 's1', title: '待付款订单1' }] : [],\r\n                pendingService: role === 'student' ? [{ id: 's2', title: '待服务订单1' }] : [],\r\n                completed: role === 'student' ? [{ id: 's3', title: '已完成订单1' }] : [],\r\n                cancelled: role === 'student' ? [{ id: 's4', title: '已取消订单1' }] : []\r\n              },\r\n              teacher: {\r\n                pendingService: role === 'teacher' ? [{ id: 't1', title: '待服务订单1' }] : [],\r\n                completed: role === 'teacher' ? [{ id: 't2', title: '已完成订单1' }] : [],\r\n                cancelled: role === 'teacher' ? [{ id: 't3', title: '已取消订单1' }] : []\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }, 600);\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * @description 模拟刷新token\r\n   * @param {string} refreshToken - 刷新token\r\n   * @returns {Promise<Object>} 新的token信息\r\n   */\r\n  refreshToken(refreshToken) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            token: `new_token_${Date.now()}`,\r\n            refreshToken: `new_refresh_token_${Date.now()}`,\r\n            expiresIn: 7200 // 2小时有效期\r\n          }\r\n        });\r\n      }, 300);\r\n    });\r\n  }\r\n};\r\n\r\n// 存储助手函数\r\nconst storage = {\r\n  /**\r\n   * @description 保存认证信息到本地存储\r\n   * @param {Object} auth - 认证信息\r\n   */\r\n  saveAuth(auth) {\r\n    uni.setStorageSync('token', auth.token);\r\n    uni.setStorageSync('refreshToken', auth.refreshToken);\r\n    uni.setStorageSync('tokenExpireTime', Date.now() + auth.expiresIn * 1000);\r\n    uni.setStorageSync('isLoggedIn', true);\r\n    uni.setStorageSync('role', auth.role);\r\n    uni.setStorageSync('userBaseInfo', {\r\n      name: auth.userInfo.name,\r\n      avatar: auth.userInfo.avatar\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * @description 清除认证信息\r\n   */\r\n  clearAuth() {\r\n    uni.removeStorageSync('token');\r\n    uni.removeStorageSync('refreshToken');\r\n    uni.removeStorageSync('tokenExpireTime');\r\n    uni.removeStorageSync('isLoggedIn');\r\n    uni.removeStorageSync('role');\r\n    uni.removeStorageSync('userBaseInfo');\r\n  },\r\n  \r\n  /**\r\n   * @description 获取token\r\n   * @returns {string|null} token值\r\n   */\r\n  getToken() {\r\n    return uni.getStorageSync('token') || null;\r\n  },\r\n  \r\n  /**\r\n   * @description 获取刷新token\r\n   * @returns {string|null} 刷新token值\r\n   */\r\n  getRefreshToken() {\r\n    return uni.getStorageSync('refreshToken') || null;\r\n  },\r\n  \r\n  /**\r\n   * @description 获取token过期时间\r\n   * @returns {number|null} 过期时间戳\r\n   */\r\n  getTokenExpireTime() {\r\n    return uni.getStorageSync('tokenExpireTime') || null;\r\n  }\r\n};\r\n\r\nconst state = {\r\n  isRegistered: false,\r\n  role: uni.getStorageSync('role') || null,\r\n  isLoggedIn: uni.getStorageSync('isLoggedIn') || false,\r\n  userInfo: {\r\n    name: '',\r\n    avatar: '',\r\n    tags: [],\r\n    balance: null,\r\n    orders: {\r\n      student: { pendingPayment: [], pendingService: [], completed: [], cancelled: [] },\r\n      teacher: { pendingService: [], completed: [], cancelled: [] }\r\n    }\r\n  },\r\n  token: storage.getToken(),\r\n  refreshToken: storage.getRefreshToken(),\r\n  tokenExpireTime: storage.getTokenExpireTime()\r\n};\r\n\r\nconst mutations = {\r\n  /**\r\n   * @description 设置登录状态\r\n   * @param {Object} state - Vuex状态\r\n   * @param {boolean} isLoggedIn - 是否已登录\r\n   */\r\n  SET_LOGGED_IN(state, isLoggedIn) {\r\n    state.isLoggedIn = isLoggedIn;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置用户角色\r\n   * @param {Object} state - Vuex状态\r\n   * @param {string} role - 用户角色\r\n   */\r\n  SET_ROLE(state, role) {\r\n    state.role = role;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置认证信息\r\n   * @param {Object} state - Vuex状态\r\n   * @param {Object} authData - 认证数据\r\n   */\r\n  SET_AUTH(state, authData) {\r\n    state.token = authData.token;\r\n    state.refreshToken = authData.refreshToken;\r\n    state.tokenExpireTime = Date.now() + authData.expiresIn * 1000;\r\n    \r\n    // 保存到本地存储\r\n    storage.saveAuth({\r\n      token: authData.token,\r\n      refreshToken: authData.refreshToken,\r\n      expiresIn: authData.expiresIn,\r\n      role: authData.role,\r\n      userInfo: authData.userInfo\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * @description 设置用户信息\r\n   * @param {Object} state - Vuex状态\r\n   * @param {Object} userInfo - 用户信息\r\n   */\r\n  SET_USER_INFO(state, userInfo) {\r\n    state.userInfo = userInfo;\r\n  },\r\n  \r\n  /**\r\n   * @description 清除认证状态\r\n   * @param {Object} state - Vuex状态\r\n   */\r\n  CLEAR_AUTH(state) {\r\n    state.isLoggedIn = false;\r\n    state.token = null;\r\n    state.refreshToken = null;\r\n    state.tokenExpireTime = null;\r\n    state.userInfo = {\r\n      name: '',\r\n      avatar: '',\r\n      tags: [],\r\n      balance: null,\r\n      orders: {\r\n        student: { pendingPayment: [], pendingService: [], completed: [], cancelled: [] },\r\n        teacher: { pendingService: [], completed: [], cancelled: [] }\r\n      }\r\n    };\r\n    \r\n    // 清除本地存储\r\n    storage.clearAuth();\r\n  },\r\n  \r\n  /**\r\n   * @description 设置是否已注册\r\n   * @param {Object} state - Vuex状态\r\n   * @param {boolean} status - 注册状态\r\n   */\r\n  SET_REGISTERED(state, status) {\r\n    state.isRegistered = status;\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  /**\r\n   * @description 登录操作\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} credentials - 登录凭证\r\n   * @returns {Promise<Object>} 登录结果\r\n   */\r\n  async login({ commit }, credentials) {\r\n    try {\r\n      const response = await api.login(credentials);\r\n      if (response.success) {\r\n        const { token, refreshToken, expiresIn, userInfo, role } = response.data;\r\n        \r\n        commit('SET_LOGGED_IN', true);\r\n        commit('SET_ROLE', role);\r\n        commit('SET_AUTH', { token, refreshToken, expiresIn, role, userInfo });\r\n        commit('SET_USER_INFO', userInfo);\r\n        \r\n        return { success: true, message: '登录成功' };\r\n      }\r\n      return { success: false, message: '登录失败' };\r\n    } catch (error) {\r\n      console.error('登录失败:', error);\r\n      return { success: false, message: error.message || '登录失败' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 获取用户信息\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object>} 用户信息获取结果\r\n   */\r\n  async getUserInfo({ commit, state, dispatch }) {\r\n    // 如果token即将过期，先刷新token\r\n    if (state.tokenExpireTime && state.tokenExpireTime - Date.now() < 10 * 60 * 1000) {\r\n      await dispatch('refreshToken');\r\n    }\r\n    \r\n    try {\r\n      const response = await api.getUserInfo(state.token);\r\n      if (response.success) {\r\n        commit('SET_USER_INFO', response.data);\r\n        return { success: true, data: response.data };\r\n      }\r\n      return { success: false, message: '获取用户信息失败' };\r\n    } catch (error) {\r\n      console.error('获取用户信息失败:', error);\r\n      return { success: false, message: error.message || '获取用户信息失败' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 刷新token\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object>} 刷新结果\r\n   */\r\n  async refreshToken({ commit, state }) {\r\n    if (!state.refreshToken) {\r\n      return { success: false, message: '无刷新令牌' };\r\n    }\r\n    \r\n    try {\r\n      const response = await api.refreshToken(state.refreshToken);\r\n      if (response.success) {\r\n        const { token, refreshToken, expiresIn } = response.data;\r\n        \r\n        // 解析JWT获取过期时间\r\n        const decodedToken = jwtUtils.decode(token);\r\n        \r\n        commit('SET_AUTH', {\r\n          token,\r\n          refreshToken,\r\n          expiresIn: decodedToken ? (decodedToken.exp * 1000 - Date.now()) / 1000 : expiresIn,\r\n          role: state.role,\r\n          userInfo: state.userInfo\r\n        });\r\n        return { success: true, message: '令牌刷新成功' };\r\n      }\r\n      return { success: false, message: '令牌刷新失败' };\r\n    } catch (error) {\r\n      console.error('令牌刷新失败:', error);\r\n      commit('CLEAR_AUTH');\r\n      return { success: false, message: error.message || '令牌刷新失败' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 登出操作\r\n   * @param {Object} context - Vuex上下文\r\n   */\r\n  logout({ commit }) {\r\n    commit('CLEAR_AUTH');\r\n    return { success: true, message: '已退出登录' };\r\n  },\r\n  \r\n  /**\r\n   * @description 验证登录状态\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object>} 验证结果\r\n   */\r\n  async checkLoginStatus({ state, commit, dispatch }) {\r\n    if (!state.token) {\r\n      commit('CLEAR_AUTH');\r\n      return { success: false, message: '未登录' };\r\n    }\r\n    \r\n    // 使用JWT工具检查是否有效\r\n    const isTokenValid = jwtUtils.isValid(state.token);\r\n    \r\n    if (!isTokenValid && state.refreshToken) {\r\n      const refreshResult = await dispatch('refreshToken');\r\n      if (!refreshResult.success) {\r\n        commit('CLEAR_AUTH');\r\n        return { success: false, message: '登录已过期' };\r\n      }\r\n    } else if (!isTokenValid) {\r\n      commit('CLEAR_AUTH');\r\n      return { success: false, message: '登录已过期' };\r\n    }\r\n    \r\n    // 获取用户信息以验证token有效性\r\n    const userInfoResult = await dispatch('getUserInfo');\r\n    if (userInfoResult.success) {\r\n      return { success: true, message: '登录状态有效' };\r\n    } else {\r\n      commit('CLEAR_AUTH');\r\n      return { success: false, message: '登录状态无效' };\r\n    }\r\n  }\r\n};\r\n\r\nconst getters = {\r\n  /**\r\n   * @description 获取用户角色\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {string|null} 用户角色\r\n   */\r\n  userRole: state => state.role,\r\n  \r\n  /**\r\n   * @description 判断是否是老师\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {boolean} 是否是老师\r\n   */\r\n  isTeacher: state => state.role === 'teacher',\r\n  \r\n  /**\r\n   * @description 判断是否是学生\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {boolean} 是否是学生\r\n   */\r\n  isStudent: state => state.role === 'student',\r\n  \r\n  /**\r\n   * @description 获取老师余额\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {number|null} 老师余额\r\n   */\r\n  teacherBalance: state => state.role === 'teacher' ? state.userInfo.balance : null,\r\n  \r\n  /**\r\n   * @description 获取用户名称\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {string} 用户名称\r\n   */\r\n  userName: state => state.userInfo.name,\r\n  \r\n  /**\r\n   * @description 获取用户头像\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {string} 用户头像\r\n   */\r\n  userAvatar: state => state.userInfo.avatar,\r\n  \r\n  /**\r\n   * @description 获取用户标签\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 用户标签\r\n   */\r\n  userTags: state => state.userInfo.tags,\r\n  \r\n  /**\r\n   * @description 获取学生待付款订单\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 待付款订单列表\r\n   */\r\n  studentPendingPaymentOrders: state => state.userInfo.orders.student.pendingPayment,\r\n  \r\n  /**\r\n   * @description 获取学生待服务订单\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 待服务订单列表\r\n   */\r\n  studentPendingServiceOrders: state => state.userInfo.orders.student.pendingService,\r\n  \r\n  /**\r\n   * @description 获取学生已完成订单\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 已完成订单列表\r\n   */\r\n  studentCompletedOrders: state => state.userInfo.orders.student.completed,\r\n  \r\n  /**\r\n   * @description 获取学生已取消订单\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 已取消订单列表\r\n   */\r\n  studentCancelledOrders: state => state.userInfo.orders.student.cancelled,\r\n  \r\n  /**\r\n   * @description 获取老师待服务订单\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 待服务订单列表\r\n   */\r\n  teacherPendingServiceOrders: state => state.userInfo.orders.teacher.pendingService,\r\n  \r\n  /**\r\n   * @description 获取老师已完成订单\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 已完成订单列表\r\n   */\r\n  teacherCompletedOrders: state => state.userInfo.orders.teacher.completed,\r\n  \r\n  /**\r\n   * @description 获取老师已取消订单\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 已取消订单列表\r\n   */\r\n  teacherCancelledOrders: state => state.userInfo.orders.teacher.cancelled\r\n};\r\n\r\n// JWT处理工具\r\nconst jwtUtils = {\r\n  /**\r\n   * @description 解析JWT令牌\r\n   * @param {string} token - JWT令牌\r\n   * @returns {Object} 解析后的数据\r\n   */\r\n  decode(token) {\r\n    try {\r\n      return jwtDecode(token);\r\n    } catch (error) {\r\n      console.error('JWT解析失败:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 检查JWT是否有效\r\n   * @param {string} token - JWT令牌\r\n   * @returns {boolean} 是否有效\r\n   */\r\n  isValid(token) {\r\n    if (!token) return false;\r\n    \r\n    try {\r\n      const decoded = this.decode(token);\r\n      if (!decoded) return false;\r\n      \r\n      // 检查是否过期\r\n      const currentTime = Date.now() / 1000;\r\n      return decoded.exp > currentTime;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters\r\n};\r\n"],"names":["Base64","auth","uni","state","jwtDecode"],"mappings":";;AAQA,MAAM,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASV,MAAM,aAAa;AACjB,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,iBAAW,MAAM;AACf,cAAM,EAAE,UAAU,KAAM,IAAG;AAG3B,cAAM,UAAU;AAAA,UACd,KAAK,QAAQ,KAAK,IAAK,CAAA;AAAA,UACvB,MAAM;AAAA,UACN;AAAA,UACA,KAAK,KAAK,MAAM,KAAK,IAAG,IAAK,GAAI;AAAA,UACjC,KAAK,KAAK,MAAM,KAAK,IAAK,IAAG,GAAI,IAAI;AAAA;AAAA,QAC/C;AAGQ,cAAM,SAASA,cAAAA,QAAO,OAAO,KAAK,UAAU,EAAE,KAAK,SAAS,KAAK,MAAK,CAAE,CAAC;AACzE,cAAM,gBAAgBA,cAAAA,QAAO,OAAO,KAAK,UAAU,OAAO,CAAC;AAC3D,cAAM,YAAYA,cAAAA,QAAO,OAAO,gBAAgB;AAEhD,cAAM,QAAQ,GAAG,MAAM,IAAI,aAAa,IAAI,SAAS;AACrD,cAAM,eAAe,WAAW,MAAM,IAAIA,sBAAO,OAAO,KAAK,UAAU;AAAA,UACrE,GAAG;AAAA,UACH,KAAK,KAAK,MAAM,KAAK,IAAK,IAAG,GAAI,IAAI;AAAA;AAAA,QACtC,CAAA,CAAC,CAAC,IAAI,SAAS;AAEhB,gBAAQ;AAAA,UACN,SAAS;AAAA,UACT,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA,WAAW;AAAA,YACX,UAAU;AAAA,cACR,MAAM;AAAA,cACN,QAAQ;AAAA,cACR,MAAM,CAAC,OAAO,KAAK;AAAA,cACnB,SAAS,SAAS,YAAY,MAAO;AAAA,YACtC;AAAA,YACD;AAAA,UACD;AAAA,QACX,CAAS;AAAA,MACF,GAAE,GAAG;AAAA,IACZ,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,YAAY,OAAO;AACjB,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,iBAAW,MAAM;AACf,cAAM,OAAO,MAAM,WAAW,SAAS,IAAI,YAAY;AACvD,gBAAQ;AAAA,UACN,SAAS;AAAA,UACT,MAAM;AAAA,YACJ,MAAM,GAAG,IAAI;AAAA,YACb,QAAQ;AAAA,YACR,MAAM,CAAC,OAAO,OAAO,KAAK;AAAA,YAC1B,SAAS,SAAS,YAAY,OAAO;AAAA,YACrC,QAAQ;AAAA,cACN,SAAS;AAAA,gBACP,gBAAgB,SAAS,YAAY,CAAC,EAAE,IAAI,MAAM,OAAO,SAAU,CAAA,IAAI,CAAE;AAAA,gBACzE,gBAAgB,SAAS,YAAY,CAAC,EAAE,IAAI,MAAM,OAAO,SAAU,CAAA,IAAI,CAAE;AAAA,gBACzE,WAAW,SAAS,YAAY,CAAC,EAAE,IAAI,MAAM,OAAO,SAAU,CAAA,IAAI,CAAE;AAAA,gBACpE,WAAW,SAAS,YAAY,CAAC,EAAE,IAAI,MAAM,OAAO,SAAU,CAAA,IAAI,CAAE;AAAA,cACrE;AAAA,cACD,SAAS;AAAA,gBACP,gBAAgB,SAAS,YAAY,CAAC,EAAE,IAAI,MAAM,OAAO,SAAU,CAAA,IAAI,CAAE;AAAA,gBACzE,WAAW,SAAS,YAAY,CAAC,EAAE,IAAI,MAAM,OAAO,SAAU,CAAA,IAAI,CAAE;AAAA,gBACpE,WAAW,SAAS,YAAY,CAAC,EAAE,IAAI,MAAM,OAAO,SAAU,CAAA,IAAI,CAAE;AAAA,cACrE;AAAA,YACF;AAAA,UACF;AAAA,QACX,CAAS;AAAA,MACF,GAAE,GAAG;AAAA,IACZ,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,cAAc;AACzB,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,iBAAW,MAAM;AACf,gBAAQ;AAAA,UACN,SAAS;AAAA,UACT,MAAM;AAAA,YACJ,OAAO,aAAa,KAAK,IAAK,CAAA;AAAA,YAC9B,cAAc,qBAAqB,KAAK,IAAK,CAAA;AAAA,YAC7C,WAAW;AAAA;AAAA,UACZ;AAAA,QACX,CAAS;AAAA,MACF,GAAE,GAAG;AAAA,IACZ,CAAK;AAAA,EACF;AACH;AAGA,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,EAKd,SAASC,OAAM;AACbC,kBAAAA,MAAI,eAAe,SAASD,MAAK,KAAK;AACtCC,kBAAAA,MAAI,eAAe,gBAAgBD,MAAK,YAAY;AACpDC,wBAAI,eAAe,mBAAmB,KAAK,IAAG,IAAKD,MAAK,YAAY,GAAI;AACxEC,kBAAAA,MAAI,eAAe,cAAc,IAAI;AACrCA,kBAAAA,MAAI,eAAe,QAAQD,MAAK,IAAI;AACpCC,kBAAG,MAAC,eAAe,gBAAgB;AAAA,MACjC,MAAMD,MAAK,SAAS;AAAA,MACpB,QAAQA,MAAK,SAAS;AAAA,IAC5B,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKD,YAAY;AACVC,wBAAI,kBAAkB,OAAO;AAC7BA,wBAAI,kBAAkB,cAAc;AACpCA,wBAAI,kBAAkB,iBAAiB;AACvCA,wBAAI,kBAAkB,YAAY;AAClCA,wBAAI,kBAAkB,MAAM;AAC5BA,wBAAI,kBAAkB,cAAc;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,WAAW;AACT,WAAOA,oBAAI,eAAe,OAAO,KAAK;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,kBAAkB;AAChB,WAAOA,oBAAI,eAAe,cAAc,KAAK;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,qBAAqB;AACnB,WAAOA,oBAAI,eAAe,iBAAiB,KAAK;AAAA,EACjD;AACH;AAEA,MAAM,QAAQ;AAAA,EACZ,cAAc;AAAA,EACd,MAAMA,cAAG,MAAC,eAAe,MAAM,KAAK;AAAA,EACpC,YAAYA,cAAG,MAAC,eAAe,YAAY,KAAK;AAAA,EAChD,UAAU;AAAA,IACR,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM,CAAE;AAAA,IACR,SAAS;AAAA,IACT,QAAQ;AAAA,MACN,SAAS,EAAE,gBAAgB,CAAA,GAAI,gBAAgB,CAAE,GAAE,WAAW,CAAA,GAAI,WAAW,GAAI;AAAA,MACjF,SAAS,EAAE,gBAAgB,CAAE,GAAE,WAAW,CAAE,GAAE,WAAW,GAAI;AAAA,IAC9D;AAAA,EACF;AAAA,EACD,OAAO,QAAQ,SAAU;AAAA,EACzB,cAAc,QAAQ,gBAAiB;AAAA,EACvC,iBAAiB,QAAQ,mBAAoB;AAC/C;AAEA,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhB,cAAcC,QAAO,YAAY;AAC/B,IAAAA,OAAM,aAAa;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,SAASA,QAAO,MAAM;AACpB,IAAAA,OAAM,OAAO;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,SAASA,QAAO,UAAU;AACxB,IAAAA,OAAM,QAAQ,SAAS;AACvB,IAAAA,OAAM,eAAe,SAAS;AAC9B,IAAAA,OAAM,kBAAkB,KAAK,IAAK,IAAG,SAAS,YAAY;AAG1D,YAAQ,SAAS;AAAA,MACf,OAAO,SAAS;AAAA,MAChB,cAAc,SAAS;AAAA,MACvB,WAAW,SAAS;AAAA,MACpB,MAAM,SAAS;AAAA,MACf,UAAU,SAAS;AAAA,IACzB,CAAK;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,cAAcA,QAAO,UAAU;AAC7B,IAAAA,OAAM,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,WAAWA,QAAO;AAChB,IAAAA,OAAM,aAAa;AACnB,IAAAA,OAAM,QAAQ;AACd,IAAAA,OAAM,eAAe;AACrB,IAAAA,OAAM,kBAAkB;AACxB,IAAAA,OAAM,WAAW;AAAA,MACf,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,MAAM,CAAE;AAAA,MACR,SAAS;AAAA,MACT,QAAQ;AAAA,QACN,SAAS,EAAE,gBAAgB,CAAA,GAAI,gBAAgB,CAAE,GAAE,WAAW,CAAA,GAAI,WAAW,GAAI;AAAA,QACjF,SAAS,EAAE,gBAAgB,CAAE,GAAE,WAAW,CAAE,GAAE,WAAW,GAAI;AAAA,MAC9D;AAAA,IACP;AAGI,YAAQ,UAAS;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,eAAeA,QAAO,QAAQ;AAC5B,IAAAA,OAAM,eAAe;AAAA,EACtB;AACH;AAEA,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOd,MAAM,MAAM,EAAE,OAAQ,GAAE,aAAa;AACnC,QAAI;AACF,YAAM,WAAW,MAAM,IAAI,MAAM,WAAW;AAC5C,UAAI,SAAS,SAAS;AACpB,cAAM,EAAE,OAAO,cAAc,WAAW,UAAU,KAAM,IAAG,SAAS;AAEpE,eAAO,iBAAiB,IAAI;AAC5B,eAAO,YAAY,IAAI;AACvB,eAAO,YAAY,EAAE,OAAO,cAAc,WAAW,MAAM,SAAQ,CAAE;AACrE,eAAO,iBAAiB,QAAQ;AAEhC,eAAO,EAAE,SAAS,MAAM,SAAS,OAAM;AAAA,MACxC;AACD,aAAO,EAAE,SAAS,OAAO,SAAS,OAAM;AAAA,IACzC,SAAQ,OAAO;AACdD,oBAAc,MAAA,MAAA,SAAA,gCAAA,SAAS,KAAK;AAC5B,aAAO,EAAE,SAAS,OAAO,SAAS,MAAM,WAAW;IACpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,YAAY,EAAE,QAAQ,OAAAC,QAAO,SAAQ,GAAI;AAE7C,QAAIA,OAAM,mBAAmBA,OAAM,kBAAkB,KAAK,QAAQ,KAAK,KAAK,KAAM;AAChF,YAAM,SAAS,cAAc;AAAA,IAC9B;AAED,QAAI;AACF,YAAM,WAAW,MAAM,IAAI,YAAYA,OAAM,KAAK;AAClD,UAAI,SAAS,SAAS;AACpB,eAAO,iBAAiB,SAAS,IAAI;AACrC,eAAO,EAAE,SAAS,MAAM,MAAM,SAAS,KAAI;AAAA,MAC5C;AACD,aAAO,EAAE,SAAS,OAAO,SAAS,WAAU;AAAA,IAC7C,SAAQ,OAAO;AACdD,oBAAc,MAAA,MAAA,SAAA,gCAAA,aAAa,KAAK;AAChC,aAAO,EAAE,SAAS,OAAO,SAAS,MAAM,WAAW;IACpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,aAAa,EAAE,QAAQ,OAAAC,UAAS;AACpC,QAAI,CAACA,OAAM,cAAc;AACvB,aAAO,EAAE,SAAS,OAAO,SAAS,QAAO;AAAA,IAC1C;AAED,QAAI;AACF,YAAM,WAAW,MAAM,IAAI,aAAaA,OAAM,YAAY;AAC1D,UAAI,SAAS,SAAS;AACpB,cAAM,EAAE,OAAO,cAAc,UAAS,IAAK,SAAS;AAGpD,cAAM,eAAe,SAAS,OAAO,KAAK;AAE1C,eAAO,YAAY;AAAA,UACjB;AAAA,UACA;AAAA,UACA,WAAW,gBAAgB,aAAa,MAAM,MAAO,KAAK,SAAS,MAAO;AAAA,UAC1E,MAAMA,OAAM;AAAA,UACZ,UAAUA,OAAM;AAAA,QAC1B,CAAS;AACD,eAAO,EAAE,SAAS,MAAM,SAAS,SAAQ;AAAA,MAC1C;AACD,aAAO,EAAE,SAAS,OAAO,SAAS,SAAQ;AAAA,IAC3C,SAAQ,OAAO;AACdD,yEAAc,WAAW,KAAK;AAC9B,aAAO,YAAY;AACnB,aAAO,EAAE,SAAS,OAAO,SAAS,MAAM,WAAW;IACpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAO,EAAE,UAAU;AACjB,WAAO,YAAY;AACnB,WAAO,EAAE,SAAS,MAAM,SAAS,QAAO;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,iBAAiB,EAAE,OAAAC,QAAO,QAAQ,SAAQ,GAAI;AAClD,QAAI,CAACA,OAAM,OAAO;AAChB,aAAO,YAAY;AACnB,aAAO,EAAE,SAAS,OAAO,SAAS,MAAK;AAAA,IACxC;AAGD,UAAM,eAAe,SAAS,QAAQA,OAAM,KAAK;AAEjD,QAAI,CAAC,gBAAgBA,OAAM,cAAc;AACvC,YAAM,gBAAgB,MAAM,SAAS,cAAc;AACnD,UAAI,CAAC,cAAc,SAAS;AAC1B,eAAO,YAAY;AACnB,eAAO,EAAE,SAAS,OAAO,SAAS,QAAO;AAAA,MAC1C;AAAA,IACP,WAAe,CAAC,cAAc;AACxB,aAAO,YAAY;AACnB,aAAO,EAAE,SAAS,OAAO,SAAS,QAAO;AAAA,IAC1C;AAGD,UAAM,iBAAiB,MAAM,SAAS,aAAa;AACnD,QAAI,eAAe,SAAS;AAC1B,aAAO,EAAE,SAAS,MAAM,SAAS,SAAQ;AAAA,IAC/C,OAAW;AACL,aAAO,YAAY;AACnB,aAAO,EAAE,SAAS,OAAO,SAAS,SAAQ;AAAA,IAC3C;AAAA,EACF;AACH;AAEA,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMd,UAAU,CAAAA,WAASA,OAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzB,WAAW,CAAAA,WAASA,OAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOnC,WAAW,CAAAA,WAASA,OAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOnC,gBAAgB,CAAAA,WAASA,OAAM,SAAS,YAAYA,OAAM,SAAS,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7E,UAAU,CAAAA,WAASA,OAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOlC,YAAY,CAAAA,WAASA,OAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpC,UAAU,CAAAA,WAASA,OAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOlC,6BAA6B,CAAAA,WAASA,OAAM,SAAS,OAAO,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpE,6BAA6B,CAAAA,WAASA,OAAM,SAAS,OAAO,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpE,wBAAwB,CAAAA,WAASA,OAAM,SAAS,OAAO,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/D,wBAAwB,CAAAA,WAASA,OAAM,SAAS,OAAO,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/D,6BAA6B,CAAAA,WAASA,OAAM,SAAS,OAAO,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpE,wBAAwB,CAAAA,WAASA,OAAM,SAAS,OAAO,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/D,wBAAwB,CAAAA,WAASA,OAAM,SAAS,OAAO,QAAQ;AACjE;AAGA,MAAM,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMf,OAAO,OAAO;AACZ,QAAI;AACF,aAAOC,cAAAA,UAAU,KAAK;AAAA,IACvB,SAAQ,OAAO;AACdF,yEAAc,YAAY,KAAK;AAC/B,aAAO;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,QAAQ,OAAO;AACb,QAAI,CAAC;AAAO,aAAO;AAEnB,QAAI;AACF,YAAM,UAAU,KAAK,OAAO,KAAK;AACjC,UAAI,CAAC;AAAS,eAAO;AAGrB,YAAM,cAAc,KAAK,IAAG,IAAK;AACjC,aAAO,QAAQ,MAAM;AAAA,IACtB,SAAQ,OAAO;AACd,aAAO;AAAA,IACR;AAAA,EACF;AACH;AAEA,MAAe,OAAA;AAAA,EACb,YAAY;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;"}