{"version":3,"file":"message.js","sources":["store/modules/message.js"],"sourcesContent":["/**\r\n * @description 消息状态管理模块\r\n */\r\n\r\n// 模拟API请求\r\nconst api = {\r\n  /**\r\n   * @description 获取消息列表\r\n   * @param {Object} params - 请求参数\r\n   * @param {string} params.token - 用户令牌\r\n   * @param {number} params.page - 页码\r\n   * @param {number} params.pageSize - 每页数量\r\n   * @returns {Promise<Object>} 消息列表\r\n   */\r\n  getMessages(params) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const messages = [\r\n          {\r\n            id: 'm1',\r\n            senderId: 'system',\r\n            senderName: '系统通知',\r\n            senderAvatar: 'https://example.com/system.png',\r\n            content: '欢迎使用研师录平台',\r\n            time: Date.now() - 3600000,\r\n            read: false,\r\n            type: 'system'\r\n          },\r\n          {\r\n            id: 'm2',\r\n            senderId: 'teacher1',\r\n            senderName: '王老师',\r\n            senderAvatar: 'https://example.com/teacher1.png',\r\n            content: '您好，关于您的咨询我已回复',\r\n            time: Date.now() - 7200000,\r\n            read: true,\r\n            type: 'chat'\r\n          },\r\n          {\r\n            id: 'm3',\r\n            senderId: 'system',\r\n            senderName: '系统通知',\r\n            senderAvatar: 'https://example.com/system.png',\r\n            content: '您的订单状态已更新',\r\n            time: Date.now() - 10800000,\r\n            read: false,\r\n            type: 'order'\r\n          }\r\n        ];\r\n        \r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            messages: messages,\r\n            unreadCount: messages.filter(m => !m.read).length,\r\n            total: 10,\r\n            page: params.page || 1,\r\n            pageSize: params.pageSize || 10\r\n          }\r\n        });\r\n      }, 500);\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * @description 获取聊天记录\r\n   * @param {Object} params - 请求参数\r\n   * @param {string} params.token - 用户令牌\r\n   * @param {string} params.chatId - 聊天ID\r\n   * @param {number} params.page - 页码\r\n   * @param {number} params.pageSize - 每页数量\r\n   * @returns {Promise<Object>} 聊天记录\r\n   */\r\n  getChatMessages(params) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const chatMessages = [\r\n          {\r\n            id: 'c1',\r\n            senderId: 'teacher1',\r\n            receiverId: 'user1',\r\n            content: '您好，我是王老师，有什么可以帮助您的吗？',\r\n            time: Date.now() - 3600000,\r\n            read: true\r\n          },\r\n          {\r\n            id: 'c2',\r\n            senderId: 'user1',\r\n            receiverId: 'teacher1',\r\n            content: '您好，我想咨询一下关于研究方法的问题',\r\n            time: Date.now() - 3500000,\r\n            read: true\r\n          },\r\n          {\r\n            id: 'c3',\r\n            senderId: 'teacher1',\r\n            receiverId: 'user1',\r\n            content: '好的，请问您具体想了解哪方面的内容？',\r\n            time: Date.now() - 3400000,\r\n            read: true\r\n          },\r\n          {\r\n            id: 'c4',\r\n            senderId: 'user1',\r\n            receiverId: 'teacher1',\r\n            content: '我想了解定性研究与定量研究的区别',\r\n            time: Date.now() - 3300000,\r\n            read: true\r\n          },\r\n          {\r\n            id: 'c5',\r\n            senderId: 'teacher1',\r\n            receiverId: 'user1',\r\n            content: '定性研究主要关注非数字数据，如文本、图像等，通过观察和解释来理解现象；而定量研究主要关注数字数据，通过统计和数学分析来验证假设。',\r\n            time: Date.now() - 3200000,\r\n            read: false\r\n          }\r\n        ];\r\n        \r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            chatId: params.chatId,\r\n            messages: chatMessages,\r\n            unreadCount: chatMessages.filter(m => !m.read && m.senderId !== 'user1').length,\r\n            total: 20,\r\n            page: params.page || 1,\r\n            pageSize: params.pageSize || 10\r\n          }\r\n        });\r\n      }, 500);\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * @description 获取聊天列表\r\n   * @param {Object} params - 请求参数\r\n   * @param {string} params.token - 用户令牌\r\n   * @returns {Promise<Object>} 聊天列表\r\n   */\r\n  getChatList(params) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const chatList = [\r\n          {\r\n            id: 'chat1',\r\n            targetId: 'teacher1',\r\n            targetName: '王老师',\r\n            targetAvatar: 'https://example.com/teacher1.png',\r\n            lastMessage: '定性研究主要关注非数字数据，如文本、图像等，通过观察和解释来理解现象；而定量研究主要关注数字数据，通过统计和数学分析来验证假设。',\r\n            lastTime: Date.now() - 3200000,\r\n            unreadCount: 1\r\n          },\r\n          {\r\n            id: 'chat2',\r\n            targetId: 'teacher2',\r\n            targetName: '李老师',\r\n            targetAvatar: 'https://example.com/teacher2.png',\r\n            lastMessage: '好的，请将您的论文发给我，我会尽快进行审阅。',\r\n            lastTime: Date.now() - 86400000,\r\n            unreadCount: 0\r\n          },\r\n          {\r\n            id: 'chat3',\r\n            targetId: 'system',\r\n            targetName: '系统通知',\r\n            targetAvatar: 'https://example.com/system.png',\r\n            lastMessage: '您的订单状态已更新',\r\n            lastTime: Date.now() - 172800000,\r\n            unreadCount: 1\r\n          }\r\n        ];\r\n        \r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            chatList: chatList,\r\n            totalUnread: chatList.reduce((sum, chat) => sum + chat.unreadCount, 0)\r\n          }\r\n        });\r\n      }, 500);\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * @description 发送消息\r\n   * @param {Object} params - 请求参数\r\n   * @param {string} params.token - 用户令牌\r\n   * @param {string} params.chatId - 聊天ID\r\n   * @param {string} params.receiverId - 接收者ID\r\n   * @param {string} params.content - 消息内容\r\n   * @returns {Promise<Object>} 发送结果\r\n   */\r\n  sendMessage(params) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            id: `msg_${Date.now()}`,\r\n            senderId: 'user1',\r\n            receiverId: params.receiverId,\r\n            content: params.content,\r\n            time: Date.now(),\r\n            read: false,\r\n            chatId: params.chatId\r\n          }\r\n        });\r\n      }, 300);\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * @description 标记消息已读\r\n   * @param {Object} params - 请求参数\r\n   * @param {string} params.token - 用户令牌\r\n   * @param {string} params.messageId - 消息ID\r\n   * @returns {Promise<Object>} 标记结果\r\n   */\r\n  markMessageRead(params) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            id: params.messageId,\r\n            read: true,\r\n            readTime: Date.now()\r\n          }\r\n        });\r\n      }, 200);\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * @description 标记所有消息已读\r\n   * @param {Object} params - 请求参数\r\n   * @param {string} params.token - 用户令牌\r\n   * @param {string} params.chatId - 聊天ID\r\n   * @returns {Promise<Object>} 标记结果\r\n   */\r\n  markAllMessagesRead(params) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            chatId: params.chatId,\r\n            readTime: Date.now()\r\n          }\r\n        });\r\n      }, 300);\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * @description 删除消息\r\n   * @param {Object} params - 请求参数\r\n   * @param {string} params.token - 用户令牌\r\n   * @param {string} params.messageId - 消息ID\r\n   * @returns {Promise<Object>} 删除结果\r\n   */\r\n  deleteMessage(params) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            id: params.messageId,\r\n            deleted: true,\r\n            deleteTime: Date.now()\r\n          }\r\n        });\r\n      }, 300);\r\n    });\r\n  }\r\n};\r\n\r\n// 初始状态\r\nconst state = {\r\n  notifications: {\r\n    messages: [],\r\n    unreadCount: 0,\r\n    total: 0,\r\n    page: 1,\r\n    pageSize: 10,\r\n    loading: false\r\n  },\r\n  chats: {\r\n    list: [],\r\n    totalUnread: 0,\r\n    loading: false\r\n  },\r\n  currentChat: {\r\n    id: null,\r\n    targetId: null,\r\n    targetName: null,\r\n    targetAvatar: null,\r\n    messages: [],\r\n    unreadCount: 0,\r\n    total: 0,\r\n    page: 1,\r\n    pageSize: 10,\r\n    loading: false\r\n  },\r\n  error: null\r\n};\r\n\r\n// Mutations\r\nconst mutations = {\r\n  /**\r\n   * @description 设置通知消息列表\r\n   * @param {Object} state - Vuex状态\r\n   * @param {Object} payload - 载荷\r\n   */\r\n  SET_NOTIFICATIONS(state, payload) {\r\n    state.notifications.messages = payload.messages;\r\n    state.notifications.unreadCount = payload.unreadCount;\r\n    state.notifications.total = payload.total;\r\n    state.notifications.page = payload.page;\r\n    state.notifications.pageSize = payload.pageSize;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置通知加载状态\r\n   * @param {Object} state - Vuex状态\r\n   * @param {boolean} loading - 是否加载中\r\n   */\r\n  SET_NOTIFICATIONS_LOADING(state, loading) {\r\n    state.notifications.loading = loading;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置聊天列表\r\n   * @param {Object} state - Vuex状态\r\n   * @param {Object} payload - 载荷\r\n   */\r\n  SET_CHAT_LIST(state, payload) {\r\n    state.chats.list = payload.chatList;\r\n    state.chats.totalUnread = payload.totalUnread;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置聊天列表加载状态\r\n   * @param {Object} state - Vuex状态\r\n   * @param {boolean} loading - 是否加载中\r\n   */\r\n  SET_CHAT_LIST_LOADING(state, loading) {\r\n    state.chats.loading = loading;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置当前聊天\r\n   * @param {Object} state - Vuex状态\r\n   * @param {Object} payload - 载荷\r\n   */\r\n  SET_CURRENT_CHAT(state, payload) {\r\n    if (payload.chatId) {\r\n      state.currentChat.id = payload.chatId;\r\n    }\r\n    if (payload.targetId) {\r\n      state.currentChat.targetId = payload.targetId;\r\n    }\r\n    if (payload.targetName) {\r\n      state.currentChat.targetName = payload.targetName;\r\n    }\r\n    if (payload.targetAvatar) {\r\n      state.currentChat.targetAvatar = payload.targetAvatar;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 设置当前聊天消息\r\n   * @param {Object} state - Vuex状态\r\n   * @param {Object} payload - 载荷\r\n   */\r\n  SET_CURRENT_CHAT_MESSAGES(state, payload) {\r\n    state.currentChat.messages = payload.messages;\r\n    state.currentChat.unreadCount = payload.unreadCount;\r\n    state.currentChat.total = payload.total;\r\n    state.currentChat.page = payload.page;\r\n    state.currentChat.pageSize = payload.pageSize;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置当前聊天加载状态\r\n   * @param {Object} state - Vuex状态\r\n   * @param {boolean} loading - 是否加载中\r\n   */\r\n  SET_CURRENT_CHAT_LOADING(state, loading) {\r\n    state.currentChat.loading = loading;\r\n  },\r\n  \r\n  /**\r\n   * @description 添加消息到当前聊天\r\n   * @param {Object} state - Vuex状态\r\n   * @param {Object} message - 消息对象\r\n   */\r\n  ADD_MESSAGE_TO_CURRENT_CHAT(state, message) {\r\n    state.currentChat.messages.push(message);\r\n  },\r\n  \r\n  /**\r\n   * @description 更新聊天列表中的最后一条消息\r\n   * @param {Object} state - Vuex状态\r\n   * @param {Object} payload - 载荷\r\n   */\r\n  UPDATE_CHAT_LAST_MESSAGE(state, { chatId, message, time }) {\r\n    const chatIndex = state.chats.list.findIndex(chat => chat.id === chatId);\r\n    if (chatIndex !== -1) {\r\n      state.chats.list[chatIndex].lastMessage = message;\r\n      state.chats.list[chatIndex].lastTime = time;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 标记消息已读\r\n   * @param {Object} state - Vuex状态\r\n   * @param {string} messageId - 消息ID\r\n   */\r\n  MARK_MESSAGE_READ(state, messageId) {\r\n    // 在通知中标记已读\r\n    const notificationIndex = state.notifications.messages.findIndex(msg => msg.id === messageId);\r\n    if (notificationIndex !== -1) {\r\n      state.notifications.messages[notificationIndex].read = true;\r\n      state.notifications.unreadCount = Math.max(0, state.notifications.unreadCount - 1);\r\n    }\r\n    \r\n    // 在当前聊天中标记已读\r\n    const messageIndex = state.currentChat.messages.findIndex(msg => msg.id === messageId);\r\n    if (messageIndex !== -1) {\r\n      state.currentChat.messages[messageIndex].read = true;\r\n      state.currentChat.unreadCount = Math.max(0, state.currentChat.unreadCount - 1);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 标记聊天中所有消息已读\r\n   * @param {Object} state - Vuex状态\r\n   * @param {string} chatId - 聊天ID\r\n   */\r\n  MARK_CHAT_READ(state, chatId) {\r\n    // 更新聊天列表中的未读数\r\n    const chatIndex = state.chats.list.findIndex(chat => chat.id === chatId);\r\n    if (chatIndex !== -1) {\r\n      const unreadCount = state.chats.list[chatIndex].unreadCount;\r\n      state.chats.list[chatIndex].unreadCount = 0;\r\n      state.chats.totalUnread = Math.max(0, state.chats.totalUnread - unreadCount);\r\n    }\r\n    \r\n    // 更新当前聊天未读数\r\n    if (state.currentChat.id === chatId) {\r\n      state.currentChat.messages.forEach(msg => {\r\n        if (!msg.read && msg.senderId !== 'user1') {\r\n          msg.read = true;\r\n        }\r\n      });\r\n      state.currentChat.unreadCount = 0;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 删除消息\r\n   * @param {Object} state - Vuex状态\r\n   * @param {string} messageId - 消息ID\r\n   */\r\n  DELETE_MESSAGE(state, messageId) {\r\n    // 从通知中删除\r\n    state.notifications.messages = state.notifications.messages.filter(msg => msg.id !== messageId);\r\n    \r\n    // 从当前聊天中删除\r\n    state.currentChat.messages = state.currentChat.messages.filter(msg => msg.id !== messageId);\r\n  },\r\n  \r\n  /**\r\n   * @description 设置错误信息\r\n   * @param {Object} state - Vuex状态\r\n   * @param {string|Object|null} error - 错误信息\r\n   */\r\n  SET_ERROR(state, error) {\r\n    state.error = error;\r\n  }\r\n};\r\n\r\n// Actions\r\nconst actions = {\r\n  /**\r\n   * @description 获取通知消息列表\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} params - 请求参数\r\n   * @param {number} params.page - 页码\r\n   * @param {number} params.pageSize - 每页数量\r\n   * @returns {Promise<Object>} 获取结果\r\n   */\r\n  async getNotifications({ commit, rootState }, { page = 1, pageSize = 10 } = {}) {\r\n    try {\r\n      commit('SET_NOTIFICATIONS_LOADING', true);\r\n      commit('SET_ERROR', null);\r\n      \r\n      const token = rootState.auth.token;\r\n      const response = await api.getMessages({ token, page, pageSize });\r\n      \r\n      if (response.success) {\r\n        commit('SET_NOTIFICATIONS', {\r\n          messages: response.data.messages,\r\n          unreadCount: response.data.unreadCount,\r\n          total: response.data.total,\r\n          page: response.data.page,\r\n          pageSize: response.data.pageSize\r\n        });\r\n        commit('SET_NOTIFICATIONS_LOADING', false);\r\n        return { success: true, data: response.data };\r\n      }\r\n      \r\n      commit('SET_NOTIFICATIONS_LOADING', false);\r\n      commit('SET_ERROR', '获取通知消息失败');\r\n      return { success: false, message: '获取通知消息失败' };\r\n    } catch (error) {\r\n      commit('SET_NOTIFICATIONS_LOADING', false);\r\n      commit('SET_ERROR', error.message || '获取通知消息失败');\r\n      return { success: false, message: error.message || '获取通知消息失败' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 获取聊天列表\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object>} 获取结果\r\n   */\r\n  async getChatList({ commit, rootState }) {\r\n    try {\r\n      commit('SET_CHAT_LIST_LOADING', true);\r\n      commit('SET_ERROR', null);\r\n      \r\n      const token = rootState.auth.token;\r\n      const response = await api.getChatList({ token });\r\n      \r\n      if (response.success) {\r\n        commit('SET_CHAT_LIST', {\r\n          chatList: response.data.chatList,\r\n          totalUnread: response.data.totalUnread\r\n        });\r\n        commit('SET_CHAT_LIST_LOADING', false);\r\n        return { success: true, data: response.data };\r\n      }\r\n      \r\n      commit('SET_CHAT_LIST_LOADING', false);\r\n      commit('SET_ERROR', '获取聊天列表失败');\r\n      return { success: false, message: '获取聊天列表失败' };\r\n    } catch (error) {\r\n      commit('SET_CHAT_LIST_LOADING', false);\r\n      commit('SET_ERROR', error.message || '获取聊天列表失败');\r\n      return { success: false, message: error.message || '获取聊天列表失败' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 获取聊天消息\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} params - 请求参数\r\n   * @param {string} params.chatId - 聊天ID\r\n   * @param {number} params.page - 页码\r\n   * @param {number} params.pageSize - 每页数量\r\n   * @returns {Promise<Object>} 获取结果\r\n   */\r\n  async getChatMessages({ commit, rootState }, { chatId, page = 1, pageSize = 10 }) {\r\n    try {\r\n      commit('SET_CURRENT_CHAT_LOADING', true);\r\n      commit('SET_ERROR', null);\r\n      \r\n      const token = rootState.auth.token;\r\n      const response = await api.getChatMessages({ token, chatId, page, pageSize });\r\n      \r\n      if (response.success) {\r\n        commit('SET_CURRENT_CHAT_MESSAGES', {\r\n          messages: response.data.messages,\r\n          unreadCount: response.data.unreadCount,\r\n          total: response.data.total,\r\n          page: response.data.page,\r\n          pageSize: response.data.pageSize\r\n        });\r\n        commit('SET_CURRENT_CHAT_LOADING', false);\r\n        \r\n        // 自动标记为已读\r\n        if (response.data.unreadCount > 0) {\r\n          dispatch('markChatRead', chatId);\r\n        }\r\n        \r\n        return { success: true, data: response.data };\r\n      }\r\n      \r\n      commit('SET_CURRENT_CHAT_LOADING', false);\r\n      commit('SET_ERROR', '获取聊天消息失败');\r\n      return { success: false, message: '获取聊天消息失败' };\r\n    } catch (error) {\r\n      commit('SET_CURRENT_CHAT_LOADING', false);\r\n      commit('SET_ERROR', error.message || '获取聊天消息失败');\r\n      return { success: false, message: error.message || '获取聊天消息失败' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 设置当前聊天\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} chatInfo - 聊天信息\r\n   * @returns {Promise<Object>} 设置结果\r\n   */\r\n  async setCurrentChat({ commit, dispatch }, chatInfo) {\r\n    try {\r\n      commit('SET_CURRENT_CHAT', chatInfo);\r\n      \r\n      // 获取聊天消息\r\n      if (chatInfo.chatId) {\r\n        await dispatch('getChatMessages', { chatId: chatInfo.chatId });\r\n      }\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      commit('SET_ERROR', error.message || '设置当前聊天失败');\r\n      return { success: false, message: error.message || '设置当前聊天失败' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 发送消息\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} params - 请求参数\r\n   * @param {string} params.chatId - 聊天ID\r\n   * @param {string} params.receiverId - 接收者ID\r\n   * @param {string} params.content - 消息内容\r\n   * @returns {Promise<Object>} 发送结果\r\n   */\r\n  async sendMessage({ commit, rootState, state }, { chatId, receiverId, content }) {\r\n    try {\r\n      commit('SET_ERROR', null);\r\n      \r\n      const token = rootState.auth.token;\r\n      const response = await api.sendMessage({ token, chatId, receiverId, content });\r\n      \r\n      if (response.success) {\r\n        // 添加消息到当前聊天\r\n        commit('ADD_MESSAGE_TO_CURRENT_CHAT', response.data);\r\n        \r\n        // 更新聊天列表中的最后一条消息\r\n        commit('UPDATE_CHAT_LAST_MESSAGE', {\r\n          chatId,\r\n          message: content,\r\n          time: response.data.time\r\n        });\r\n        \r\n        return { success: true, data: response.data };\r\n      }\r\n      \r\n      commit('SET_ERROR', '发送消息失败');\r\n      return { success: false, message: '发送消息失败' };\r\n    } catch (error) {\r\n      commit('SET_ERROR', error.message || '发送消息失败');\r\n      return { success: false, message: error.message || '发送消息失败' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 标记消息已读\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string} messageId - 消息ID\r\n   * @returns {Promise<Object>} 标记结果\r\n   */\r\n  async markMessageRead({ commit, rootState }, messageId) {\r\n    try {\r\n      commit('SET_ERROR', null);\r\n      \r\n      const token = rootState.auth.token;\r\n      const response = await api.markMessageRead({ token, messageId });\r\n      \r\n      if (response.success) {\r\n        commit('MARK_MESSAGE_READ', messageId);\r\n        return { success: true, data: response.data };\r\n      }\r\n      \r\n      commit('SET_ERROR', '标记消息已读失败');\r\n      return { success: false, message: '标记消息已读失败' };\r\n    } catch (error) {\r\n      commit('SET_ERROR', error.message || '标记消息已读失败');\r\n      return { success: false, message: error.message || '标记消息已读失败' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 标记聊天中所有消息已读\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string} chatId - 聊天ID\r\n   * @returns {Promise<Object>} 标记结果\r\n   */\r\n  async markChatRead({ commit, rootState }, chatId) {\r\n    try {\r\n      commit('SET_ERROR', null);\r\n      \r\n      const token = rootState.auth.token;\r\n      const response = await api.markAllMessagesRead({ token, chatId });\r\n      \r\n      if (response.success) {\r\n        commit('MARK_CHAT_READ', chatId);\r\n        return { success: true, data: response.data };\r\n      }\r\n      \r\n      commit('SET_ERROR', '标记聊天已读失败');\r\n      return { success: false, message: '标记聊天已读失败' };\r\n    } catch (error) {\r\n      commit('SET_ERROR', error.message || '标记聊天已读失败');\r\n      return { success: false, message: error.message || '标记聊天已读失败' };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 删除消息\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string} messageId - 消息ID\r\n   * @returns {Promise<Object>} 删除结果\r\n   */\r\n  async deleteMessage({ commit, rootState }, messageId) {\r\n    try {\r\n      commit('SET_ERROR', null);\r\n      \r\n      const token = rootState.auth.token;\r\n      const response = await api.deleteMessage({ token, messageId });\r\n      \r\n      if (response.success) {\r\n        commit('DELETE_MESSAGE', messageId);\r\n        return { success: true, data: response.data };\r\n      }\r\n      \r\n      commit('SET_ERROR', '删除消息失败');\r\n      return { success: false, message: '删除消息失败' };\r\n    } catch (error) {\r\n      commit('SET_ERROR', error.message || '删除消息失败');\r\n      return { success: false, message: error.message || '删除消息失败' };\r\n    }\r\n  }\r\n};\r\n\r\n// Getters\r\nconst getters = {\r\n  /**\r\n   * @description 获取通知消息列表\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 通知消息列表\r\n   */\r\n  notifications: state => state.notifications.messages,\r\n  \r\n  /**\r\n   * @description 获取通知未读数\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {number} 通知未读数\r\n   */\r\n  notificationsUnreadCount: state => state.notifications.unreadCount,\r\n  \r\n  /**\r\n   * @description 获取通知加载状态\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {boolean} 是否加载中\r\n   */\r\n  notificationsLoading: state => state.notifications.loading,\r\n  \r\n  /**\r\n   * @description 获取聊天列表\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 聊天列表\r\n   */\r\n  chatList: state => state.chats.list,\r\n  \r\n  /**\r\n   * @description 获取聊天列表未读总数\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {number} 未读总数\r\n   */\r\n  chatTotalUnread: state => state.chats.totalUnread,\r\n  \r\n  /**\r\n   * @description 获取聊天列表加载状态\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {boolean} 是否加载中\r\n   */\r\n  chatListLoading: state => state.chats.loading,\r\n  \r\n  /**\r\n   * @description 获取当前聊天ID\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {string|null} 聊天ID\r\n   */\r\n  currentChatId: state => state.currentChat.id,\r\n  \r\n  /**\r\n   * @description 获取当前聊天目标用户ID\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {string|null} 目标用户ID\r\n   */\r\n  currentChatTargetId: state => state.currentChat.targetId,\r\n  \r\n  /**\r\n   * @description 获取当前聊天目标用户名\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {string|null} 目标用户名\r\n   */\r\n  currentChatTargetName: state => state.currentChat.targetName,\r\n  \r\n  /**\r\n   * @description 获取当前聊天目标用户头像\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {string|null} 目标用户头像\r\n   */\r\n  currentChatTargetAvatar: state => state.currentChat.targetAvatar,\r\n  \r\n  /**\r\n   * @description 获取当前聊天消息列表\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 消息列表\r\n   */\r\n  currentChatMessages: state => state.currentChat.messages,\r\n  \r\n  /**\r\n   * @description 获取当前聊天加载状态\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {boolean} 是否加载中\r\n   */\r\n  currentChatLoading: state => state.currentChat.loading,\r\n  \r\n  /**\r\n   * @description 获取错误信息\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {string|Object|null} 错误信息\r\n   */\r\n  error: state => state.error,\r\n  \r\n  /**\r\n   * @description 获取系统消息\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 系统消息列表\r\n   */\r\n  systemMessages: state => state.notifications.messages.filter(msg => msg.type === 'system'),\r\n  \r\n  /**\r\n   * @description 获取订单消息\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 订单消息列表\r\n   */\r\n  orderMessages: state => state.notifications.messages.filter(msg => msg.type === 'order'),\r\n  \r\n  /**\r\n   * @description 获取聊天消息\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {Array} 聊天消息列表\r\n   */\r\n  chatMessages: state => state.notifications.messages.filter(msg => msg.type === 'chat'),\r\n  \r\n  /**\r\n   * @description 获取总的未读消息数\r\n   * @param {Object} state - Vuex状态\r\n   * @returns {number} 总的未读消息数\r\n   */\r\n  totalUnread: state => state.notifications.unreadCount + state.chats.totalUnread\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters\r\n}; "],"names":["state","message","dispatch"],"mappings":"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"}