{"version":3,"file":"user.js","sources":["store/modules/common/user.js"],"sourcesContent":["/**\n * @description 用户模块 - 处理用户基本信息\n */\nimport { services } from '../../services';\n\n/**\n * @description 检查是否使用模拟数据\n * @returns {Boolean} 是否使用模拟数据\n */\nconst isUsingMockData = () => {\n  return uni.getStorageSync('use_mock_api') === 'true' || process.env.NODE_ENV === 'development';\n};\n\n// 初始状态\nconst state = {\n  profile: {\n    avatar: '',         // 用户头像\n    nickname: '',       // 昵称\n    tags: [],           // 标签\n    certTag: '',        // 教师认证标签\n    otherTags: [],      // 教师其他标签\n    introduction: '',   // 个人介绍\n    gender: '',         // 性别\n    phone: '',          // 手机号\n    wechat: '',         // 微信号\n    password: '未设置'    // 密码状态\n  },\n  role: null,           // 用户角色\n  loading: false,\n  error: null,\n  updateLoading: false,\n  updateError: null,\n  mockMode: isUsingMockData()\n};\n\n// Getters\nconst getters = {\n  profile: state => state.profile,\n  isProfileLoaded: state => !!state.profile.nickname,\n  loading: state => state.loading,\n  error: state => state.error,\n  updateLoading: state => state.updateLoading,\n  updateError: state => state.updateError,\n  isMockMode: state => state.mockMode || isUsingMockData(),\n  \n  // 基本信息getters\n  avatar: state => state.profile.avatar || '',\n  nickname: state => state.profile.nickname || '',\n  tags: state => state.profile.tags || [],\n  introduction: state => state.profile.introduction || '',\n  gender: state => state.profile.gender || '',\n  phone: state => state.profile.phone || '',\n  wechat: state => state.profile.wechat || '',\n  password: state => state.profile.password || '未设置',\n  \n  // 标签相关getters\n  teacherCertTag: (state, getters) => {\n    if (getters.isTeacher) {\n      return state.profile.certTag || \n             (state.profile.tags && state.profile.tags.length > 0 ? state.profile.tags[0] : '');\n    }\n    return '';\n  },\n  \n  teacherOtherTags: (state, getters) => {\n    if (getters.isTeacher) {\n      return state.profile.otherTags && state.profile.otherTags.length > 0 ? \n             state.profile.otherTags : \n             (state.profile.tags && state.profile.tags.length > 1 ? state.profile.tags.slice(1) : []);\n    }\n    return [];\n  },\n  \n  studentTags: (state, getters) => {\n    if (getters.isStudent && state.profile.tags) {\n      return state.profile.tags;\n    }\n    return [];\n  },\n  \n  // 角色相关getters\n  isTeacher: (state, getters, rootState) => {\n    return state.role === 'teacher' || rootState.auth?.role === 'teacher';\n  },\n  isStudent: (state, getters, rootState) => {\n    return state.role === 'student' || rootState.auth?.role === 'student';\n  },\n  userRole: (state, getters, rootState) => state.role || rootState.auth?.role || ''\n};\n\n// 常量类型\nconst FETCH_PROFILE_REQUEST = 'FETCH_PROFILE_REQUEST';\nconst FETCH_PROFILE_SUCCESS = 'FETCH_PROFILE_SUCCESS';\nconst FETCH_PROFILE_FAILURE = 'FETCH_PROFILE_FAILURE';\nconst UPDATE_PROFILE_REQUEST = 'UPDATE_PROFILE_REQUEST';\nconst UPDATE_PROFILE_SUCCESS = 'UPDATE_PROFILE_SUCCESS';\nconst UPDATE_PROFILE_FAILURE = 'UPDATE_PROFILE_FAILURE';\nconst CLEAR_PROFILE = 'CLEAR_PROFILE';\nconst SET_USER_ROLE = 'SET_USER_ROLE';\n\n// Mutations\nconst mutations = {\n  [FETCH_PROFILE_REQUEST](state) {\n    state.loading = true;\n    state.error = null;\n  },\n  [FETCH_PROFILE_SUCCESS](state, profile) {\n    let certTag = '';\n    let otherTags = [];\n    \n    if (state.role === 'teacher' && profile.tags && profile.tags.length > 0) {\n      certTag = profile.certTag || profile.tags[0];\n      otherTags = profile.otherTags || (profile.tags.length > 1 ? profile.tags.slice(1) : []);\n    }\n    \n    state.profile = {\n      ...state.profile,\n      avatar: profile.avatar || state.profile.avatar,\n      nickname: profile.nickname || profile.name || state.profile.nickname,\n      tags: profile.tags || state.profile.tags,\n      certTag: certTag,\n      otherTags: otherTags,\n      introduction: profile.introduction || state.profile.introduction,\n      gender: profile.gender || state.profile.gender,\n      phone: profile.phone || state.profile.phone,\n      wechat: profile.wechat || state.profile.wechat,\n      password: profile.hasPassword ? '已设置' : '未设置'\n    };\n    state.loading = false;\n    state.error = null;\n  },\n  [FETCH_PROFILE_FAILURE](state, error) {\n    state.loading = false;\n    state.error = error;\n  },\n  [UPDATE_PROFILE_REQUEST](state) {\n    state.updateLoading = true;\n    state.updateError = null;\n  },\n  [UPDATE_PROFILE_SUCCESS](state, profile) {\n    state.profile = { \n      ...state.profile, \n      ...profile,\n      password: profile.hasPassword ? '已设置' : '未设置'\n    };\n    state.updateLoading = false;\n    state.updateError = null;\n  },\n  [UPDATE_PROFILE_FAILURE](state, error) {\n    state.updateLoading = false;\n    state.updateError = error;\n  },\n  [CLEAR_PROFILE](state) {\n    state.profile = {\n      avatar: '',\n      nickname: '',\n      tags: [],\n      introduction: '',\n      gender: '',\n      phone: '',\n      wechat: '',\n      password: '未设置'\n    };\n    state.role = null;\n  },\n  [SET_USER_ROLE](state, role) {\n    state.role = role;\n  }\n};\n\n// 获取用户角色的辅助函数\nconst getUserRole = (state, rootState) => {\n  let role = uni.getStorageSync('userRole');\n  if (!role) {\n    role = rootState.auth?.role || 'student';\n  }\n  return role;\n};\n\n// Actions\nconst actions = {\n  /**\n   * @description 获取用户个人资料\n   * @param {Object} context - Vuex上下文\n   * @returns {Promise<Object>} 个人资料\n   */\n  async fetchProfile({ commit, rootState }) {\n    commit(FETCH_PROFILE_REQUEST);\n    \n    try {\n      const role = getUserRole(null, rootState);\n      commit(SET_USER_ROLE, role);\n      \n      const response = await services.user.getUserProfile(role);\n      commit(FETCH_PROFILE_SUCCESS, response.data);\n      return response.data;\n    } catch (error) {\n      commit(FETCH_PROFILE_FAILURE, error.response?.data?.message || '获取个人资料失败');\n      return Promise.reject(error);\n    }\n  },\n  \n  /**\n   * @description 更新用户个人资料\n   * @param {Object} context - Vuex上下文\n   * @param {Object} profileData - 个人资料数据\n   * @returns {Promise<Object>} 更新结果\n   */\n  async updateProfile({ commit, state, rootState }, profileData) {\n    commit(UPDATE_PROFILE_REQUEST);\n    \n    try {\n      const role = getUserRole(state, rootState);\n      commit(SET_USER_ROLE, role);\n      \n      const response = await services.user.updateUserProfile(role, profileData);\n      commit(UPDATE_PROFILE_SUCCESS, response.data);\n      return response.data;\n    } catch (error) {\n      commit(UPDATE_PROFILE_FAILURE, error.response?.data?.message || '更新个人资料失败');\n      return Promise.reject(error);\n    }\n  },\n  \n  /**\n   * @description 清除用户个人资料\n   * @param {Object} context - Vuex上下文\n   */\n  clearProfile({ commit }) {\n    commit(CLEAR_PROFILE);\n  },\n  \n  /**\n   * @description 设置密码\n   * @param {Object} context - Vuex上下文\n   * @param {Object} passwordData - 密码数据\n   * @returns {Promise<Object>} 设置结果\n   */\n  async setPassword({ commit, state, rootState }, passwordData) {\n    commit(UPDATE_PROFILE_REQUEST);\n    \n    try {\n      const role = getUserRole(state, rootState);\n      \n      const response = await services.user.setUserPassword(role, passwordData);\n      commit(UPDATE_PROFILE_SUCCESS, { hasPassword: true });\n      return response.data;\n    } catch (error) {\n      commit(UPDATE_PROFILE_FAILURE, error.response?.data?.message || '设置密码失败');\n      return Promise.reject(error);\n    }\n  },\n  \n  /**\n   * @description 切换用户角色\n   * @param {Object} context - Vuex上下文\n   * @param {String} newRole - 新角色\n   * @returns {Promise<Object>} 切换结果\n   */\n  async switchRole({ commit, dispatch, rootState }, newRole) {\n    if (newRole !== 'teacher' && newRole !== 'student') {\n      return Promise.reject(new Error('无效的角色'));\n    }\n    \n    try {\n      const currentRole = getUserRole(null, rootState);\n      \n      const response = await services.user.switchUserRole(currentRole, newRole);\n      \n      uni.setStorageSync('userRole', newRole);\n      commit(SET_USER_ROLE, newRole);\n      \n      await dispatch('fetchProfile');\n      \n      return response.data;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  },\n  \n  /**\n   * @description 更新教师认证标签\n   * @param {Object} context - Vuex上下文\n   * @param {String} certTag - 认证标签\n   * @returns {Promise<Object>} 更新结果\n   */\n  async updateTeacherCertTag({ state, dispatch }, certTag) {\n    if (state.role !== 'teacher') {\n      return Promise.reject(new Error('只有教师可以设置认证标签'));\n    }\n    \n    try {\n      const profileData = {\n        certTag: certTag,\n        otherTags: state.profile.otherTags || \n                  (state.profile.tags && state.profile.tags.length > 1 ? \n                   state.profile.tags.slice(1) : [])\n      };\n      \n      return await dispatch('updateProfile', profileData);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  },\n  \n  /**\n   * @description 更新教师其他标签\n   * @param {Object} context - Vuex上下文\n   * @param {Array} otherTags - 其他标签数组\n   * @returns {Promise<Object>} 更新结果\n   */\n  async updateTeacherOtherTags({ state, dispatch }, otherTags) {\n    if (state.role !== 'teacher') {\n      return Promise.reject(new Error('只有教师可以设置其他标签'));\n    }\n    \n    try {\n      const profileData = {\n        certTag: state.profile.certTag || \n                (state.profile.tags && state.profile.tags.length > 0 ? \n                 state.profile.tags[0] : ''),\n        otherTags: otherTags\n      };\n      \n      return await dispatch('updateProfile', profileData);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n}; "],"names":["uni","state","getters","services"],"mappings":"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"}