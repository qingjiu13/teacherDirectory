{"version":3,"file":"user.js","sources":["store/modules/common/user.js"],"sourcesContent":["/**\n * @description 用户模块 - 处理用户基本信息（老师和学生共用）\n */\nimport { services } from '../../services';\n\n/**\n * @description 检查是否使用模拟数据\n * @returns {Boolean} 是否使用模拟数据\n * \n * TODO: 将来替换为真实API时，可以直接删除此方法，\n * 或者始终返回false\n */\nconst isUsingMockData = () => {\n  // 明确检查本地存储中的设置\n  const storageSetting = uni.getStorageSync('use_mock_api');\n  \n  if (storageSetting === 'true') {\n    console.log('用户模块: 本地存储设置使用模拟数据');\n    return true;\n  }\n  \n  // 如果本地存储没有设置，则使用环境判断\n  return process.env.NODE_ENV === 'development';\n};\n\n// 初始状态\nconst state = {\n  profile: {\n    avatar: '',         // 用户头像\n    nickname: '',       // 昵称\n    tags: [],           // 标签\n    introduction: '',   // 个人介绍\n    gender: '',         // 性别，可以是 'male'/'female'\n    phone: '',          // 手机号\n    wechat: '',         // 微信号\n    password: '未设置'    // 密码状态\n  },\n  role: null,           // 用户角色: 'teacher' 或 'student'\n  loading: false,\n  error: null,\n  updateLoading: false,\n  updateError: null,\n  mockMode: isUsingMockData() // 添加模拟模式状态\n};\n\n// Getters\nconst getters = {\n  profile: state => state.profile,\n  isProfileLoaded: state => !!state.profile.nickname, // 通过昵称判断资料是否加载\n  loading: state => state.loading,\n  error: state => state.error,\n  updateLoading: state => state.updateLoading,\n  updateError: state => state.updateError,\n  \n  /**\n   * @description 判断是否使用模拟数据\n   * @param {Object} state - 当前模块状态\n   * @returns {Boolean} 是否使用模拟数据\n   */\n  isMockMode: state => state.mockMode || isUsingMockData(),\n  \n  // 基本信息getters\n  avatar: state => state.profile.avatar || '',\n  nickname: state => state.profile.nickname || '',\n  tags: state => state.profile.tags || [],\n  introduction: state => state.profile.introduction || '',\n  gender: state => state.profile.gender || '',\n  phone: state => state.profile.phone || '',\n  wechat: state => state.profile.wechat || '',\n  password: state => state.profile.password || '未设置',\n  \n  /**\n   * @description 判断用户是否为老师\n   * @param {Object} state - 当前模块状态\n   * @param {Object} getters - 当前模块的getters\n   * @param {Object} rootState - 根状态\n   * @returns {Boolean} 是否为老师\n   */\n  isTeacher: (state, getters, rootState) => {\n    // 优先使用本模块存储的角色信息，如果没有则从rootState获取\n    return state.role === 'teacher' || rootState.auth?.role === 'teacher';\n  },\n  /**\n   * @description 判断用户是否为学生（非老师）\n   * @param {Object} state - 当前模块状态\n   * @param {Object} getters - 当前模块的getters\n   * @param {Object} rootState - 根状态\n   * @returns {Boolean} 是否为学生\n   */\n  isStudent: (state, getters, rootState) => {\n    // 优先使用本模块存储的角色信息，如果没有则从rootState获取\n    return state.role === 'student' || rootState.auth?.role === 'student';\n  },\n  /**\n   * @description 获取用户角色\n   * @param {Object} state - 当前模块状态\n   * @param {Object} getters - 当前模块的getters\n   * @param {Object} rootState - 根状态\n   * @returns {String} 用户角色\n   */\n  userRole: (state, getters, rootState) => state.role || rootState.auth?.role || ''\n};\n\n// 引入常量类型\nconst FETCH_PROFILE_REQUEST = 'FETCH_PROFILE_REQUEST';\nconst FETCH_PROFILE_SUCCESS = 'FETCH_PROFILE_SUCCESS';\nconst FETCH_PROFILE_FAILURE = 'FETCH_PROFILE_FAILURE';\nconst UPDATE_PROFILE_REQUEST = 'UPDATE_PROFILE_REQUEST';\nconst UPDATE_PROFILE_SUCCESS = 'UPDATE_PROFILE_SUCCESS';\nconst UPDATE_PROFILE_FAILURE = 'UPDATE_PROFILE_FAILURE';\nconst CLEAR_PROFILE = 'CLEAR_PROFILE';\nconst SET_USER_ROLE = 'SET_USER_ROLE'; // 新增: 设置用户角色\n\n// Mutations\nconst mutations = {\n  [FETCH_PROFILE_REQUEST](state) {\n    state.loading = true;\n    state.error = null;\n  },\n  [FETCH_PROFILE_SUCCESS](state, profile) {\n    state.profile = {\n      ...state.profile,\n      avatar: profile.avatar || state.profile.avatar,\n      nickname: profile.nickname || profile.name || state.profile.nickname,\n      tags: profile.tags || state.profile.tags,\n      introduction: profile.introduction || state.profile.introduction,\n      gender: profile.gender || state.profile.gender,\n      phone: profile.phone || state.profile.phone,\n      wechat: profile.wechat || state.profile.wechat,\n      password: profile.hasPassword ? '已设置' : '未设置'\n    };\n    state.loading = false;\n    state.error = null;\n  },\n  [FETCH_PROFILE_FAILURE](state, error) {\n    state.loading = false;\n    state.error = error;\n  },\n  [UPDATE_PROFILE_REQUEST](state) {\n    state.updateLoading = true;\n    state.updateError = null;\n  },\n  [UPDATE_PROFILE_SUCCESS](state, profile) {\n    state.profile = { \n      ...state.profile, \n      ...profile,\n      password: profile.hasPassword ? '已设置' : '未设置'\n    };\n    state.updateLoading = false;\n    state.updateError = null;\n  },\n  [UPDATE_PROFILE_FAILURE](state, error) {\n    state.updateLoading = false;\n    state.updateError = error;\n  },\n  [CLEAR_PROFILE](state) {\n    state.profile = {\n      avatar: '',\n      nickname: '',\n      tags: [],\n      introduction: '',\n      gender: '',\n      phone: '',\n      wechat: '',\n      password: '未设置'\n    };\n    state.role = null; // 清除角色信息\n  },\n  /**\n   * @description 设置用户角色\n   * @param {Object} state - 当前模块状态\n   * @param {String} role - 用户角色\n   */\n  [SET_USER_ROLE](state, role) {\n    state.role = role;\n  }\n};\n\n// Actions\nconst actions = {\n  /**\n   * @description 获取用户个人资料\n   * @param {Object} context - Vuex上下文\n   * @returns {Promise<Object>} 个人资料\n   */\n  async fetchProfile({ commit, rootState }) {\n    commit(FETCH_PROFILE_REQUEST);\n    \n    try {\n      // 优先从本地存储获取用户角色，如果没有再从rootState.auth获取\n      let role = uni.getStorageSync('userRole');\n      if (!role) {\n        role = rootState.auth?.role || 'student'; // 默认为学生角色\n      }\n      \n      console.log('fetchProfile使用的角色:', role);\n      \n      // 同步设置用户角色\n      commit(SET_USER_ROLE, role);\n      \n      // 调用user.api.js中的getUserProfile方法获取用户资料\n      const response = await services.user.getUserProfile(role);\n      \n      commit(FETCH_PROFILE_SUCCESS, response.data);\n      return response.data;\n    } catch (error) {\n      commit(FETCH_PROFILE_FAILURE, error.response?.data?.message || '获取个人资料失败');\n      return Promise.reject(error);\n    }\n  },\n  \n  /**\n   * @description 更新用户个人资料\n   * @param {Object} context - Vuex上下文\n   * @param {Object} profileData - 个人资料数据\n   * @returns {Promise<Object>} 更新结果\n   */\n  async updateProfile({ commit, rootState }, profileData) {\n    commit(UPDATE_PROFILE_REQUEST);\n    \n    try {\n      // 优先从本地存储获取用户角色，如果没有再从rootState.auth获取\n      let role = uni.getStorageSync('userRole');\n      if (!role) {\n        role = rootState.auth?.role || 'student'; // 默认为学生角色\n      }\n      \n      console.log('updateProfile使用的角色:', role);\n      \n      // 同步设置用户角色\n      commit(SET_USER_ROLE, role);\n      \n      // 调用user.api.js中的updateUserProfile方法更新用户资料\n      const response = await services.user.updateUserProfile(role, profileData);\n      \n      commit(UPDATE_PROFILE_SUCCESS, response.data);\n      return response.data;\n    } catch (error) {\n      commit(UPDATE_PROFILE_FAILURE, error.response?.data?.message || '更新个人资料失败');\n      return Promise.reject(error);\n    }\n  },\n  \n  /**\n   * @description 清除用户个人资料（通常在登出时调用）\n   * @param {Object} context - Vuex上下文\n   */\n  clearProfile({ commit }) {\n    commit(CLEAR_PROFILE);\n  },\n  \n  /**\n   * @description 设置密码\n   * @param {Object} context - Vuex上下文\n   * @param {Object} passwordData - 密码数据\n   * @returns {Promise<Object>} 设置结果\n   */\n  async setPassword({ commit, state, rootState }, passwordData) {\n    commit(UPDATE_PROFILE_REQUEST);\n    \n    try {\n      // 优先从本地存储获取用户角色，如果没有再从rootState.auth获取\n      let role = uni.getStorageSync('userRole');\n      if (!role) {\n        role = rootState.auth?.role || 'student'; // 默认为学生角色\n      }\n      \n      console.log('setPassword使用的角色:', role);\n      \n      // 调用user.api.js中的setUserPassword方法设置密码\n      const response = await services.user.setUserPassword(role, passwordData);\n      \n      commit(UPDATE_PROFILE_SUCCESS, { hasPassword: true });\n      return response.data;\n    } catch (error) {\n      commit(UPDATE_PROFILE_FAILURE, error.response?.data?.message || '设置密码失败');\n      return Promise.reject(error);\n    }\n  },\n  \n  /**\n   * @description 切换用户角色\n   * @param {Object} context - Vuex上下文\n   * @param {String} newRole - 新角色\n   * @returns {Promise<Object>} 切换结果\n   */\n  async switchRole({ commit, dispatch, rootState }, newRole) {\n    if (newRole !== 'teacher' && newRole !== 'student') {\n      return Promise.reject(new Error('无效的角色'));\n    }\n    \n    try {\n      // 优先从本地存储获取当前角色，如果没有再从rootState.auth获取\n      let currentRole = uni.getStorageSync('userRole');\n      if (!currentRole) {\n        currentRole = rootState.auth?.role || 'student'; // 默认为学生角色\n      }\n      \n      console.log('从当前角色切换:', currentRole, '到:', newRole);\n      \n      // 获取当前模拟数据设置，确保切换角色后保持一致\n      const useMockData = uni.getStorageSync('use_mock_api') === 'true';\n      console.log('当前模拟数据设置:', useMockData ? '启用' : '禁用');\n      \n      // 调用user.api.js中的switchUserRole方法切换角色\n      const response = await services.user.switchUserRole(currentRole, newRole);\n      \n      // 保存角色到本地存储，以便应用重启后保持状态\n      uni.setStorageSync('userRole', newRole);\n      \n      // 确保模拟数据设置保持不变\n      if (useMockData) {\n        uni.setStorageSync('use_mock_api', 'true');\n      }\n      \n      // 提交状态更新\n      commit(SET_USER_ROLE, newRole);\n      \n      // 刷新用户资料，以获取对应角色的资料\n      await dispatch('fetchProfile');\n      \n      return response.data;\n    } catch (error) {\n      console.error('切换角色失败:', error);\n      return Promise.reject(error);\n    }\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n}; "],"names":["uni","state","getters","services"],"mappings":";;;AAYA,MAAM,kBAAkB,MAAM;AAEtB,QAAA,iBAAiBA,cAAAA,MAAI,eAAe,cAAc;AAExD,MAAI,mBAAmB,QAAQ;AACjBA,kBAAAA,MAAA,MAAA,OAAA,sCAAA,oBAAoB;AACzB,WAAA;AAAA,EACT;AAGO,SAAA;AACT;AAGA,MAAM,QAAQ;AAAA,EACZ,SAAS;AAAA,IACP,QAAQ;AAAA;AAAA,IACR,UAAU;AAAA;AAAA,IACV,MAAM,CAAC;AAAA;AAAA,IACP,cAAc;AAAA;AAAA,IACd,QAAQ;AAAA;AAAA,IACR,OAAO;AAAA;AAAA,IACP,QAAQ;AAAA;AAAA,IACR,UAAU;AAAA;AAAA,EACZ;AAAA,EACA,MAAM;AAAA;AAAA,EACN,SAAS;AAAA,EACT,OAAO;AAAA,EACP,eAAe;AAAA,EACf,aAAa;AAAA,EACb,UAAU,gBAAgB;AAAA;AAC5B;AAGA,MAAM,UAAU;AAAA,EACd,SAAS,CAAAC,WAASA,OAAM;AAAA,EACxB,iBAAiB,CAAAA,WAAS,CAAC,CAACA,OAAM,QAAQ;AAAA;AAAA,EAC1C,SAAS,CAAAA,WAASA,OAAM;AAAA,EACxB,OAAO,CAAAA,WAASA,OAAM;AAAA,EACtB,eAAe,CAAAA,WAASA,OAAM;AAAA,EAC9B,aAAa,CAAAA,WAASA,OAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5B,YAAY,CAAAA,WAASA,OAAM,YAAY,gBAAgB;AAAA;AAAA,EAGvD,QAAQ,CAAAA,WAASA,OAAM,QAAQ,UAAU;AAAA,EACzC,UAAU,CAAAA,WAASA,OAAM,QAAQ,YAAY;AAAA,EAC7C,MAAM,CAAAA,WAASA,OAAM,QAAQ,QAAQ,CAAC;AAAA,EACtC,cAAc,CAAAA,WAASA,OAAM,QAAQ,gBAAgB;AAAA,EACrD,QAAQ,CAAAA,WAASA,OAAM,QAAQ,UAAU;AAAA,EACzC,OAAO,CAAAA,WAASA,OAAM,QAAQ,SAAS;AAAA,EACvC,QAAQ,CAAAA,WAASA,OAAM,QAAQ,UAAU;AAAA,EACzC,UAAU,CAAAA,WAASA,OAAM,QAAQ,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS7C,WAAW,CAACA,QAAOC,UAAS,cAAc;;AAExC,WAAOD,OAAM,SAAS,eAAa,eAAU,SAAV,mBAAgB,UAAS;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW,CAACA,QAAOC,UAAS,cAAc;;AAExC,WAAOD,OAAM,SAAS,eAAa,eAAU,SAAV,mBAAgB,UAAS;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,CAACA,QAAOC,UAAS;;AAAcD,kBAAM,UAAQ,eAAU,SAAV,mBAAgB,SAAQ;AAAA;AACjF;AAGA,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,gBAAgB;AACtB,MAAM,gBAAgB;AAGtB,MAAM,YAAY;AAAA,EAChB,CAAC,qBAAqB,EAAEA,QAAO;AAC7BA,WAAM,UAAU;AAChBA,WAAM,QAAQ;AAAA,EAChB;AAAA,EACA,CAAC,qBAAqB,EAAEA,QAAO,SAAS;AACtCA,WAAM,UAAU;AAAA,MACd,GAAGA,OAAM;AAAA,MACT,QAAQ,QAAQ,UAAUA,OAAM,QAAQ;AAAA,MACxC,UAAU,QAAQ,YAAY,QAAQ,QAAQA,OAAM,QAAQ;AAAA,MAC5D,MAAM,QAAQ,QAAQA,OAAM,QAAQ;AAAA,MACpC,cAAc,QAAQ,gBAAgBA,OAAM,QAAQ;AAAA,MACpD,QAAQ,QAAQ,UAAUA,OAAM,QAAQ;AAAA,MACxC,OAAO,QAAQ,SAASA,OAAM,QAAQ;AAAA,MACtC,QAAQ,QAAQ,UAAUA,OAAM,QAAQ;AAAA,MACxC,UAAU,QAAQ,cAAc,QAAQ;AAAA,IAAA;AAE1CA,WAAM,UAAU;AAChBA,WAAM,QAAQ;AAAA,EAChB;AAAA,EACA,CAAC,qBAAqB,EAAEA,QAAO,OAAO;AACpCA,WAAM,UAAU;AAChBA,WAAM,QAAQ;AAAA,EAChB;AAAA,EACA,CAAC,sBAAsB,EAAEA,QAAO;AAC9BA,WAAM,gBAAgB;AACtBA,WAAM,cAAc;AAAA,EACtB;AAAA,EACA,CAAC,sBAAsB,EAAEA,QAAO,SAAS;AACvCA,WAAM,UAAU;AAAA,MACd,GAAGA,OAAM;AAAA,MACT,GAAG;AAAA,MACH,UAAU,QAAQ,cAAc,QAAQ;AAAA,IAAA;AAE1CA,WAAM,gBAAgB;AACtBA,WAAM,cAAc;AAAA,EACtB;AAAA,EACA,CAAC,sBAAsB,EAAEA,QAAO,OAAO;AACrCA,WAAM,gBAAgB;AACtBA,WAAM,cAAc;AAAA,EACtB;AAAA,EACA,CAAC,aAAa,EAAEA,QAAO;AACrBA,WAAM,UAAU;AAAA,MACd,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,MAAM,CAAC;AAAA,MACP,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,UAAU;AAAA,IAAA;AAEZA,WAAM,OAAO;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,CAAC,aAAa,EAAEA,QAAO,MAAM;AAC3BA,WAAM,OAAO;AAAA,EACf;AACF;AAGA,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMd,MAAM,aAAa,EAAE,QAAQ,aAAa;;AACxC,WAAO,qBAAqB;AAExB,QAAA;AAEE,UAAA,OAAOD,cAAAA,MAAI,eAAe,UAAU;AACxC,UAAI,CAAC,MAAM;AACF,iBAAA,eAAU,SAAV,mBAAgB,SAAQ;AAAA,MACjC;AAEAA,oBAAA,MAAY,MAAA,OAAA,uCAAA,sBAAsB,IAAI;AAGtC,aAAO,eAAe,IAAI;AAG1B,YAAM,WAAW,MAAMG,qBAAS,SAAA,KAAK,eAAe,IAAI;AAEjD,aAAA,uBAAuB,SAAS,IAAI;AAC3C,aAAO,SAAS;AAAA,aACT,OAAO;AACd,aAAO,yBAAuB,iBAAM,aAAN,mBAAgB,SAAhB,mBAAsB,YAAW,UAAU;AAClE,aAAA,QAAQ,OAAO,KAAK;AAAA,IAC7B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,cAAc,EAAE,QAAQ,UAAA,GAAa,aAAa;;AACtD,WAAO,sBAAsB;AAEzB,QAAA;AAEE,UAAA,OAAOH,cAAAA,MAAI,eAAe,UAAU;AACxC,UAAI,CAAC,MAAM;AACF,iBAAA,eAAU,SAAV,mBAAgB,SAAQ;AAAA,MACjC;AAEAA,oBAAA,MAAY,MAAA,OAAA,uCAAA,uBAAuB,IAAI;AAGvC,aAAO,eAAe,IAAI;AAG1B,YAAM,WAAW,MAAMG,8BAAS,KAAK,kBAAkB,MAAM,WAAW;AAEjE,aAAA,wBAAwB,SAAS,IAAI;AAC5C,aAAO,SAAS;AAAA,aACT,OAAO;AACd,aAAO,0BAAwB,iBAAM,aAAN,mBAAgB,SAAhB,mBAAsB,YAAW,UAAU;AACnE,aAAA,QAAQ,OAAO,KAAK;AAAA,IAC7B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,EAAE,UAAU;AACvB,WAAO,aAAa;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,YAAY,EAAE,QAAQ,OAAAF,QAAO,aAAa,cAAc;;AAC5D,WAAO,sBAAsB;AAEzB,QAAA;AAEE,UAAA,OAAOD,cAAAA,MAAI,eAAe,UAAU;AACxC,UAAI,CAAC,MAAM;AACF,iBAAA,eAAU,SAAV,mBAAgB,SAAQ;AAAA,MACjC;AAEAA,oBAAA,MAAY,MAAA,OAAA,uCAAA,qBAAqB,IAAI;AAGrC,YAAM,WAAW,MAAMG,8BAAS,KAAK,gBAAgB,MAAM,YAAY;AAEvE,aAAO,wBAAwB,EAAE,aAAa,KAAM,CAAA;AACpD,aAAO,SAAS;AAAA,aACT,OAAO;AACd,aAAO,0BAAwB,iBAAM,aAAN,mBAAgB,SAAhB,mBAAsB,YAAW,QAAQ;AACjE,aAAA,QAAQ,OAAO,KAAK;AAAA,IAC7B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,WAAW,EAAE,QAAQ,UAAU,UAAA,GAAa,SAAS;;AACrD,QAAA,YAAY,aAAa,YAAY,WAAW;AAClD,aAAO,QAAQ,OAAO,IAAI,MAAM,OAAO,CAAC;AAAA,IAC1C;AAEI,QAAA;AAEE,UAAA,cAAcH,cAAAA,MAAI,eAAe,UAAU;AAC/C,UAAI,CAAC,aAAa;AACF,wBAAA,eAAU,SAAV,mBAAgB,SAAQ;AAAA,MACxC;AAEAA,0BAAY,MAAA,OAAA,uCAAA,YAAY,aAAa,MAAM,OAAO;AAGlD,YAAM,cAAcA,cAAA,MAAI,eAAe,cAAc,MAAM;AAC3DA,0BAAY,MAAA,OAAA,uCAAA,aAAa,cAAc,OAAO,IAAI;AAGlD,YAAM,WAAW,MAAMG,8BAAS,KAAK,eAAe,aAAa,OAAO;AAGpEH,oBAAAA,MAAA,eAAe,YAAY,OAAO;AAGtC,UAAI,aAAa;AACXA,sBAAAA,MAAA,eAAe,gBAAgB,MAAM;AAAA,MAC3C;AAGA,aAAO,eAAe,OAAO;AAG7B,YAAM,SAAS,cAAc;AAE7B,aAAO,SAAS;AAAA,aACT,OAAO;AACdA,oBAAA,MAAc,MAAA,SAAA,uCAAA,WAAW,KAAK;AACvB,aAAA,QAAQ,OAAO,KAAK;AAAA,IAC7B;AAAA,EACF;AACF;AAEA,MAAe,OAAA;AAAA,EACb,YAAY;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;"}