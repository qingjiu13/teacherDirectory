{"version":3,"file":"auth.js","sources":["store/modules/common/auth.js"],"sourcesContent":["/**\r\n * @description 认证模块 - 处理用户登录、注册、登出等认证相关功能\r\n */\r\nimport { services } from '../../services';\r\n\r\n// 初始状态\r\nconst state = {\r\n  token: uni.getStorageSync('token') || '',\r\n  userId: uni.getStorageSync('userId') || '',\r\n  role: uni.getStorageSync('role') || '',\r\n  isAuthenticated: !!uni.getStorageSync('token'),\r\n  loginLoading: false,\r\n  loginError: null,\r\n  registerLoading: false,\r\n  registerError: null\r\n};\r\n\r\n// Getters\r\nconst getters = {\r\n  isAuthenticated: state => state.isAuthenticated,\r\n  currentRole: state => state.role,\r\n  isTeacher: state => state.role === 'teacher',\r\n  isStudent: state => state.role === 'student',\r\n  userId: state => state.userId,\r\n  authToken: state => state.token,\r\n  loginLoading: state => state.loginLoading,\r\n  loginError: state => state.loginError,\r\n  registerLoading: state => state.registerLoading,\r\n  registerError: state => state.registerError\r\n};\r\n\r\n// 引入常量类型\r\nconst LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nconst LOGIN_FAILURE = 'LOGIN_FAILURE';\r\nconst REGISTER_REQUEST = 'REGISTER_REQUEST';\r\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nconst REGISTER_FAILURE = 'REGISTER_FAILURE';\r\nconst LOGOUT = 'LOGOUT';\r\nconst CHECK_AUTH_SUCCESS = 'CHECK_AUTH_SUCCESS';\r\n\r\n// Mutations\r\nconst mutations = {\r\n  [LOGIN_REQUEST](state) {\r\n    state.loginLoading = true;\r\n    state.loginError = null;\r\n  },\r\n  [LOGIN_SUCCESS](state, { token, userId, role }) {\r\n    state.isAuthenticated = true;\r\n    state.token = token;\r\n    state.userId = userId;\r\n    state.role = role;\r\n    state.loginLoading = false;\r\n    state.loginError = null;\r\n    \r\n    // 保存到本地存储\r\n    uni.setStorageSync('token', token);\r\n    uni.setStorageSync('userId', userId);\r\n    uni.setStorageSync('role', role);\r\n  },\r\n  [LOGIN_FAILURE](state, error) {\r\n    state.loginLoading = false;\r\n    state.loginError = error;\r\n    state.isAuthenticated = false;\r\n  },\r\n  [REGISTER_REQUEST](state) {\r\n    state.registerLoading = true;\r\n    state.registerError = null;\r\n  },\r\n  [REGISTER_SUCCESS](state) {\r\n    state.registerLoading = false;\r\n    state.registerError = null;\r\n  },\r\n  [REGISTER_FAILURE](state, error) {\r\n    state.registerLoading = false;\r\n    state.registerError = error;\r\n  },\r\n  [LOGOUT](state) {\r\n    state.isAuthenticated = false;\r\n    state.token = '';\r\n    state.userId = '';\r\n    state.role = '';\r\n    \r\n    // 清除本地存储\r\n    uni.removeStorageSync('token');\r\n    uni.removeStorageSync('userId');\r\n    uni.removeStorageSync('role');\r\n  },\r\n  [CHECK_AUTH_SUCCESS](state, { userId, role }) {\r\n    state.userId = userId;\r\n    state.role = role;\r\n    state.isAuthenticated = true;\r\n  }\r\n};\r\n\r\n// Actions\r\nconst actions = {\r\n  /**\r\n   * @description 用户登录\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} credentials - 登录凭证\r\n   * @returns {Promise<Object>} 登录结果\r\n   */\r\n  async login({ commit }, credentials) {\r\n    commit(LOGIN_REQUEST);\r\n    try {\r\n      const response = await services.auth.login(credentials);\r\n      const { token, userId, role } = response.data;\r\n      commit(LOGIN_SUCCESS, { token, userId, role });\r\n      return { success: true, data: response.data };\r\n    } catch (error) {\r\n      commit(LOGIN_FAILURE, error.response?.data?.message || '登录失败');\r\n      return { success: false, error };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 用户注册\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} userData - 用户数据\r\n   * @returns {Promise<Object>} 注册结果\r\n   */\r\n  async register({ commit }, userData) {\r\n    commit(REGISTER_REQUEST);\r\n    try {\r\n      const response = await services.auth.register(userData);\r\n      commit(REGISTER_SUCCESS);\r\n      return { success: true, data: response.data };\r\n    } catch (error) {\r\n      commit(REGISTER_FAILURE, error.response?.data?.message || '注册失败');\r\n      return { success: false, error };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 用户登出\r\n   * @param {Object} context - Vuex上下文\r\n   */\r\n  logout({ commit }) {\r\n    // 可以在这里调用登出API\r\n    commit(LOGOUT);\r\n  },\r\n  \r\n  /**\r\n   * @description 检查认证状态\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object|null>} 用户信息或null\r\n   */\r\n  async checkAuthStatus({ commit, state }) {\r\n    if (!state.token) return null;\r\n    \r\n    try {\r\n      const response = await services.auth.getUserInfo();\r\n      const { userId, role } = response.data;\r\n      commit(CHECK_AUTH_SUCCESS, { userId, role });\r\n      return response.data;\r\n    } catch (error) {\r\n      commit(LOGOUT);\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n}; "],"names":["uni","state","services"],"mappings":"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"}