{"version":3,"file":"auth.js","sources":["store/modules/common/auth.js"],"sourcesContent":["/**\r\n * @description 认证模块 - 处理用户登录、注册、登出等认证相关功能\r\n */\r\nimport { services } from '../../services';\r\n\r\n/**\r\n * @description 解析JWT Token\r\n * @param {string} token - JWT Token字符串\r\n * @returns {Object|null} 解析后的payload部分\r\n */\r\nconst parseJwt = (token) => {\r\n  try {\r\n    const base64Url = token.split('.')[1];\r\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    );\r\n    return JSON.parse(jsonPayload);\r\n  } catch (error) {\r\n    console.error('解析JWT失败:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * @description 检查Token是否过期\r\n * @param {string} token - JWT Token字符串\r\n * @returns {boolean} 是否已过期\r\n */\r\nconst isTokenExpired = (token) => {\r\n  if (!token) return true;\r\n  const payload = parseJwt(token);\r\n  if (!payload || !payload.exp) return true;\r\n  // exp是秒级时间戳，需转换为毫秒\r\n  return payload.exp * 1000 < Date.now();\r\n};\r\n\r\n/**\r\n * @description 检查Token是否即将过期（默认5分钟内）\r\n * @param {string} token - JWT Token字符串\r\n * @param {number} [timeThreshold=300000] - 到期前多少毫秒开始刷新（默认5分钟）\r\n * @returns {boolean} 是否即将过期\r\n */\r\nconst isTokenNearExpiry = (token, timeThreshold = 300000) => {\r\n  if (!token) return false;\r\n  const payload = parseJwt(token);\r\n  if (!payload || !payload.exp) return false;\r\n  // 检查是否在到期前timeThreshold毫秒内\r\n  return payload.exp * 1000 - Date.now() < timeThreshold && payload.exp * 1000 > Date.now();\r\n};\r\n\r\n// 刷新Token锁，防止重复刷新\r\nlet isRefreshing = false;\r\n// 等待刷新的请求队列\r\nlet refreshSubscribers = [];\r\n\r\n/**\r\n * @description 完成Token刷新后执行队列中的请求\r\n * @param {string} token - 新的Token\r\n */\r\nconst onRefreshed = (token) => {\r\n  refreshSubscribers.forEach(callback => callback(token));\r\n  refreshSubscribers = [];\r\n};\r\n\r\n/**\r\n * @description 添加请求到刷新队列\r\n * @param {Function} callback - 回调函数，接收新Token\r\n */\r\nconst subscribeTokenRefresh = (callback) => {\r\n  refreshSubscribers.push(callback);\r\n};\r\n\r\n// 初始状态\r\nconst state = {\r\n  token: uni.getStorageSync('token') || '',\r\n  refreshToken: uni.getStorageSync('refreshToken') || '',\r\n  userId: uni.getStorageSync('userId') || '',\r\n  role: uni.getStorageSync('role') || '',\r\n  loginLoading: false,\r\n  loginError: null,\r\n  tokenRefreshing: false,\r\n  lastTokenRefresh: uni.getStorageSync('lastTokenRefresh') || 0\r\n};\r\n\r\n// Getters\r\nconst getters = {\r\n  currentRole: state => state.role,\r\n  isTeacher: state => state.role === 'teacher',\r\n  isStudent: state => state.role === 'student',\r\n  userId: state => state.userId,\r\n  authToken: state => state.token,\r\n  refreshToken: state => state.refreshToken,\r\n  loginLoading: state => state.loginLoading,\r\n  loginError: state => state.loginError,\r\n  isTokenExpired: state => isTokenExpired(state.token),\r\n  isTokenRefreshing: state => state.tokenRefreshing\r\n};\r\n\r\n// 引入常量类型\r\nconst LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nconst LOGIN_FAILURE = 'LOGIN_FAILURE';\r\nconst LOGOUT = 'LOGOUT';\r\nconst TOKEN_REFRESH_REQUEST = 'TOKEN_REFRESH_REQUEST';\r\nconst TOKEN_REFRESH_SUCCESS = 'TOKEN_REFRESH_SUCCESS';\r\nconst TOKEN_REFRESH_FAILURE = 'TOKEN_REFRESH_FAILURE';\r\n\r\n// Mutations\r\nconst mutations = {\r\n  [LOGIN_REQUEST](state) {\r\n    state.loginLoading = true;\r\n    state.loginError = null;\r\n  },\r\n  [LOGIN_SUCCESS](state, { token, refreshToken, userId, role }) {\r\n    state.token = token;\r\n    state.refreshToken = refreshToken || state.refreshToken;\r\n    state.userId = userId;\r\n    state.role = role;\r\n    state.loginLoading = false;\r\n    state.loginError = null;\r\n    state.lastTokenRefresh = Date.now();\r\n    \r\n    // 保存到本地存储\r\n    uni.setStorageSync('token', token);\r\n    uni.setStorageSync('refreshToken', refreshToken || state.refreshToken);\r\n    uni.setStorageSync('userId', userId);\r\n    uni.setStorageSync('role', role);\r\n    uni.setStorageSync('lastTokenRefresh', Date.now());\r\n  },\r\n  [LOGIN_FAILURE](state, error) {\r\n    state.loginLoading = false;\r\n    state.loginError = error;\r\n  },\r\n  [LOGOUT](state) {\r\n    state.token = '';\r\n    state.refreshToken = '';\r\n    state.userId = '';\r\n    state.role = '';\r\n    \r\n    // 清除本地存储\r\n    uni.removeStorageSync('token');\r\n    uni.removeStorageSync('refreshToken');\r\n    uni.removeStorageSync('userId');\r\n    uni.removeStorageSync('role');\r\n    uni.removeStorageSync('lastTokenRefresh');\r\n  },\r\n  [TOKEN_REFRESH_REQUEST](state) {\r\n    state.tokenRefreshing = true;\r\n  },\r\n  [TOKEN_REFRESH_SUCCESS](state, { token, refreshToken }) {\r\n    state.token = token;\r\n    if (refreshToken) state.refreshToken = refreshToken;\r\n    state.tokenRefreshing = false;\r\n    state.lastTokenRefresh = Date.now();\r\n    \r\n    // 更新本地存储\r\n    uni.setStorageSync('token', token);\r\n    if (refreshToken) uni.setStorageSync('refreshToken', refreshToken);\r\n    uni.setStorageSync('lastTokenRefresh', Date.now());\r\n  },\r\n  [TOKEN_REFRESH_FAILURE](state) {\r\n    state.tokenRefreshing = false;\r\n  }\r\n};\r\n\r\n// Actions\r\nconst actions = {\r\n  /**\r\n   * @description 用户登录\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} credentials - 登录凭证\r\n   * @returns {Promise<Object>} 登录结果\r\n   */\r\n  async login({ commit }, credentials) {\r\n    commit(LOGIN_REQUEST);\r\n    try {\r\n      const response = await services.auth.login(credentials);\r\n      const { token, refreshToken, userId, role } = response.data;\r\n      commit(LOGIN_SUCCESS, { token, refreshToken, userId, role });\r\n      return { success: true, data: response.data };\r\n    } catch (error) {\r\n      commit(LOGIN_FAILURE, error.response?.data?.message || '登录失败');\r\n      return { success: false, error };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 用户登出\r\n   * @param {Object} context - Vuex上下文\r\n   */\r\n  logout({ commit }) {\r\n    // 可以在这里调用登出API\r\n    commit(LOGOUT);\r\n  },\r\n  \r\n  /**\r\n   * @description 刷新Token\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object>} 刷新结果\r\n   */\r\n  async refreshToken({ commit, state }) {\r\n    // 防止重复刷新\r\n    if (isRefreshing) {\r\n      return new Promise(resolve => {\r\n        subscribeTokenRefresh(token => {\r\n          resolve({ success: true, token });\r\n        });\r\n      });\r\n    }\r\n    \r\n    // 限制刷新频率（最小间隔1分钟）\r\n    const now = Date.now();\r\n    if (now - state.lastTokenRefresh < 60000) {\r\n      return { success: true, token: state.token };\r\n    }\r\n    \r\n    isRefreshing = true;\r\n    commit(TOKEN_REFRESH_REQUEST);\r\n    \r\n    try {\r\n      const response = await services.auth.refreshToken({ \r\n        refreshToken: state.refreshToken \r\n      });\r\n      \r\n      const { token, refreshToken } = response.data;\r\n      commit(TOKEN_REFRESH_SUCCESS, { token, refreshToken });\r\n      \r\n      // 执行队列中的请求\r\n      onRefreshed(token);\r\n      isRefreshing = false;\r\n      \r\n      return { success: true, token, refreshToken };\r\n    } catch (error) {\r\n      commit(TOKEN_REFRESH_FAILURE);\r\n      isRefreshing = false;\r\n      return { success: false, error };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 初始化请求拦截器，添加认证Token\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} requestInstance - uni.request实例或自定义请求库实例\r\n   */\r\n  setupRequestInterceptor({ state, dispatch }, requestInstance) {\r\n    // 这里的实现取决于你使用的请求库\r\n    // 示例基于通用拦截器模式，需根据实际情况调整\r\n    \r\n    if (requestInstance && requestInstance.interceptors) {\r\n      // 请求拦截\r\n      requestInstance.interceptors.request.use(async (config) => {\r\n        // 检查Token是否过期或即将过期\r\n        if (state.token) {\r\n          if (isTokenExpired(state.token)) {\r\n            // Token已过期，尝试刷新\r\n            if (state.refreshToken) {\r\n              const { success, token } = await dispatch('refreshToken');\r\n              if (success) {\r\n                config.header = config.header || {};\r\n                config.header.Authorization = `Bearer ${token}`;\r\n              }\r\n            }\r\n          } else {\r\n            // Token有效，直接使用\r\n            config.header = config.header || {};\r\n            config.header.Authorization = `Bearer ${state.token}`;\r\n            \r\n            // 如果Token即将过期，后台刷新\r\n            if (isTokenNearExpiry(state.token)) {\r\n              dispatch('refreshToken');\r\n            }\r\n          }\r\n        }\r\n        return config;\r\n      });\r\n      \r\n      // 响应拦截\r\n      requestInstance.interceptors.response.use(\r\n        (response) => {\r\n          return response;\r\n        },\r\n        async (error) => {\r\n          const originalRequest = error.config;\r\n          \r\n          // 如果是401错误且未尝试过刷新Token\r\n          if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n            originalRequest._retry = true;\r\n            \r\n            // 尝试刷新Token\r\n            if (state.refreshToken) {\r\n              const { success, token } = await dispatch('refreshToken');\r\n              if (success) {\r\n                // 更新请求头并重试\r\n                originalRequest.header.Authorization = `Bearer ${token}`;\r\n                return requestInstance(originalRequest);\r\n              }\r\n            }\r\n            \r\n            // 刷新失败，登出\r\n            dispatch('logout');\r\n          }\r\n          \r\n          return Promise.reject(error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n}; "],"names":["uni","state","services"],"mappings":"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"}