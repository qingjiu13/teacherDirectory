{"version":3,"file":"ai-chat.api.js","sources":["store/services/ai-chat.api.js"],"sourcesContent":["/**\r\n * @description AI聊天相关API服务\r\n */\r\nimport { API_BASE_URL, AIQA_TEST_URL } from '../../config';\r\n// 导入模拟数据用于开发调试\r\nimport { mockDelay, mockChatSummaries, mockChatDetails, mockApiResponse } from './mock-data';\r\n\r\nconst API_PREFIX = `${API_BASE_URL}/ai-chat`;\r\n\r\n// 是否使用模拟数据（开发时设为true，调试完成后改为false）\r\nconst USE_MOCK_DATA = true;\r\n\r\n// 错误码和消息映射\r\nconst ERROR_MESSAGES = {\r\n  NETWORK_ERROR: '网络连接失败，请检查您的网络设置',\r\n  TIMEOUT_ERROR: '请求超时，请稍后再试',\r\n  SERVER_ERROR: '服务器错误，请稍后再试',\r\n  AUTH_ERROR: '身份验证失败，请重新登录',\r\n  INVALID_PARAM: '参数错误',\r\n  RATE_LIMIT: '请求过于频繁，请稍后再试',\r\n  UNKNOWN_ERROR: '未知错误，请稍后再试'\r\n};\r\n\r\n/**\r\n * @description 使用uni.request封装网络请求\r\n * @param {Object} options - 请求选项\r\n * @returns {Promise<Object>} 请求结果\r\n */\r\nconst request = (options) => {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      url: options.url,\r\n      data: options.data,\r\n      method: options.method || 'GET',\r\n      header: options.headers || {},\r\n      success: (res) => {\r\n        resolve(res);\r\n      },\r\n      fail: (err) => {\r\n        reject(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * @description 处理响应错误\r\n * @param {Object} error - 错误对象\r\n * @returns {Object} 格式化的错误对象\r\n */\r\nconst handleError = (error) => {\r\n  let errorMessage = '';\r\n  \r\n  // 优先使用后端返回的错误消息\r\n  if (error.data && error.data.message) {\r\n    errorMessage = error.data.message;\r\n  } else if (error.data && error.data.error && error.data.error.message) {\r\n    errorMessage = error.data.error.message;\r\n  } else if (error.statusCode) {\r\n    // 如果没有具体错误消息，根据HTTP状态码判断\r\n    if (error.statusCode === 401 || error.statusCode === 403) {\r\n      errorMessage = ERROR_MESSAGES.AUTH_ERROR;\r\n    } else if (error.statusCode === 404) {\r\n      errorMessage = '请求的资源不存在';\r\n    } else if (error.statusCode === 429) {\r\n      errorMessage = ERROR_MESSAGES.RATE_LIMIT;\r\n    } else if (error.statusCode >= 500) {\r\n      errorMessage = ERROR_MESSAGES.SERVER_ERROR;\r\n    } else {\r\n      errorMessage = ERROR_MESSAGES.UNKNOWN_ERROR;\r\n    }\r\n  } else {\r\n    // 网络错误或其他错误\r\n    errorMessage = ERROR_MESSAGES.NETWORK_ERROR;\r\n  }\r\n  \r\n  return {\r\n    message: errorMessage,\r\n    originalError: error,\r\n    statusCode: error.statusCode || 0\r\n  };\r\n};\r\n\r\n/**\r\n * @description 获取会话列表\r\n * @returns {Promise<Object>} 会话列表\r\n */\r\nexport const getConversations = async () => {\r\n  try {\r\n    const response = await request({\r\n      url: `${API_PREFIX}/conversations`\r\n    });\r\n    return { success: true, data: response.data };\r\n  } catch (error) {\r\n    console.error('获取会话列表失败:', error);\r\n    return { success: false, error: handleError(error) };\r\n  }\r\n};\r\n\r\n/**\r\n * @description 获取会话摘要列表（只返回ID和摘要信息，不包含完整消息）\r\n * @returns {Promise<Object>} 会话摘要列表\r\n */\r\nexport const getConversationSummaries = async () => {\r\n  // 使用模拟数据进行调试\r\n  if (USE_MOCK_DATA) {\r\n    // 添加模拟延迟，模拟网络请求\r\n    await mockDelay(500);\r\n    console.log('使用模拟数据: getConversationSummaries');\r\n    return mockApiResponse({\r\n      summaries: mockChatSummaries\r\n    });\r\n  }\r\n  \r\n  // 正常的API请求\r\n  try {\r\n    const response = await request({\r\n      url: `${API_PREFIX}/conversations/summaries`\r\n    });\r\n    return { success: true, data: response.data };\r\n  } catch (error) {\r\n    console.error('获取会话摘要列表失败:', error);\r\n    return { success: false, error: handleError(error) };\r\n  }\r\n};\r\n\r\n/**\r\n * @description 获取会话消息\r\n * @param {string} conversationId - 会话ID\r\n * @returns {Promise<Object>} 会话消息\r\n */\r\nexport const getMessages = async (conversationId) => {\r\n  // 使用模拟数据进行调试\r\n  if (USE_MOCK_DATA) {\r\n    // 添加模拟延迟，模拟网络请求\r\n    await mockDelay(800);\r\n    console.log('使用模拟数据: getMessages, conversationId =', conversationId);\r\n    \r\n    // 如果找到对应ID的模拟对话数据，返回它\r\n    if (mockChatDetails[conversationId]) {\r\n      return mockApiResponse(mockChatDetails[conversationId]);\r\n    }\r\n    \r\n    // 如果找不到，返回错误\r\n    return { \r\n      success: false, \r\n      error: handleError({ \r\n        statusCode: 404, \r\n        message: '找不到指定的会话记录' \r\n      }) \r\n    };\r\n  }\r\n  \r\n  // 正常的API请求\r\n  try {\r\n    const response = await request({\r\n      url: `${API_PREFIX}/conversations/${conversationId}/messages`\r\n    });\r\n    return { success: true, data: response.data };\r\n  } catch (error) {\r\n    console.error('获取会话消息失败:', error);\r\n    return { success: false, error: handleError(error) };\r\n  }\r\n};\r\n\r\n/**\r\n * @description 发送消息\r\n * @param {Object} params - 请求参数\r\n * @param {string} params.message - 消息内容\r\n * @param {string} [params.conversationId] - 会话ID，不传则创建新会话\r\n * @param {Object} [params.context] - 上下文信息\r\n * @returns {Promise<Object>} 消息响应\r\n */\r\nexport const sendMessage = async (params) => {\r\n  try {\r\n    const requestData = {\r\n      message: params.message,\r\n      conversationId: params.conversationId,\r\n      context: params.context || {}\r\n    };\r\n    \r\n    const response = await request({\r\n      url: `${API_PREFIX}/chat`,\r\n      method: 'POST',\r\n      data: requestData\r\n    });\r\n    return { success: true, data: response.data };\r\n  } catch (error) {\r\n    console.error('发送消息失败:', error);\r\n    return { success: false, error: handleError(error) };\r\n  }\r\n};\r\n\r\n/**\r\n * @description 创建新会话\r\n * @returns {Promise<Object>} 创建结果\r\n */\r\nexport const createConversation = async () => {\r\n  try {\r\n    const response = await request({\r\n      url: `${API_PREFIX}/conversations`,\r\n      method: 'POST'\r\n    });\r\n    return { success: true, data: response.data };\r\n  } catch (error) {\r\n    console.error('创建会话失败:', error);\r\n    return { success: false, error: handleError(error) };\r\n  }\r\n};\r\n\r\n/**\r\n * @description 删除会话\r\n * @param {string} conversationId - 会话ID\r\n * @returns {Promise<Object>} 删除结果\r\n */\r\nexport const deleteConversation = async (conversationId) => {\r\n  // 使用模拟数据进行调试\r\n  if (USE_MOCK_DATA) {\r\n    // 添加模拟延迟，模拟网络请求\r\n    await mockDelay(300);\r\n    console.log('使用模拟数据: deleteConversation, conversationId =', conversationId);\r\n    return mockApiResponse({ message: '会话删除成功' });\r\n  }\r\n  \r\n  // 正常的API请求\r\n  try {\r\n    const response = await request({\r\n      url: `${API_PREFIX}/conversations/${conversationId}`,\r\n      method: 'DELETE'\r\n    });\r\n    return { success: true, data: response.data };\r\n  } catch (error) {\r\n    console.error('删除会话失败:', error);\r\n    return { success: false, error: handleError(error) };\r\n  }\r\n};\r\n\r\n/**\r\n * @description 保存完整对话内容到服务器\r\n * @param {Object} conversationData - 完整的会话数据\r\n * @returns {Promise<Object>} 保存结果\r\n */\r\nexport const saveConversation = async (conversationData) => {\r\n  // 使用模拟数据进行调试\r\n  if (USE_MOCK_DATA) {\r\n    // 添加模拟延迟，模拟网络请求\r\n    await mockDelay(600);\r\n    console.log('使用模拟数据: saveConversation, conversationId =', conversationData.id);\r\n    // 打印保存的数据以便调试\r\n    console.log('保存的对话数据:', JSON.stringify(conversationData).substring(0, 200) + '...');\r\n    return mockApiResponse({ message: '会话保存成功', id: conversationData.id });\r\n  }\r\n\r\n  // 正常的API请求\r\n  try {\r\n    const response = await request({\r\n      url: `${API_PREFIX}/conversations/${conversationData.id}`,\r\n      method: 'PUT',\r\n      data: conversationData\r\n    });\r\n    return { success: true, data: response.data };\r\n  } catch (error) {\r\n    console.error('保存会话失败:', error);\r\n    return { success: false, error: handleError(error) };\r\n  }\r\n};\r\n\r\n/**\r\n * @description 测试AIQA接口\r\n * @param {string} question - 用户提问\r\n * @param {Object} contextInfo - 用户上下文信息\r\n * @returns {Promise<Object>} 请求结果\r\n */\r\nexport const testAIQA = async (question, contextInfo = {}) => {\r\n  try {\r\n    // 改为POST请求，将问题和上下文信息作为请求体发送\r\n    const response = await request({\r\n      url: AIQA_TEST_URL,\r\n      method: 'POST',\r\n      data: {\r\n        question: question,\r\n        context: contextInfo\r\n      }\r\n    });\r\n    return { success: true, data: response.data };\r\n  } catch (error) {\r\n    console.error('测试AIQA失败:', error);\r\n    return { success: false, error: handleError(error) };\r\n  }\r\n}; "],"names":["API_BASE_URL","uni","mockDelay","mockApiResponse","mockChatSummaries","mockChatDetails","AIQA_TEST_URL"],"mappings":"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"}