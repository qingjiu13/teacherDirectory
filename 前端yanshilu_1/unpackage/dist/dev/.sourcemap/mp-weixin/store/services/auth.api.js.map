{"version":3,"file":"auth.api.js","sources":["store/services/auth.api.js"],"sourcesContent":["/**\r\n * @description 用户认证相关API服务\r\n */\r\n\r\nimport { Base64 } from 'js-base64';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n/**\r\n * @description 模拟登录请求\r\n * @param {Object} credentials - 登录凭证\r\n * @param {string} credentials.username - 用户名\r\n * @param {string} credentials.password - 密码\r\n * @param {string} credentials.role - 角色（student/teacher）\r\n * @returns {Promise<Object>} 登录结果\r\n */\r\nexport const login = (credentials) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      const { username, role } = credentials;\r\n      \r\n      // 创建JWT payload\r\n      const payload = {\r\n        sub: `user_${Date.now()}`,\r\n        name: username,\r\n        role: role,\r\n        iat: Math.floor(Date.now() / 1000),\r\n        exp: Math.floor(Date.now() / 1000) + 7200 // 2小时后过期\r\n      };\r\n      \r\n      // 模拟JWT结构 (header.payload.signature)\r\n      const header = Base64.encode(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));\r\n      const payloadBase64 = Base64.encode(JSON.stringify(payload));\r\n      const signature = Base64.encode('mock_signature'); // 模拟签名\r\n      \r\n      const token = `${header}.${payloadBase64}.${signature}`;\r\n      const refreshToken = `refresh_${header}.${Base64.encode(JSON.stringify({\r\n        ...payload,\r\n        exp: Math.floor(Date.now() / 1000) + 86400 // 24小时后过期\r\n      }))}.${signature}`;\r\n      \r\n      resolve({\r\n        success: true,\r\n        data: {\r\n          token,\r\n          refreshToken,\r\n          expiresIn: 7200,\r\n          userInfo: {\r\n            name: username,\r\n            avatar: 'https://example.com/avatar.png',\r\n            tags: ['标签1', '标签2'],\r\n            balance: role === 'teacher' ? 1000 : null,\r\n            bio: role === 'teacher' ? '资深导师，专注于学术指导' : '热爱学习的学生',\r\n            contact: {\r\n              phone: '138****1234',\r\n              email: `${username}@example.com`,\r\n              wechat: username\r\n            }\r\n          },\r\n          role\r\n        }\r\n      });\r\n    }, 500);\r\n  });\r\n};\r\n\r\n/**\r\n * @description 模拟获取用户信息\r\n * @param {string} token - 用户token\r\n * @returns {Promise<Object>} 用户信息\r\n */\r\nexport const getUserInfo = (token) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      // 添加对token的检查，确保token存在且为字符串\r\n      const role = token && typeof token === 'string' && token.startsWith('teacher') ? 'teacher' : 'student';\r\n      resolve({\r\n        success: true,\r\n        data: {\r\n          name: `${role}用户`,\r\n          avatar: 'https://example.com/avatar.png',\r\n          tags: ['标签1', '标签2', '标签3'],\r\n          balance: role === 'teacher' ? 1500 : null,\r\n          bio: role === 'teacher' ? '资深导师，专注于学术指导' : '热爱学习的学生',\r\n          contact: {\r\n            phone: '138****1234',\r\n            email: `${role}@example.com`,\r\n            wechat: `${role}_user`\r\n          },\r\n          notifications: {\r\n            unread: 3,\r\n            messages: [\r\n              {id: 'm1', type: 'system', content: '系统通知', read: false, time: Date.now() - 3600000},\r\n              {id: 'm2', type: 'chat', content: '新聊天消息', read: false, time: Date.now() - 7200000},\r\n              {id: 'm3', type: 'order', content: '订单状态更新', read: false, time: Date.now() - 10800000}\r\n            ]\r\n          }\r\n        }\r\n      });\r\n    }, 600);\r\n  });\r\n};\r\n\r\n/**\r\n * @description 模拟刷新token\r\n * @param {string} refreshToken - 刷新token\r\n * @returns {Promise<Object>} 新的token信息\r\n */\r\nexport const refreshToken = (refreshToken) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        success: true,\r\n        data: {\r\n          token: `new_token_${Date.now()}`,\r\n          refreshToken: `new_refresh_token_${Date.now()}`,\r\n          expiresIn: 7200 // 2小时有效期\r\n        }\r\n      });\r\n    }, 300);\r\n  });\r\n};\r\n\r\n/**\r\n * @description JWT辅助函数\r\n */\r\nexport const jwt = {\r\n  /**\r\n   * @description 解码JWT令牌\r\n   * @param {string} token - JWT令牌\r\n   * @returns {Object|null} 解码后的载荷\r\n   */\r\n  decode(token) {\r\n    try {\r\n      if (!token) return null;\r\n      return jwtDecode(token);\r\n    } catch (error) {\r\n      console.error('Token解析失败:', error);\r\n      return null;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 校验JWT令牌是否有效\r\n   * @param {string} token - JWT令牌\r\n   * @returns {boolean} 是否有效\r\n   */\r\n  isValid(token) {\r\n    if (!token || typeof token !== 'string') return false;\r\n    try {\r\n      const decoded = this.decode(token);\r\n      if (!decoded) return false;\r\n      const currentTime = Date.now() / 1000;\r\n      return decoded.exp > currentTime;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n}; "],"names":["Base64","refreshToken","jwtDecode","uni"],"mappings":"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"}