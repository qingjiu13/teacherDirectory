{"version":3,"file":"user.api.js","sources":["store/services/user.api.js"],"sourcesContent":["/**\n * @description 用户通用API服务\n */\nimport { API_BASE_URL } from '../../config';\nimport { mockDelay, mockApiResponse, mockStudentData, mockTeacherData, getMockUserProfile } from './mock-data';\n\nconst API_PREFIX = `${API_BASE_URL}/user`;\n\n/**\n * @description 检查是否需要使用模拟数据\n * @param {Object} options - 请求选项\n * @returns {Boolean} 是否使用模拟数据\n */\nconst shouldUseMockData = (options) => {\n  // 优先使用明确指定的设置\n  if (options && options.forceMock !== undefined) {\n    return options.forceMock;\n  }\n  \n  // 其次检查本地存储\n  if (uni.getStorageSync('use_mock_api') === 'true') {\n    return true;\n  }\n  \n  // 最后检查环境\n  return process.env.NODE_ENV === 'development';\n};\n\n/**\n * @description 使用uni.request封装网络请求\n * @param {Object} options - 请求选项\n * @returns {Promise<Object>} 请求结果\n */\nconst request = (options) => {\n  return new Promise((resolve, reject) => {\n    if (shouldUseMockData(options)) {\n      setTimeout(() => {\n        resolve(options.mockData || {});\n      }, options.mockDelay || 300);\n      return;\n    }\n    \n    uni.request({\n      url: options.url,\n      data: options.data,\n      method: options.method || 'GET',\n      header: options.headers || {},\n      success: (res) => {\n        resolve(res);\n      },\n      fail: (err) => {\n        if (shouldUseMockData(options) && options.useMockOnFail) {\n          setTimeout(() => {\n            resolve(options.mockData || {});\n          }, options.mockDelay || 300);\n          return;\n        }\n        reject(err);\n      }\n    });\n  });\n};\n\n/**\n * @description 获取用户个人资料\n * @param {String} role - 用户角色(teacher/student)\n * @returns {Promise<Object>} 用户资料\n */\nexport const getUserProfile = async (role) => {\n  try {\n    const userData = getMockUserProfile(role);\n    \n    // 确保老师数据中的第一个标签是认证标签\n    if (role === 'teacher' && userData && userData.tags && userData.tags.length > 0) {\n      if (!userData.tags[0].includes('认证') && userData.tags[0] !== '已认证') {\n        userData.tags.unshift('已认证');\n      }\n      userData.tag = userData.tags[0];\n    }\n    \n    const response = await request({\n      url: `${API_PREFIX}/profile`,\n      method: 'GET',\n      data: { role },\n      mockData: { data: userData },\n      mockDelay: 500\n    });\n    \n    return response;\n  } catch (error) {\n    throw new Error(error.message || '获取用户资料失败');\n  }\n};\n\n/**\n * @description 更新用户个人资料\n * @param {String} role - 用户角色(teacher/student)\n * @param {Object} profileData - 资料数据\n * @returns {Promise<Object>} 更新结果\n */\nexport const updateUserProfile = async (role, profileData) => {\n  try {\n    // 教师角色时，处理标签\n    if (role === 'teacher' && profileData.tags) {\n      if (profileData.certTag !== undefined) {\n        const allTags = [profileData.certTag];\n        if (profileData.otherTags) {\n          allTags.push(...profileData.otherTags);\n        }\n        profileData.tags = allTags;\n      }\n    }\n    \n    const response = await request({\n      url: `${API_PREFIX}/profile`,\n      method: 'PUT',\n      data: { ...profileData, role },\n      mockData: {\n        data: {\n          ...profileData,\n          updateTime: new Date().toISOString()\n        }\n      },\n      mockDelay: 700\n    });\n    \n    return response;\n  } catch (error) {\n    throw new Error(error.message || '更新用户资料失败');\n  }\n};\n\n/**\n * @description 设置用户密码\n * @param {String} role - 用户角色(teacher/student)\n * @param {Object} passwordData - 密码数据\n * @returns {Promise<Object>} 设置结果\n */\nexport const setUserPassword = async (role, passwordData) => {\n  try {\n    const response = await request({\n      url: `${API_PREFIX}/password`,\n      method: 'POST',\n      data: { ...passwordData, role },\n      mockData: {\n        data: {\n          success: true,\n          hasPassword: true,\n          updateTime: new Date().toISOString()\n        }\n      },\n      mockDelay: 600\n    });\n    \n    return response;\n  } catch (error) {\n    throw new Error(error.message || '设置密码失败');\n  }\n};\n\n/**\n * @description 切换用户角色\n * @param {String} currentRole - 当前角色\n * @param {String} newRole - 新角色\n * @returns {Promise<Object>} 切换结果\n */\nexport const switchUserRole = async (currentRole, newRole) => {\n  try {\n    const useMockData = shouldUseMockData({});\n    \n    const response = await request({\n      url: `${API_PREFIX}/switch-role`,\n      method: 'POST',\n      data: { currentRole, newRole, useMockData },\n      mockData: {\n        data: {\n          oldRole: currentRole,\n          newRole: newRole,\n          success: true,\n          useMockData: useMockData\n        }\n      },\n      mockDelay: 500,\n      forceMock: useMockData\n    });\n    \n    if (useMockData) {\n      uni.setStorageSync('use_mock_api', 'true');\n    }\n    \n    return response;\n  } catch (error) {\n    throw new Error(error.message || '切换角色失败');\n  }\n};"],"names":["API_BASE_URL","uni","getMockUserProfile"],"mappings":"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"}