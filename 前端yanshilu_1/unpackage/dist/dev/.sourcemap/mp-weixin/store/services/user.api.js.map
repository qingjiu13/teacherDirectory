{"version":3,"file":"user.api.js","sources":["store/services/user.api.js"],"sourcesContent":["/**\r\n * @description 用户通用API服务\r\n * 提供用户资料获取、更新、密码设置等通用功能\r\n */\r\nimport { API_BASE_URL } from '../../config';\r\nimport { mockDelay, mockApiResponse, mockStudentData, mockTeacherData, getMockUserProfile } from './mock-data';\r\n\r\nconst API_PREFIX = `${API_BASE_URL}/user`;\r\n\r\n// 是否使用模拟数据 - 为了将来容易替换，添加多种控制方式\r\nconst USE_MOCK_DATA = process.env.NODE_ENV === 'development' || uni.getStorageSync('use_mock_api') === 'true';\r\n\r\n/**\r\n * @description 检查是否需要使用模拟数据\r\n * @param {Object} options - 请求选项，可以包含强制指定是否使用模拟数据\r\n * @returns {Boolean} 是否使用模拟数据\r\n */\r\nconst shouldUseMockData = (options) => {\r\n  // 如果选项中明确指定了是否使用模拟数据，则优先使用\r\n  if (options && options.forceMock !== undefined) {\r\n    console.log('API请求使用强制模拟数据设置:', options.forceMock);\r\n    return options.forceMock;\r\n  }\r\n  \r\n  // 检查本地存储中的模拟数据设置 - 添加显式检查，确保不遗漏\r\n  const useStorageMock = uni.getStorageSync('use_mock_api') === 'true';\r\n  \r\n  // 如果本地存储中明确设置了使用模拟数据，则使用模拟数据\r\n  if (useStorageMock) {\r\n    console.log('API请求使用本地存储模拟数据设置: true');\r\n    return true;\r\n  }\r\n  \r\n  // 开发环境默认使用模拟数据\r\n  const useDevMock = process.env.NODE_ENV === 'development';\r\n  console.log('API请求环境模拟数据设置:', useDevMock ? '开发环境启用' : '生产环境禁用');\r\n  \r\n  // 最终决策\r\n  const finalDecision = useStorageMock || USE_MOCK_DATA || useDevMock;\r\n  console.log('API请求最终使用模拟数据:', finalDecision);\r\n  \r\n  return finalDecision;\r\n};\r\n\r\n/**\r\n * @description 使用uni.request封装网络请求\r\n * @param {Object} options - 请求选项\r\n * @returns {Promise<Object>} 请求结果\r\n */\r\nconst request = (options) => {\r\n  return new Promise((resolve, reject) => {\r\n    // 检查是否应该使用模拟数据 - 修改逻辑，只要shouldUseMockData返回true就使用模拟数据\r\n    if (shouldUseMockData(options)) {\r\n      console.log('使用模拟数据响应请求:', options.url);\r\n      // 延迟返回模拟数据，模拟网络请求\r\n      setTimeout(() => {\r\n        resolve(options.mockData || {});\r\n      }, options.mockDelay || 300);\r\n      return;\r\n    }\r\n    \r\n    // 否则发起真实网络请求\r\n    console.log('发起实际API请求:', options.url);\r\n    uni.request({\r\n      url: options.url,\r\n      data: options.data,\r\n      method: options.method || 'GET',\r\n      header: options.headers || {},\r\n      success: (res) => {\r\n        resolve(res);\r\n      },\r\n      fail: (err) => {\r\n        // 如果请求失败且在开发环境并指定了失败时使用模拟数据\r\n        if (shouldUseMockData(options) && options.useMockOnFail) {\r\n          console.warn('API请求失败，使用模拟数据替代', err);\r\n          setTimeout(() => {\r\n            resolve(options.mockData || {});\r\n          }, options.mockDelay || 300);\r\n          return;\r\n        }\r\n        reject(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * @description 获取用户个人资料（通用API，根据角色调用不同服务）\r\n * @param {String} role - 用户角色(teacher/student)\r\n * @returns {Promise<Object>} 用户资料\r\n * \r\n * TODO: 替换为真实API时，需要修改此方法，移除模拟数据相关代码，\r\n * 直接发送请求到后端API获取用户资料\r\n */\r\nexport const getUserProfile = async (role) => {\r\n  try {\r\n    // 准备模拟数据\r\n    const userData = getMockUserProfile(role);\r\n    const mockData = {\r\n      data: userData\r\n    };\r\n    \r\n    const response = await request({\r\n      url: `${API_PREFIX}/profile`,\r\n      method: 'GET',\r\n      data: { role },\r\n      mockData: mockData,\r\n      mockDelay: 500\r\n    });\r\n    \r\n    // 为了保持与之前API格式一致，直接返回data字段\r\n    return response;\r\n  } catch (error) {\r\n    console.error('获取用户资料失败:', error);\r\n    throw new Error(error.message || '获取用户资料失败');\r\n  }\r\n};\r\n\r\n/**\r\n * @description 更新用户个人资料（通用API）\r\n * @param {String} role - 用户角色(teacher/student)\r\n * @param {Object} profileData - 资料数据\r\n * @returns {Promise<Object>} 更新结果\r\n */\r\nexport const updateUserProfile = async (role, profileData) => {\r\n  try {\r\n    // 准备模拟数据\r\n    const mockData = {\r\n      data: {\r\n        ...profileData,\r\n        updateTime: new Date().toISOString()\r\n      }\r\n    };\r\n    \r\n    const response = await request({\r\n      url: `${API_PREFIX}/profile`,\r\n      method: 'PUT',\r\n      data: { ...profileData, role },\r\n      mockData: mockData,\r\n      mockDelay: 700\r\n    });\r\n    \r\n    // 保持一致的返回格式\r\n    return response;\r\n  } catch (error) {\r\n    console.error('更新用户资料失败:', error);\r\n    throw new Error(error.message || '更新用户资料失败');\r\n  }\r\n};\r\n\r\n/**\r\n * @description 设置用户密码\r\n * @param {String} role - 用户角色(teacher/student)\r\n * @param {Object} passwordData - 密码数据\r\n * @returns {Promise<Object>} 设置结果\r\n */\r\nexport const setUserPassword = async (role, passwordData) => {\r\n  try {\r\n    // 准备模拟数据\r\n    const mockData = {\r\n      data: {\r\n        success: true,\r\n        hasPassword: true,\r\n        updateTime: new Date().toISOString()\r\n      }\r\n    };\r\n    \r\n    const response = await request({\r\n      url: `${API_PREFIX}/password`,\r\n      method: 'POST',\r\n      data: { ...passwordData, role },\r\n      mockData: mockData,\r\n      mockDelay: 600\r\n    });\r\n    \r\n    // 保持一致的返回格式\r\n    return response;\r\n  } catch (error) {\r\n    console.error('设置密码失败:', error);\r\n    throw new Error(error.message || '设置密码失败');\r\n  }\r\n};\r\n\r\n/**\r\n * @description 切换用户角色\r\n * @param {String} currentRole - 当前角色\r\n * @param {String} newRole - 新角色\r\n * @returns {Promise<Object>} 切换结果\r\n */\r\nexport const switchUserRole = async (currentRole, newRole) => {\r\n  try {\r\n    // 获取当前模拟数据设置\r\n    const useMockData = shouldUseMockData({});\r\n    console.log('角色切换API - 使用模拟数据:', useMockData ? '是' : '否');\r\n    \r\n    // 准备模拟数据\r\n    const mockData = {\r\n      data: {\r\n        oldRole: currentRole,\r\n        newRole: newRole,\r\n        success: true,\r\n        useMockData: useMockData  // 记录模拟数据设置，确保切换后一致\r\n      }\r\n    };\r\n    \r\n    const response = await request({\r\n      url: `${API_PREFIX}/switch-role`,\r\n      method: 'POST',\r\n      data: { currentRole, newRole, useMockData },  // 传递模拟数据设置\r\n      mockData: mockData,\r\n      mockDelay: 500,\r\n      forceMock: useMockData  // 强制使用模拟数据设置\r\n    });\r\n    \r\n    // 切换角色后，确保模拟数据设置保持不变\r\n    if (useMockData) {\r\n      uni.setStorageSync('use_mock_api', 'true');\r\n      console.log('角色切换后保持模拟数据设置: true');\r\n    }\r\n    \r\n    // 保持一致的返回格式\r\n    return response;\r\n  } catch (error) {\r\n    console.error('切换角色失败:', error);\r\n    throw new Error(error.message || '切换角色失败');\r\n  }\r\n}; "],"names":["API_BASE_URL","uni","getMockUserProfile"],"mappings":"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"}