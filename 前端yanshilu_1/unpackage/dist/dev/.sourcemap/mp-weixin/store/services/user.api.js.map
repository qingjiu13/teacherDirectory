{"version":3,"file":"user.api.js","sources":["store/services/user.api.js"],"sourcesContent":["/**\r\n * @description 用户通用API服务\r\n */\r\nimport { API_BASE_URL } from '../../config';\r\nimport { mockDelay, mockApiResponse, mockStudentData, mockTeacherData, getMockUserProfile } from './mock-data';\r\n\r\nconst API_PREFIX = `${API_BASE_URL}/user`;\r\n\r\n/**\r\n * @description 检查是否需要使用模拟数据\r\n * @param {Object} options - 请求选项\r\n * @returns {Boolean} 是否使用模拟数据\r\n */\r\nconst shouldUseMockData = (options) => {\r\n  // 优先使用明确指定的设置\r\n  if (options && options.forceMock !== undefined) {\r\n    return options.forceMock;\r\n  }\r\n  \r\n  // 其次检查本地存储\r\n  if (uni.getStorageSync('use_mock_api') === 'true') {\r\n    return true;\r\n  }\r\n  \r\n  // 最后检查环境\r\n  return process.env.NODE_ENV === 'development';\r\n};\r\n\r\n/**\r\n * @description 使用uni.request封装网络请求\r\n * @param {Object} options - 请求选项\r\n * @returns {Promise<Object>} 请求结果\r\n */\r\nconst request = (options) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (shouldUseMockData(options)) {\r\n      setTimeout(() => {\r\n        resolve(options.mockData || {});\r\n      }, options.mockDelay || 300);\r\n      return;\r\n    }\r\n    \r\n    uni.request({\r\n      url: options.url,\r\n      data: options.data,\r\n      method: options.method || 'GET',\r\n      header: options.headers || {},\r\n      success: (res) => {\r\n        resolve(res);\r\n      },\r\n      fail: (err) => {\r\n        if (shouldUseMockData(options) && options.useMockOnFail) {\r\n          setTimeout(() => {\r\n            resolve(options.mockData || {});\r\n          }, options.mockDelay || 300);\r\n          return;\r\n        }\r\n        reject(err);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * @description 获取用户个人资料\r\n * @param {String} role - 用户角色(teacher/student)\r\n * @returns {Promise<Object>} 用户资料\r\n */\r\nexport const getUserProfile = async (role) => {\r\n  try {\r\n    const userData = getMockUserProfile(role);\r\n    \r\n    // 确保老师数据中的第一个标签是认证标签\r\n    if (role === 'teacher' && userData && userData.tags && userData.tags.length > 0) {\r\n      if (!userData.tags[0].includes('认证') && userData.tags[0] !== '已认证') {\r\n        userData.tags.unshift('已认证');\r\n      }\r\n      userData.tag = userData.tags[0];\r\n    }\r\n    \r\n    const response = await request({\r\n      url: `${API_PREFIX}/profile`,\r\n      method: 'GET',\r\n      data: { role },\r\n      mockData: { data: userData },\r\n      mockDelay: 500\r\n    });\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    throw new Error(error.message || '获取用户资料失败');\r\n  }\r\n};\r\n\r\n/**\r\n * @description 更新用户个人资料\r\n * @param {String} role - 用户角色(teacher/student)\r\n * @param {Object} profileData - 资料数据\r\n * @returns {Promise<Object>} 更新结果\r\n */\r\nexport const updateUserProfile = async (role, profileData) => {\r\n  try {\r\n    // 教师角色时，处理标签\r\n    if (role === 'teacher' && profileData.tags) {\r\n      if (profileData.certTag !== undefined) {\r\n        const allTags = [profileData.certTag];\r\n        if (profileData.otherTags) {\r\n          allTags.push(...profileData.otherTags);\r\n        }\r\n        profileData.tags = allTags;\r\n      }\r\n    }\r\n    \r\n    const response = await request({\r\n      url: `${API_PREFIX}/profile`,\r\n      method: 'PUT',\r\n      data: { ...profileData, role },\r\n      mockData: {\r\n        data: {\r\n          ...profileData,\r\n          updateTime: new Date().toISOString()\r\n        }\r\n      },\r\n      mockDelay: 700\r\n    });\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    throw new Error(error.message || '更新用户资料失败');\r\n  }\r\n};\r\n\r\n/**\r\n * @description 设置用户密码\r\n * @param {String} role - 用户角色(teacher/student)\r\n * @param {Object} passwordData - 密码数据\r\n * @returns {Promise<Object>} 设置结果\r\n */\r\nexport const setUserPassword = async (role, passwordData) => {\r\n  try {\r\n    const response = await request({\r\n      url: `${API_PREFIX}/password`,\r\n      method: 'POST',\r\n      data: { ...passwordData, role },\r\n      mockData: {\r\n        data: {\r\n          success: true,\r\n          hasPassword: true,\r\n          updateTime: new Date().toISOString()\r\n        }\r\n      },\r\n      mockDelay: 600\r\n    });\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    throw new Error(error.message || '设置密码失败');\r\n  }\r\n};\r\n\r\n/**\r\n * @description 切换用户角色\r\n * @param {String} currentRole - 当前角色\r\n * @param {String} newRole - 新角色\r\n * @returns {Promise<Object>} 切换结果\r\n */\r\nexport const switchUserRole = async (currentRole, newRole) => {\r\n  try {\r\n    const useMockData = shouldUseMockData({});\r\n    \r\n    const response = await request({\r\n      url: `${API_PREFIX}/switch-role`,\r\n      method: 'POST',\r\n      data: { currentRole, newRole, useMockData },\r\n      mockData: {\r\n        data: {\r\n          oldRole: currentRole,\r\n          newRole: newRole,\r\n          success: true,\r\n          useMockData: useMockData\r\n        }\r\n      },\r\n      mockDelay: 500,\r\n      forceMock: useMockData\r\n    });\r\n    \r\n    if (useMockData) {\r\n      uni.setStorageSync('use_mock_api', 'true');\r\n    }\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    throw new Error(error.message || '切换角色失败');\r\n  }\r\n};"],"names":["API_BASE_URL","uni","getMockUserProfile"],"mappings":"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"}