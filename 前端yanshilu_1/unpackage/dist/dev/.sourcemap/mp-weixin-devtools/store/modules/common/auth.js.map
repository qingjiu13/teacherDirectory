{"version":3,"names":["state","token","localStorage","getItem","userId","role","isAuthenticated","loginLoading","loginError","registerLoading","registerError","getters","state2","currentRole","isTeacher","isStudent","authToken","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","LOGOUT","CHECK_AUTH_SUCCESS","mutations","_defineProperty2","_ref","setItem","error","removeItem","_ref2","actions","login","_ref3","credentials","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","commit","_a","_b","response","_response$data","wrap","_callee$","_context","prev","next","store_services_index","services","auth","sent","data","abrupt","success","t0","message","stop","register","_ref4","userData","_callee2","_callee2$","_context2","logout","_ref5","checkAuthStatus","_ref6","_callee3","_response$data2","_callee3$","_context3","getUserInfo","namespaced"],"sources":["auth.js"],"sourcesContent":["/**\r\n * @description 认证模块 - 处理用户登录、注册、登出等认证相关功能\r\n */\r\nimport { services } from '../../services';\r\n\r\n// 初始状态\r\nconst state = {\r\n  token: localStorage.getItem('token') || '',\r\n  userId: localStorage.getItem('userId') || '',\r\n  role: localStorage.getItem('role') || '',\r\n  isAuthenticated: !!localStorage.getItem('token'),\r\n  loginLoading: false,\r\n  loginError: null,\r\n  registerLoading: false,\r\n  registerError: null\r\n};\r\n\r\n// Getters\r\nconst getters = {\r\n  isAuthenticated: state => state.isAuthenticated,\r\n  currentRole: state => state.role,\r\n  isTeacher: state => state.role === 'teacher',\r\n  isStudent: state => state.role === 'student',\r\n  userId: state => state.userId,\r\n  authToken: state => state.token,\r\n  loginLoading: state => state.loginLoading,\r\n  loginError: state => state.loginError,\r\n  registerLoading: state => state.registerLoading,\r\n  registerError: state => state.registerError\r\n};\r\n\r\n// 引入常量类型\r\nconst LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nconst LOGIN_FAILURE = 'LOGIN_FAILURE';\r\nconst REGISTER_REQUEST = 'REGISTER_REQUEST';\r\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nconst REGISTER_FAILURE = 'REGISTER_FAILURE';\r\nconst LOGOUT = 'LOGOUT';\r\nconst CHECK_AUTH_SUCCESS = 'CHECK_AUTH_SUCCESS';\r\n\r\n// Mutations\r\nconst mutations = {\r\n  [LOGIN_REQUEST](state) {\r\n    state.loginLoading = true;\r\n    state.loginError = null;\r\n  },\r\n  [LOGIN_SUCCESS](state, { token, userId, role }) {\r\n    state.isAuthenticated = true;\r\n    state.token = token;\r\n    state.userId = userId;\r\n    state.role = role;\r\n    state.loginLoading = false;\r\n    state.loginError = null;\r\n    \r\n    // 保存到本地存储\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('userId', userId);\r\n    localStorage.setItem('role', role);\r\n  },\r\n  [LOGIN_FAILURE](state, error) {\r\n    state.loginLoading = false;\r\n    state.loginError = error;\r\n    state.isAuthenticated = false;\r\n  },\r\n  [REGISTER_REQUEST](state) {\r\n    state.registerLoading = true;\r\n    state.registerError = null;\r\n  },\r\n  [REGISTER_SUCCESS](state) {\r\n    state.registerLoading = false;\r\n    state.registerError = null;\r\n  },\r\n  [REGISTER_FAILURE](state, error) {\r\n    state.registerLoading = false;\r\n    state.registerError = error;\r\n  },\r\n  [LOGOUT](state) {\r\n    state.isAuthenticated = false;\r\n    state.token = '';\r\n    state.userId = '';\r\n    state.role = '';\r\n    \r\n    // 清除本地存储\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userId');\r\n    localStorage.removeItem('role');\r\n  },\r\n  [CHECK_AUTH_SUCCESS](state, { userId, role }) {\r\n    state.userId = userId;\r\n    state.role = role;\r\n    state.isAuthenticated = true;\r\n  }\r\n};\r\n\r\n// Actions\r\nconst actions = {\r\n  /**\r\n   * @description 用户登录\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} credentials - 登录凭证\r\n   * @returns {Promise<Object>} 登录结果\r\n   */\r\n  async login({ commit }, credentials) {\r\n    commit(LOGIN_REQUEST);\r\n    try {\r\n      const response = await services.auth.login(credentials);\r\n      const { token, userId, role } = response.data;\r\n      commit(LOGIN_SUCCESS, { token, userId, role });\r\n      return { success: true, data: response.data };\r\n    } catch (error) {\r\n      commit(LOGIN_FAILURE, error.response?.data?.message || '登录失败');\r\n      return { success: false, error };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 用户注册\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} userData - 用户数据\r\n   * @returns {Promise<Object>} 注册结果\r\n   */\r\n  async register({ commit }, userData) {\r\n    commit(REGISTER_REQUEST);\r\n    try {\r\n      const response = await services.auth.register(userData);\r\n      commit(REGISTER_SUCCESS);\r\n      return { success: true, data: response.data };\r\n    } catch (error) {\r\n      commit(REGISTER_FAILURE, error.response?.data?.message || '注册失败');\r\n      return { success: false, error };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 用户登出\r\n   * @param {Object} context - Vuex上下文\r\n   */\r\n  logout({ commit }) {\r\n    // 可以在这里调用登出API\r\n    commit(LOGOUT);\r\n  },\r\n  \r\n  /**\r\n   * @description 检查认证状态\r\n   * @param {Object} context - Vuex上下文\r\n   * @returns {Promise<Object|null>} 用户信息或null\r\n   */\r\n  async checkAuthStatus({ commit, state }) {\r\n    if (!state.token) return null;\r\n    \r\n    try {\r\n      const response = await services.auth.getUserInfo();\r\n      const { userId, role } = response.data;\r\n      commit(CHECK_AUTH_SUCCESS, { userId, role });\r\n      return response.data;\r\n    } catch (error) {\r\n      commit(LOGOUT);\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n}; "],"mappings":";;;;;;;AAMA,IAAMA,KAAA,GAAQ;EACZC,KAAA,EAAOC,YAAA,CAAaC,OAAA,CAAQ,OAAO,KAAK;EACxCC,MAAA,EAAQF,YAAA,CAAaC,OAAA,CAAQ,QAAQ,KAAK;EAC1CE,IAAA,EAAMH,YAAA,CAAaC,OAAA,CAAQ,MAAM,KAAK;EACtCG,eAAA,EAAiB,CAAC,CAACJ,YAAA,CAAaC,OAAA,CAAQ,OAAO;EAC/CI,YAAA,EAAc;EACdC,UAAA,EAAY;EACZC,eAAA,EAAiB;EACjBC,aAAA,EAAe;AACjB;AAGA,IAAMC,OAAA,GAAU;EACdL,eAAA,EAAiB,SAAjBA,gBAAiBM,MAAA;IAAA,OAASA,MAAA,CAAMN,eAAA;EAAA;EAChCO,WAAA,EAAa,SAAbA,YAAaD,MAAA;IAAA,OAASA,MAAA,CAAMP,IAAA;EAAA;EAC5BS,SAAA,EAAW,SAAXA,UAAWF,MAAA;IAAA,OAASA,MAAA,CAAMP,IAAA,KAAS;EAAA;EACnCU,SAAA,EAAW,SAAXA,UAAWH,MAAA;IAAA,OAASA,MAAA,CAAMP,IAAA,KAAS;EAAA;EACnCD,MAAA,EAAQ,SAARA,OAAQQ,MAAA;IAAA,OAASA,MAAA,CAAMR,MAAA;EAAA;EACvBY,SAAA,EAAW,SAAXA,UAAWJ,MAAA;IAAA,OAASA,MAAA,CAAMX,KAAA;EAAA;EAC1BM,YAAA,EAAc,SAAdA,aAAcK,MAAA;IAAA,OAASA,MAAA,CAAML,YAAA;EAAA;EAC7BC,UAAA,EAAY,SAAZA,WAAYI,MAAA;IAAA,OAASA,MAAA,CAAMJ,UAAA;EAAA;EAC3BC,eAAA,EAAiB,SAAjBA,gBAAiBG,MAAA;IAAA,OAASA,MAAA,CAAMH,eAAA;EAAA;EAChCC,aAAA,EAAe,SAAfA,cAAeE,MAAA;IAAA,OAASA,MAAA,CAAMF,aAAA;EAAA;AAChC;AAGA,IAAMO,aAAA,GAAgB;AACtB,IAAMC,aAAA,GAAgB;AACtB,IAAMC,aAAA,GAAgB;AACtB,IAAMC,gBAAA,GAAmB;AACzB,IAAMC,gBAAA,GAAmB;AACzB,IAAMC,gBAAA,GAAmB;AACzB,IAAMC,MAAA,GAAS;AACf,IAAMC,kBAAA,GAAqB;AAG3B,IAAMC,SAAA,GAAAC,gBAAA,CAAAA,gBAAA,CAAAA,gBAAA,CAAAA,gBAAA,CAAAA,gBAAA,CAAAA,gBAAA,CAAAA,gBAAA,CAAAA,gBAAA,KACHT,aAAa,YAAEL,MAAA,EAAO;EACrBA,MAAA,CAAML,YAAA,GAAe;EACrBK,MAAA,CAAMJ,UAAA,GAAa;AACpB,IACAU,aAAa,YAAEN,MAAA,EAAAe,IAAA,EAAgC;EAAA,IAAvB1B,KAAA,GAAA0B,IAAA,CAAA1B,KAAA;IAAOG,MAAA,GAAAuB,IAAA,CAAAvB,MAAA;IAAQC,IAAA,GAAAsB,IAAA,CAAAtB,IAAA;EACtCO,MAAA,CAAMN,eAAA,GAAkB;EACxBM,MAAA,CAAMX,KAAA,GAAQA,KAAA;EACdW,MAAA,CAAMR,MAAA,GAASA,MAAA;EACfQ,MAAA,CAAMP,IAAA,GAAOA,IAAA;EACbO,MAAA,CAAML,YAAA,GAAe;EACrBK,MAAA,CAAMJ,UAAA,GAAa;EAGnBN,YAAA,CAAa0B,OAAA,CAAQ,SAAS3B,KAAK;EACnCC,YAAA,CAAa0B,OAAA,CAAQ,UAAUxB,MAAM;EACrCF,YAAA,CAAa0B,OAAA,CAAQ,QAAQvB,IAAI;AAClC,IACAc,aAAa,YAAEP,MAAA,EAAOiB,KAAA,EAAO;EAC5BjB,MAAA,CAAML,YAAA,GAAe;EACrBK,MAAA,CAAMJ,UAAA,GAAaqB,KAAA;EACnBjB,MAAA,CAAMN,eAAA,GAAkB;AACzB,IACAc,gBAAgB,YAAER,MAAA,EAAO;EACxBA,MAAA,CAAMH,eAAA,GAAkB;EACxBG,MAAA,CAAMF,aAAA,GAAgB;AACvB,IACAW,gBAAgB,YAAET,MAAA,EAAO;EACxBA,MAAA,CAAMH,eAAA,GAAkB;EACxBG,MAAA,CAAMF,aAAA,GAAgB;AACvB,IACAY,gBAAgB,YAAEV,MAAA,EAAOiB,KAAA,EAAO;EAC/BjB,MAAA,CAAMH,eAAA,GAAkB;EACxBG,MAAA,CAAMF,aAAA,GAAgBmB,KAAA;AACvB,IACAN,MAAM,YAAEX,MAAA,EAAO;EACdA,MAAA,CAAMN,eAAA,GAAkB;EACxBM,MAAA,CAAMX,KAAA,GAAQ;EACdW,MAAA,CAAMR,MAAA,GAAS;EACfQ,MAAA,CAAMP,IAAA,GAAO;EAGbH,YAAA,CAAa4B,UAAA,CAAW,OAAO;EAC/B5B,YAAA,CAAa4B,UAAA,CAAW,QAAQ;EAChC5B,YAAA,CAAa4B,UAAA,CAAW,MAAM;AAC/B,IACAN,kBAAkB,YAAEZ,MAAA,EAAAmB,KAAA,EAAyB;EAAA,IAAhB3B,MAAA,GAAA2B,KAAA,CAAA3B,MAAA;IAAQC,IAAA,GAAA0B,KAAA,CAAA1B,IAAA;EACpCO,MAAA,CAAMR,MAAA,GAASA,MAAA;EACfQ,MAAA,CAAMP,IAAA,GAAOA,IAAA;EACbO,MAAA,CAAMN,eAAA,GAAkB;AACzB,EACH;AAGA,IAAM0B,OAAA,GAAU;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAORC,KAAA,WAAAA,MAAAC,KAAA,EAAkBC,WAAA,EAAa;IAAA,OAAAC,kBAAA,eAAAC,oBAAA,GAAAC,IAAA,UAAAC,QAAA;MAAA,IAAAC,MAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,QAAA,EAAAC,cAAA,EAAA3C,KAAA,EAAAG,MAAA,EAAAC,IAAA;MAAA,OAAAgC,oBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAvBT,MAAA,GAAAN,KAAA,CAAAM,MAAA;YACZA,MAAA,CAAOvB,aAAa;YAAA8B,QAAA,CAAAC,IAAA;YAAAD,QAAA,CAAAE,IAAA;YAAA,OAEKC,oBAAA,CAAQC,QAAA,CAACC,IAAA,CAAKnB,KAAA,CAAME,WAAW;UAAA;YAAhDQ,QAAA,GAAAI,QAAA,CAAAM,IAAA;YAAAT,cAAA,GAC0BD,QAAA,CAASW,IAAA,EAAjCrD,KAAA,GAAA2C,cAAA,CAAA3C,KAAA,EAAOG,MAAA,GAAAwC,cAAA,CAAAxC,MAAA,EAAQC,IAAA,GAAAuC,cAAA,CAAAvC,IAAA;YACvBmC,MAAA,CAAOtB,aAAA,EAAe;cAAEjB,KAAA,EAAAA,KAAA;cAAOG,MAAA,EAAAA,MAAA;cAAQC,IAAA,EAAAA;YAAM;YAAA,OAAA0C,QAAA,CAAAQ,MAAA,WACtC;cAAEC,OAAA,EAAS;cAAMF,IAAA,EAAMX,QAAA,CAASW;YAAI;UAAA;YAAAP,QAAA,CAAAC,IAAA;YAAAD,QAAA,CAAAU,EAAA,GAAAV,QAAA;YAE3CP,MAAA,CAAOrB,aAAA,IAAeuB,EAAA,IAAAD,EAAA,GAAAM,QAAA,CAAAU,EAAA,CAAMd,QAAA,KAAN,gBAAAF,EAAA,CAAgBa,IAAA,KAAhB,gBAAAZ,EAAA,CAAsBgB,OAAA,KAAW,MAAM;YAAA,OAAAX,QAAA,CAAAQ,MAAA,WACtD;cAAEC,OAAA,EAAS;cAAO3B,KAAA,EAAAkB,QAAA,CAAAU;YAAA;UAAA;UAAA;YAAA,OAAAV,QAAA,CAAAY,IAAA;QAAA;MAAA,GAAApB,OAAA;IAAA;EAE5B;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQKqB,QAAA,WAAAA,SAAAC,KAAA,EAAqBC,QAAA,EAAU;IAAA,OAAA1B,kBAAA,eAAAC,oBAAA,GAAAC,IAAA,UAAAyB,SAAA;MAAA,IAAAvB,MAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,QAAA;MAAA,OAAAN,oBAAA,GAAAQ,IAAA,UAAAmB,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAjB,IAAA,GAAAiB,SAAA,CAAAhB,IAAA;UAAA;YAApBT,MAAA,GAAAqB,KAAA,CAAArB,MAAA;YACfA,MAAA,CAAOpB,gBAAgB;YAAA6C,SAAA,CAAAjB,IAAA;YAAAiB,SAAA,CAAAhB,IAAA;YAAA,OAEEC,oBAAA,CAAQC,QAAA,CAACC,IAAA,CAAKQ,QAAA,CAASE,QAAQ;UAAA;YAAhDnB,QAAA,GAAAsB,SAAA,CAAAZ,IAAA;YACNb,MAAA,CAAOnB,gBAAgB;YAAA,OAAA4C,SAAA,CAAAV,MAAA,WAChB;cAAEC,OAAA,EAAS;cAAMF,IAAA,EAAMX,QAAA,CAASW;YAAI;UAAA;YAAAW,SAAA,CAAAjB,IAAA;YAAAiB,SAAA,CAAAR,EAAA,GAAAQ,SAAA;YAE3CzB,MAAA,CAAOlB,gBAAA,IAAkBoB,EAAA,IAAAD,EAAA,GAAAwB,SAAA,CAAAR,EAAA,CAAMd,QAAA,KAAN,gBAAAF,EAAA,CAAgBa,IAAA,KAAhB,gBAAAZ,EAAA,CAAsBgB,OAAA,KAAW,MAAM;YAAA,OAAAO,SAAA,CAAAV,MAAA,WACzD;cAAEC,OAAA,EAAS;cAAO3B,KAAA,EAAAoC,SAAA,CAAAR;YAAA;UAAA;UAAA;YAAA,OAAAQ,SAAA,CAAAN,IAAA;QAAA;MAAA,GAAAI,QAAA;IAAA;EAE5B;EAAA;AAAA;AAAA;AAAA;EAMDG,MAAA,WAAAA,OAAAC,KAAA,EAAmB;IAAA,IAAV3B,MAAA,GAAA2B,KAAA,CAAA3B,MAAA;IAEPA,MAAA,CAAOjB,MAAM;EACd;EAAA;AAAA;AAAA;AAAA;AAAA;EAOK6C,eAAA,WAAAA,gBAAAC,KAAA,EAAmC;IAAA,OAAAjC,kBAAA,eAAAC,oBAAA,GAAAC,IAAA,UAAAgC,SAAA;MAAA,IAAA9B,MAAA,EAAA5B,MAAA,EAAA+B,QAAA,EAAA4B,eAAA,EAAAnE,MAAA,EAAAC,IAAA;MAAA,OAAAgC,oBAAA,GAAAQ,IAAA,UAAA2B,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAzB,IAAA,GAAAyB,SAAA,CAAAxB,IAAA;UAAA;YAAjBT,MAAA,GAAA6B,KAAA,CAAA7B,MAAA,EAAQ5B,MAAA,GAAAyD,KAAA,CAAArE,KAAA;YAAA,IACzBY,MAAA,CAAMX,KAAA;cAAAwE,SAAA,CAAAxB,IAAA;cAAA;YAAA;YAAA,OAAAwB,SAAA,CAAAlB,MAAA,WAAc;UAAA;YAAAkB,SAAA,CAAAzB,IAAA;YAAAyB,SAAA,CAAAxB,IAAA;YAAA,OAGAC,oBAAA,CAAAC,QAAA,CAASC,IAAA,CAAKsB,WAAA,EAAW;UAAA;YAA1C/B,QAAA,GAAA8B,SAAA,CAAApB,IAAA;YAAAkB,eAAA,GACmB5B,QAAA,CAASW,IAAA,EAA1BlD,MAAA,GAAAmE,eAAA,CAAAnE,MAAA,EAAQC,IAAA,GAAAkE,eAAA,CAAAlE,IAAA;YAChBmC,MAAA,CAAOhB,kBAAA,EAAoB;cAAEpB,MAAA,EAAAA,MAAA;cAAQC,IAAA,EAAAA;YAAM;YAAA,OAAAoE,SAAA,CAAAlB,MAAA,WACpCZ,QAAA,CAASW,IAAA;UAAA;YAAAmB,SAAA,CAAAzB,IAAA;YAAAyB,SAAA,CAAAhB,EAAA,GAAAgB,SAAA;YAEhBjC,MAAA,CAAOjB,MAAM;YAAA,OAAAkD,SAAA,CAAAlB,MAAA,WACN;UAAA;UAAA;YAAA,OAAAkB,SAAA,CAAAd,IAAA;QAAA;MAAA,GAAAW,QAAA;IAAA;EAEV;AACH;AAEA,IAAelB,IAAA;EACbuB,UAAA,EAAY;EACZ3E,KAAA,EAAAA,KAAA;EACAW,OAAA,EAAAA,OAAA;EACAqB,OAAA,EAAAA,OAAA;EACAP,SAAA,EAAAA;AACF","ignoreList":[]}