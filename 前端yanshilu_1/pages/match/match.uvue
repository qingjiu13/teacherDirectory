<template>
	<view class="container" @click="onPageClick">
		<!-- 筛选区域 -->
		<view class="filter-section" @click.stop>
			<!-- 第一行：学校和专业 -->
			<view class="filter-row">
				<view class="choice-wrapper flex-1">
					<choice-selected 
						:defaultText="'学校'" 
						:choiceIndex="schoolIndex" 
						:choiceList="schoolList"
						mode="search"
						:searchPlaceholder="'学校'"
						@onChoiceClick="onSchoolClick"
						@search-input="onSchoolSearch">
					</choice-selected>
				</view>
				
				<view class="choice-wrapper flex-1">
					<choice-selected 
						:defaultText="'专业'" 
						:choiceIndex="majorIndex" 
						:choiceList="majorList"
						@onChoiceClick="onMajorClick">
					</choice-selected>
				</view>
			</view>
			
			<!-- 第二行：排序筛选和筛选按钮 -->
			<view class="filter-row">
				<view class="choice-wrapper flex-1">
					<choice-selected 
						:defaultText="'排序筛选'" 
						:choiceIndex="sortIndex" 
						:choiceList="sortList"
						@onChoiceClick="onSortClick">
					</choice-selected>
				</view>
				
				<view class="filter-btn-wrapper">
					<button class="filter-btn" @click="applyFilter">筛选</button>
				</view>
			</view>
		</view>
		
		<!-- 老师卡片列表 -->
		<scroll-view class="card-list" scroll-y="true" id="step2" @scrolltolower="loadMoreTeachers">
			<view class="teacher-card" v-for="(teacher, index) in filteredTeachers" :key="index">
				<view class="card-left">
					<image class="teacher-avatar" :src="teacher.avatar || '/static/image/tab-bar/default_avatar.png'" mode="aspectFill" @tap="viewTeacherDetail(teacher.id)"></image>
				</view>
				<view class="card-middle">
					<view class="card-middle-top">
						<view class="teacher-name">{{ teacher.nickname }}</view>
						<view class="teacher-info">{{ teacher.school }} | {{ teacher.major }} | {{ teacher.score }}</view>
					</view>
					<view class="teacher-tags">
						<view class="tag" v-for="(tag, tagIndex) in teacher.tags" :key="tagIndex">{{ tag }}</view>
					</view>
				</view>
				<view class="card-right">
					<button class="communicate-btn" @click.stop="handleCommunicate(teacher.id)">马上沟通</button>
				</view>
			</view>
			
			<view class="empty-state" v-if="filteredTeachers.length === 0 && !isLoading && !isLoadingMore">
				<text>暂无匹配的老师信息</text>
			</view>
			
			<!-- 加载更多状态 -->
			<view class="loading-more" v-if="isLoadingMore">
				<text>加载更多...</text>
			</view>
			
			<!-- 无更多数据提示 -->
			<view class="no-more-data" v-if="!hasMoreData && filteredTeachers.length > 0 && !isLoadingMore">
				<text>没有更多数据了</text>
			</view>
		</scroll-view>
		
		<!-- 加载提示 -->
		<view class="loading-mask" v-if="isLoading">
			<view class="loading-content">
				<text>正在连接中...</text>
			</view>
		</view>
	</view>
</template>

<script>
	import choiceSelected from '../../components/combobox/combobox'
	import { Navigator } from '@/router/Router.js'
	import store from '@/store/index.js'
	import { mapState, mapGetters, mapActions } from 'vuex'
	
	export default {
		components: {
			choiceSelected
		},
		async onLoad() {
			console.log('匹配页面已加载');
			
			// 加载老师列表
			await this.getTeachersList();
		},
		data() {
			return {
				// 筛选相关数据
				schoolList: [
					{ choiceItemId: "bjdx", choiceItemContent: "北京大学" },
					{ choiceItemId: "qhdx", choiceItemContent: "清华大学" },
					{ choiceItemId: "fddx", choiceItemContent: "复旦大学" },
					{ choiceItemId: "zjdx", choiceItemContent: "浙江大学" },
					{ choiceItemId: "njdx", choiceItemContent: "南京大学" },
					{ choiceItemId: "scdx", choiceItemContent: "四川大学" },
					{ choiceItemId: "whdx", choiceItemContent: "武汉大学" },
					{ choiceItemId: "zsdx", choiceItemContent: "中山大学" },
					{ choiceItemId: "xjtu", choiceItemContent: "西安交通大学" },
					{ choiceItemId: "sysu", choiceItemContent: "中山大学" },
					{ choiceItemId: "hust", choiceItemContent: "华中科技大学" },
					{ choiceItemId: "hit", choiceItemContent: "哈尔滨工业大学" },
					{ choiceItemId: "sjtu", choiceItemContent: "上海交通大学" }
				],
				majorList: [
					{ choiceItemId: "jsjkx", choiceItemContent: "计算机科学" },
					{ choiceItemId: "rjgc", choiceItemContent: "软件工程" },
					{ choiceItemId: "sx", choiceItemContent: "数学" },
					{ choiceItemId: "wl", choiceItemContent: "物理" },
					{ choiceItemId: "hx", choiceItemContent: "化学" },
					{ choiceItemId: "sw", choiceItemContent: "生物" },
					{ choiceItemId: "jdxy", choiceItemContent: "机电工程" },
					{ choiceItemId: "dqxy", choiceItemContent: "电气工程" },
					{ choiceItemId: "jzxy", choiceItemContent: "建筑学" },
					{ choiceItemId: "lyxy", choiceItemContent: "临床医学" },
					{ choiceItemId: "yyxy", choiceItemContent: "药学" },
					{ choiceItemId: "glxy", choiceItemContent: "管理学" },
					{ choiceItemId: "jjxy", choiceItemContent: "经济学" },
					{ choiceItemId: "flxy", choiceItemContent: "法学" }
				],
				sortList: [
					{ choiceItemId: "zh", choiceItemContent: "综合排序" }
				],
				// 临时选择变量（用户选择但尚未应用）
				tempSelectedSchool: '',
				tempSelectedMajor: '',
				tempSelectedSort: '综合排序',
				// 下拉框索引
				schoolIndex: -1,
				majorIndex: -1,
				sortIndex: -1
			}
		},
		computed: {
			...mapState('match', [
				'teachers',
				'currentPage',
				'totalPages',
				'loading',
				'loadingMore'
			]),
			...mapGetters('match', [
				'filteredTeachers',
				'isLoading',
				'isLoadingMore',
				'hasMoreData'
			])
		},
		methods: {
			...mapActions('match', [
				'getTeachers',
				'loadMoreTeachers',
				'searchTeachers',
				'resetAndGetTeachers',
				'selectTeacher'
			]),
			
			// 获取老师列表
			async getTeachersList() {
				await this.getTeachers({ page: 1, limit: 10 });
			},
			
			// 页面点击事件
			onPageClick() {
				// 关闭所有下拉框
				let comboboxComponents = this.$children.filter(child => child.$options.name === 'ChoiceSelected');
				comboboxComponents.forEach(component => {
					if (component.closeDropdown) {
						component.closeDropdown();
					}
				});
			},
			
			// 应用筛选
			async applyFilter() {
				// 将临时选择的筛选条件应用到搜索
				const filters = {
					school: this.tempSelectedSchool,
					major: this.tempSelectedMajor
				};
				
				console.log('应用筛选:', filters);
				
				// 使用Vuex action搜索老师
				await this.searchTeachers(filters);
			},
			
			// 下拉框选择处理
			onSchoolClick(position) {
				this.schoolIndex = position;
				// 只更新临时选择，不立即应用
				this.tempSelectedSchool = this.schoolList[position].choiceItemContent;
			},
			
			onMajorClick(position) {
				this.majorIndex = position;
				// 只更新临时选择，不立即应用
				this.tempSelectedMajor = this.majorList[position].choiceItemContent;
			},
			
			onSortClick(position) {
				this.sortIndex = position;
				// 只更新临时选择，不立即应用
				this.tempSelectedSort = this.sortList[position].choiceItemContent;
			},
			
			/**
			 * @description 处理学校搜索输入事件
			 * @param {String} keyword - 搜索关键词
			 */
			onSchoolSearch(keyword) {
				console.log('学校搜索:', keyword);
				// 此处无需实际处理，因为学校列表已在本地
			},
			
			// 与老师沟通
			handleCommunicate(teacherId) {
				// 选择老师，保存到store
				this.selectTeacher(teacherId);
				
				// 显示加载状态
				uni.showLoading({
					title: '正在连接...'
				});
				
				// 模拟延迟后跳转
				setTimeout(() => {
					uni.hideLoading();
					// 使用router.js中的方法跳转到聊天页面
					Navigator.toChat(teacherId);
				}, 1000);
			},
			
			// 查看老师详情
			viewTeacherDetail(teacherId) {
				// 选择老师，保存到store
				this.selectTeacher(teacherId);
				
				// 跳转到老师详情页
				Navigator.toTeacher(teacherId);
			}
		}
	}
</script>

<style>
	.container {
		display: flex;
		flex-direction: column;
		height: 100vh;
		background-color: #F5F9FC;
		position: relative;
		overflow: hidden;
		width: 100%;
	}
	
	.filter-section {
		display: flex;
		flex-direction: column;
		padding: 15px;
		background-color: #ffffff;
		border-radius: 15px;
		margin: 15px 10px;
		margin-top: 20px;
		width: auto;
	}
	
	.filter-row {
		display: flex;
		flex-direction: row;
		width: 100%;
		margin-bottom: 10px;
	}
	
	.filter-row:last-child {
		margin-bottom: 0;
	}
	
	.choice-wrapper {
		flex: 1;
		margin: 0 4px;
		min-width: 90px;
	}
	
	.flex-1 {
		flex: 1;
	}
	
	.card-list {
		flex: 1;
		padding: 10px 15px;
		position: relative;
		z-index: 1;
	}
	
	.teacher-card {
		display: flex;
		flex-direction: row;
		background-color: #ffffff;
		border-radius: 16px;
		padding: 18px;
		margin-bottom: 15px;
		box-shadow: 0 4px 12px rgba(30, 144, 255, 0.1);
		position: relative;
		min-height: 110px;
	}
	
	.card-left {
		margin-right: 15px;
		align-self: flex-start;
	}
	
	.teacher-avatar {
		width: 70px;
		height: 70px;
		border-radius: 35px;
		background-color: #f5f5f5;
	}
	
	.card-middle {
		flex: 1;
		padding-right: 65px;
		display: flex;
		flex-direction: column;
		min-height: 70px;
		justify-content: space-between;
		width: calc(100% - 85px);
		box-sizing: border-box;
	}
	
	.card-middle-top {
		display: flex;
		flex-direction: column;
		width: 100%;
	}
	
	.teacher-name {
		font-size: 18px;
		font-weight: bold;
		margin-bottom: 6px;
		color: #333333;
	}
	
	.teacher-info {
		font-size: 14px;
		color: #666666;
		margin-bottom: 12px;
	}
	
	.teacher-tags {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		gap: 8px;
		width: 100%;
		margin-top: 0;
	}
	
	.tag {
		font-size: 12px;
		color: #ffffff;
		background-color: #87CEEB;
		padding: 3px 10px;
		border-radius: 12px;
		white-space: nowrap;
		display: inline-flex;
		align-items: center;
		box-sizing: border-box;
		flex: 0 0 auto;
	}
	
	.card-right {
		position: absolute;
		top: 18px;
		right: 18px;
		z-index: 2;
	}
	
	.communicate-btn {
		background-color: #1E90FF;
		color: #ffffff;
		font-size: 14px;
		padding: 6px 12px;
		border-radius: 20px;
		border: none;
		font-weight: 500;
		line-height: 1.2;
		min-width: 80px;
	}
	
	.empty-state {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		height: 200px;
		color: #999999;
		font-size: 16px;
	}
	
	.loading-mask {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0, 0, 0, 0.6);
		display: flex;
		justify-content: center;
		align-items: center;
		z-index: 1001;
	}
	
	.loading-content {
		background-color: #ffffff;
		padding: 25px 30px;
		border-radius: 16px;
	}
	
	.filter-btn-wrapper {
		display: flex;
		justify-content: center;
		align-items: center;
		margin-left: 10px;
		width: 100px;
	}
	
	.filter-btn {
		background-color: #1E90FF;
		color: #ffffff;
		font-size: 14px;
		padding: 0 15px;
		height: 60rpx;
		line-height: 60rpx;
		border-radius: 10rpx;
		border: none;
		font-weight: 500;
		width: 100%;
		text-align: center;
		box-shadow: 0 2px 6px rgba(30, 144, 255, 0.2);
	}
	
	.loading-more, .no-more-data {
		display: flex;
		justify-content: center;
		align-items: center;
		height: 60px;
		color: #999999;
		font-size: 14px;
	}
</style>
