<template>
  <view class="order-container">
    <!-- 水平Tab栏 -->
    <scroll-view 
      class="tab-bar" 
      scroll-x 
      :scroll-into-view="'tab-' + currentTab"
      :scroll-with-animation="true"
    >
      <view 
        v-for="(tab, index) in tabs" 
        :key="index"
        :id="'tab-' + index"
        class="tab-item"
        :class="{ active: currentTab === index }"
        @click="switchTab(index)"
      >
        {{ tab.name }}
      </view>
    </scroll-view>

    <!-- 订单列表 -->
    <scroll-view 
      class="order-list"
      scroll-y
      @scrolltolower="loadMore"
    >
      <view 
        v-for="(order, index) in orderList" 
        :key="index"
        class="order-item"
      >
        <view class="order-header">
          <text class="order-id">订单号：{{ order.orderId }}</text>
          <text class="order-status">{{ order.status }}</text>
        </view>
        
        <view class="order-content">
          <image 
            class="order-image" 
            :src="order.image" 
            mode="aspectFill"
          ></image>
          <view class="order-info">
            <text class="order-title">{{ order.title }}</text>
            <text class="order-price">¥{{ order.price }}</text>
            <text class="order-time">{{ order.createTime }}</text>
          </view>
        </view>

        <view class="order-footer">
          <button 
            v-if="order.status === '待支付'"
            class="pay-btn"
            @click="handlePay(order)"
          >立即支付</button>
          <button 
            v-if="order.status === '已完成'"
            class="review-btn"
            @click="handleReview(order)"
          >评价</button>
          <button 
            v-if="order.status === '待支付'"
            class="cancel-btn"
            @click="handleCancel(order)"
          >取消订单</button>
        </view>
      </view>
    </scroll-view>
  </view>
</template>

<script>
export default {
  data() {
    return {
      tabs: [
        { name: '待支付', status: 'pending' },
        { name: '已完成', status: 'completed' },
        { name: '已取消', status: 'cancelled' }
      ],
      currentTab: 0,
      orderList: [],
      page: 1,
      pageSize: 10
    }
  },
  
  onLoad() {
    this.loadOrders();
  },
  
  methods: {
    // 切换Tab
    switchTab(index) {
      this.currentTab = index;
      this.page = 1;
      this.orderList = [];
      this.loadOrders();
    },
    
    // 加载订单列表
    loadOrders() {
      // 模拟数据
      const mockOrders = this.generateMockOrders();
      this.orderList = [...this.orderList, ...mockOrders];
    },
    
    // 加载更多
    loadMore() {
      this.page++;
      this.loadOrders();
    },
    
    // 生成模拟订单数据
    generateMockOrders() {
      const statusMap = {
        0: '待支付',
        1: '已完成',
        2: '已取消'
      };
      
      const orders = [];
      for (let i = 0; i < this.pageSize; i++) {
        orders.push({
          orderId: `ORDER${Date.now()}${i}`,
          title: `课程${i + 1}`,
          price: (Math.random() * 1000).toFixed(2),
          image: '/static/image/default_course.png',
          createTime: new Date().toLocaleString(),
          status: statusMap[this.currentTab]
        });
      }
      return orders;
    },
    
    // 处理支付
    handlePay(order) {
      uni.showModal({
        title: '确认支付',
        content: `是否确认支付订单 ${order.orderId}？`,
        success: (res) => {
          if (res.confirm) {
            uni.showLoading({
              title: '支付中...'
            });
            // 模拟支付过程
            setTimeout(() => {
              uni.hideLoading();
              uni.showToast({
                title: '支付成功',
                icon: 'success'
              });
              this.loadOrders();
            }, 1500);
          }
        }
      });
    },
    
    // 处理评价
    handleReview(order) {
      uni.navigateTo({
        url: `/pages/order/review?orderId=${order.orderId}`
      });
    },
    
    // 处理取消
    handleCancel(order) {
      uni.showModal({
        title: '确认取消',
        content: `是否确认取消订单 ${order.orderId}？`,
        success: (res) => {
          if (res.confirm) {
            uni.showLoading({
              title: '处理中...'
            });
            // 模拟取消过程
            setTimeout(() => {
              uni.hideLoading();
              uni.showToast({
                title: '已取消',
                icon: 'success'
              });
              this.loadOrders();
            }, 1000);
          }
        }
      });
    }
  }
}
</script>

<style>
.order-container {
  display: flex;
  flex-direction: column;
  height: 100vh;
  background-color: #f5f5f5;
}

.tab-bar {
  display: flex;
  flex-direction: row;
  background-color: #ffffff;
  padding: 20rpx 0;
  position: sticky;
  top: 0;
  z-index: 100;
  white-space: nowrap;
  width: 100%;
}

.tab-item {
  display: inline-block;
  padding: 0 30rpx;
  text-align: center;
  font-size: 28rpx;
  color: #666;
  position: relative;
  flex-shrink: 0;
}

.tab-item.active {
  color: #007AFF;
  font-weight: bold;
}

.tab-item.active::after {
  content: '';
  position: absolute;
  bottom: -20rpx;
  left: 50%;
  transform: translateX(-50%);
  width: 40rpx;
  height: 4rpx;
  background-color: #007AFF;
}

.order-list {
  flex: 1;
  padding: 20rpx;
}

.order-item {
  background-color: #ffffff;
  border-radius: 12rpx;
  margin-bottom: 20rpx;
  padding: 20rpx;
  box-shadow: 0 2rpx 10rpx rgba(0, 0, 0, 0.05);
}

.order-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 20rpx;
}

.order-id {
  font-size: 24rpx;
  color: #999;
}

.order-status {
  font-size: 24rpx;
  color: #007AFF;
}

.order-content {
  display: flex;
  margin-bottom: 20rpx;
}

.order-image {
  width: 160rpx;
  height: 160rpx;
  border-radius: 8rpx;
  margin-right: 20rpx;
}

.order-info {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.order-title {
  font-size: 28rpx;
  color: #333;
  margin-bottom: 10rpx;
}

.order-price {
  font-size: 32rpx;
  color: #ff4d4f;
  font-weight: bold;
}

.order-time {
  font-size: 24rpx;
  color: #999;
}

.order-footer {
  display: flex;
  justify-content: flex-end;
  gap: 20rpx;
}

.pay-btn,
.review-btn,
.cancel-btn {
  padding: 10rpx 30rpx;
  font-size: 24rpx;
  border-radius: 30rpx;
}

.pay-btn {
  background-color: #007AFF;
  color: #ffffff;
}

.review-btn {
  background-color: #ffffff;
  color: #007AFF;
  border: 1rpx solid #007AFF;
}

.cancel-btn {
  background-color: #ffffff;
  color: #999;
  border: 1rpx solid #999;
}
</style> 