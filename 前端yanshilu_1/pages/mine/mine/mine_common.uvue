<template>
  <view class="container">
    <!-- 用户信息区 -->
    <view class="user-info">
      <view class="user-info-row">
        <image class="avatar" :src="userData.avatarUrl || '/static/image/tab-bar/default_avatar.png'" mode="aspectFill" @click="handleAvatarClick"></image>
        <view class="login-tag-container">
          <text class="login-text" @click="handleLoginClick">{{ userData.nickname || userName || '登录' }}</text>
          <view class="tag-btn" v-if="userData.tag">
            <text>{{ userData.tag }}</text>
          </view>
          <view class="tag-btn" v-else>
            <text>标签</text>
          </view>
        </view>
      </view>
      
      <!-- 修改个人信息按钮 -->
      <view class="edit-profile-btn" @click="handleEditProfile">
        <text>修改个人信息</text>
      </view>
    </view>
    
    <!-- 菜单列表 -->
    <view class="menu-list">
      <!-- 老师特有功能菜单 -->
      <view v-if="userRole === 'teacher'" class="menu-item" @click="navigateTo(MineRoutes.SERVICE)">
        <view class="icon-circle info">
          <text class="icon-text">⏱</text>
        </view>
        <text class="menu-text">我的服务</text>
      </view>
      
      <!-- 共有菜单项：我的订单 -->
      <view class="menu-item" @click="navigateTo(MineRoutes.ORDER)">
        <view class="icon-circle success">
          <text class="icon-text">✓</text>
        </view>
        <text class="menu-text">我的订单</text>
      </view>
      
      <!-- 共有菜单项：我的课程 -->
      <view class="menu-item" @click="navigateTo(MineRoutes.COURSE)">
        <view class="icon-circle info">
          <text class="icon-text">📚</text>
        </view>
        <text class="menu-text">我的课程</text>
      </view>
      
      <!-- 老师特有菜单项：资质认证 -->
      <view v-if="userRole === 'teacher'" class="menu-item" @click="navigateTo(MineRoutes.QUALIFICATION)">
        <view class="icon-circle info">
          <text class="icon-text">📃</text>
        </view>
        <text class="menu-text">资质认证</text>
      </view>
      
      <!-- 老师特有菜单项：我的钱包 -->
      <view v-if="userRole === 'teacher'" class="menu-item" @click="navigateTo(MineRoutes.WALLET)">
        <view class="icon-circle warning">
          <text class="icon-text">💰</text>
        </view>
        <text class="menu-text">我的钱包</text>
      </view>
      
      <!-- 共有菜单项：关注公众号 -->
      <view class="menu-item" @click="navigateTo('/pages/subscribe/subscribe')">
        <view class="icon-circle info">
          <text class="icon-text">📢</text>
        </view>
        <text class="menu-text">关注公众号</text>
      </view>
      
      <!-- 共有菜单项：设置 -->
      <view class="menu-item" @click="navigateTo(MineRoutes.SETTINGS)">
        <view class="icon-circle info">
          <text class="icon-text">⚙️</text>
        </view>
        <text class="menu-text">设置</text>
      </view>
    </view>
    
    <!-- 添加自定义底部导航栏 -->
    <TabBar pageName="mine" />
  </view>
</template>

<script>
/**
 * @description 我的页面（通用）
 */
import { Navigator, MineRoutes } from '@/router/Router.js';
import TabBar from '../../../components/tab-bar/tab-bar.uvue';
import store, { loadTeacherData, loadStudentData } from '@/store/index.js';
import { services } from '@/store/services';

export default {
  components: {
    TabBar
  },
  data() {
    return {
      userRole: 'student', // 默认为学生角色
      userName: '',
      userData: {},
      isLoggedIn: true, // 默认设为true方便调试
      MineRoutes, // 引入路由对象方便模板使用
      isLoading: false // 加载状态
    }
  },
  async onLoad() {
    // 设置加载状态
    this.isLoading = true;
    
    try {
      // 获取用户角色信息或使用默认值
      const storedUserRole = uni.getStorageSync('userRole') || 'student';
      this.userRole = storedUserRole;
      
      // 根据角色加载数据
      if (this.userRole === 'teacher') {
        // 加载教师特有数据
        await loadTeacherData();
        console.log('教师数据已加载');
      } else {
        // 加载学生特有数据
        await loadStudentData();
        console.log('学生数据已加载');
      }
      
      // 加载测试数据
      this.loadMockData();
      console.log("当前用户角色:", this.userRole);
    } catch (error) {
      console.error('加载用户数据失败:', error);
    } finally {
      this.isLoading = false;
    }
  },
  async onShow() {
    // 每次显示页面时检查登录状态
    const token = uni.getStorageSync('token');
    const isCurrentlyLoggedIn = !!token;
    
    // 更新登录状态并处理相应的UI
    this.isLoggedIn = isCurrentlyLoggedIn;
    if (!this.isLoggedIn) {
      // 用户未登录，清除显示数据
      this.userData = {};
      this.userName = '';
      console.log('onShow: 用户未登录，清除用户数据显示');
      return; // 未登录则不继续加载数据
    }
    
    const storedUserRole = uni.getStorageSync('userRole');
    
    // 检查并获取模拟数据设置
    const useMockData = uni.getStorageSync('use_mock_api') === 'true';
    console.log('onShow: 模拟数据状态:', useMockData ? '启用' : '禁用');
    
    if (storedUserRole && storedUserRole !== this.userRole) {
      this.isLoading = true;
      
      try {
        this.userRole = storedUserRole;
        
        // 角色变更时重新加载相应数据
        if (this.userRole === 'teacher') {
          await loadTeacherData();
          console.log('教师数据已重新加载');
        } else {
          await loadStudentData();
          console.log('学生数据已重新加载');
        }
        
        // 确保无论是否角色变更，都重新加载对应的测试数据
        this.loadMockData();
        console.log("onShow 更新用户角色:", this.userRole);
      } catch (error) {
        console.error('角色切换时加载数据失败:', error);
      } finally {
        this.isLoading = false;
      }
    } else {
      // 即使角色没变，也要检查是否需要重新加载模拟数据
      // 避免因为设置变更而数据未更新的情况
      if (useMockData) {
        this.loadMockData();
        console.log('onShow: 重新加载模拟数据');
      }
    }
  },
  methods: {
    /**
     * @description 加载模拟数据
     */
    loadMockData() {
      // 检查是否使用模拟数据 - 增强检测逻辑
      const storageSetting = uni.getStorageSync('use_mock_api');
      const useMockData = storageSetting === 'true' || process.env.NODE_ENV === 'development';
      
      console.log('加载用户数据，模拟数据状态:', useMockData ? '启用' : '禁用', 'Storage值:', storageSetting);
      
      // 如果明确设置了使用模拟数据，确保设置保持一致
      if (useMockData && storageSetting !== 'true') {
        uni.setStorageSync('use_mock_api', 'true');
        console.log('已更新storage中的模拟数据设置为: true');
      }
      
      // 首先检查登录状态
      const token = uni.getStorageSync('token');
      this.isLoggedIn = !!token;
      
      // 如果未登录，清除用户数据并返回
      if (!this.isLoggedIn) {
        this.userData = {};
        this.userName = '';
        console.log('用户未登录，不加载用户资料');
        return;
      }
      
      // 使用services.user.getUserProfile获取用户资料
      // 这将调用user.api.js中的getUserProfile方法
      this.isLoading = true;
      
      services.user.getUserProfile(this.userRole)
        .then(response => {
          if (response && response.data) {
            this.userData = response.data;
            this.userName = this.userData.nickname || '用户';
            
            // 同步更新到storage，但不重设token
            uni.setStorageSync('userRole', this.userRole);
            uni.setStorageSync('userInfo', JSON.stringify(this.userData));
            // 不再设置模拟token：uni.setStorageSync('token', 'mock_token_for_testing');
            
            console.log("加载用户资料成功:", this.userData);
          } else {
            console.error('获取用户资料失败: 响应数据无效');
          }
        })
        .catch(error => {
          console.error('获取用户资料失败:', error);
        })
        .finally(() => {
          this.isLoading = false;
        });
    },
    
    /**
     * @description 处理头像点击
     */
    handleAvatarClick() {
      // 简化处理，不检查登录状态
      this.handleEditProfile();
    },
    
    /**
     * @description 处理登录文本点击
     */
    handleLoginClick() {
      // 简化处理，不检查登录状态
      this.handleEditProfile();
    },
    
    /**
     * @description 跳转到修改个人信息页面
     */
    handleEditProfile() {
      // 简化处理，不检查登录状态
      Navigator.toModify();
    },
    
    /**
     * @description 页面跳转方法
     * @param {string} url - 目标页面路径
     */
    navigateTo(url) {
      // 简化处理，不检查登录状态
      Navigator.navigateTo(url);
    }
  }
}
</script>

<style>
.container {
  display: flex;
  flex-direction: column;
  min-height: 100%;
  padding-bottom: 55px; /* 为自定义tabBar留出空间 */
  background-color: #ffffff;
}

/* 用户信息区样式 */
.user-info {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  padding: 30rpx;
  border-bottom: 1px solid #f0f0f0;
}

.user-info-row {
  display: flex;
  flex-direction: row;
  align-items: center;
  width: 100%;
  margin-bottom: 20rpx;
}

.avatar {
  width: 120rpx;
  height: 120rpx;
  border-radius: 50%;
  margin-right: 20rpx;
}

.login-tag-container {
  display: flex;
  flex-direction: row;
  align-items: center;
}

.login-text {
  font-size: 32rpx;
  font-weight: bold;
  margin-right: 20rpx;
}

.tag-btn {
  background-color: #f5f5f5;
  border-radius: 30rpx;
  padding: 8rpx 30rpx;
}

.tag-btn text {
  font-size: 26rpx;
  color: #666;
}

/* 修改个人信息按钮 */
.edit-profile-btn {
  background-color: #f5f5f5;
  border-radius: 10rpx;
  padding: 15rpx 30rpx;
  margin-top: 10rpx;
  align-self: flex-start;
}

.edit-profile-btn text {
  font-size: 28rpx;
  color: #333;
}

/* 菜单列表 */
.menu-list {
  width: 100%;
}

.menu-item {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;
  padding: 30rpx 0;
  border-bottom: 1px solid #f0f0f0;
}

.icon-circle {
  width: 60rpx;
  height: 60rpx;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 30rpx;
  flex-shrink: 0;
}

.success {
  background-color: rgba(76, 175, 80, 0.1);
}

.warning {
  background-color: rgba(255, 82, 82, 0.1);
}

.info {
  background-color: rgba(33, 150, 243, 0.1);
}

.icon-text {
  font-size: 30rpx;
  font-weight: bold;
}

.success .icon-text {
  color: #4CAF50;
}

.warning .icon-text {
  color: #FF5252;
}

.info .icon-text {
  color: #2196F3;
}

.menu-text {
  font-size: 30rpx;
  color: #333;
  text-align: left;
}
</style>