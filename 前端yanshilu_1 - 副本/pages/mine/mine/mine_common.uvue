<template>
  <view class="container">
    <!-- 用户信息区 -->
    <view class="user-info">
      <view class="user-info-row">
        <image class="avatar" :src="userData.avatarUrl || '/static/image/tab-bar/default_avatar.png'" mode="aspectFill" @click="handleAvatarClick"></image>
        <view class="user-info-content">
          <view class="nickname-row">
            <text class="login-text" @click="handleLoginClick">{{ userData.nickname || userName || '登录' }}</text>
          </view>
          
          <!-- 修改个人信息链接 -->
          <text class="edit-profile-link" @click="handleEditProfile">修改个人信息</text>
        </view>
      </view>
    </view>
    
    <!-- 菜单列表 -->
    <view class="menu-list">
      <!-- 老师特有功能菜单 -->
      <view v-if="userRole === 'teacher'" class="menu-item" @click="navigateTo(MineRoutes.SERVICE)">
        <view class="icon-circle info">
          <text class="icon-text">⏱</text>
        </view>
        <text class="menu-text">我的服务</text>
      </view>
      
      <!-- 共有菜单项：我的订单 -->
      <view class="menu-item" @click="navigateTo(MineRoutes.ORDER)">
        <view class="icon-circle success">
          <text class="icon-text">✓</text>
        </view>
        <text class="menu-text">我的订单</text>
      </view>
      
      <!-- 共有菜单项：我的课程 -->
      <view class="menu-item" @click="navigateTo(MineRoutes.COURSE)">
        <view class="icon-circle info">
          <text class="icon-text">📚</text>
        </view>
        <text class="menu-text">我的课程</text>
      </view>
      
      <!-- 老师特有菜单项：资质认证 -->
      <view v-if="userRole === 'teacher'" class="menu-item" @click="navigateTo(MineRoutes.QUALIFICATION)">
        <view class="icon-circle info">
          <text class="icon-text">📃</text>
        </view>
        <text class="menu-text">资质认证</text>
      </view>
      
      <!-- 老师特有菜单项：我的钱包 -->
      <view v-if="userRole === 'teacher'" class="menu-item" @click="navigateTo(MineRoutes.WALLET)">
        <view class="icon-circle warning">
          <text class="icon-text">💰</text>
        </view>
        <text class="menu-text">我的钱包</text>
      </view>
      
      <!-- 共有菜单项：关注公众号 -->
      <view class="menu-item" @click="navigateTo('/pages/subscribe/subscribe')">
        <view class="icon-circle info">
          <text class="icon-text">📢</text>
        </view>
        <text class="menu-text">关注公众号</text>
      </view>
      
      <!-- 共有菜单项：设置 -->
      <view class="menu-item" @click="navigateTo(MineRoutes.SETTINGS)">
        <view class="icon-circle info">
          <text class="icon-text">⚙️</text>
        </view>
        <text class="menu-text">设置</text>
      </view>
    </view>
    
    <!-- 添加自定义底部导航栏 -->
    <TabBar pageName="mine" />
  </view>
</template>

<script>
/**
 * @description 我的页面（通用）
 */
import { Navigator, MineRoutes } from '@/router/Router.js';
import TabBar from '../../../components/tab-bar/tab-bar.uvue';
import store, { loadTeacherData, loadStudentData } from '@/store/index.js';
import { services } from '@/store/services';
import { mapGetters } from 'vuex';

export default {
  components: {
    TabBar
  },
  data() {
    return {
      userRole: 'student', // 默认为学生角色
      userName: '',
      userData: {},
      isLoggedIn: false,
      MineRoutes,
      isLoading: false
    }
  },
  
  async onLoad() {
    await this.loadUserData();
  },
  
  async onShow() {
    const storedUserRole = uni.getStorageSync('userRole');
    if (storedUserRole && storedUserRole !== this.userRole) {
      this.userRole = storedUserRole;
      await this.loadUserData();
    } else {
      // 检查Vuex store是否有数据
      const userProfile = this.$store.getters['user/profile'];
      if (!userProfile || !userProfile.nickname) {
        await this.loadUserData();
      }
    }
  },
  
  methods: {
    /**
     * @description 加载用户数据
     */
    async loadUserData() {
      this.isLoading = true;
      
      try {
        // 检查模拟数据环境
        const useMockData = uni.getStorageSync('use_mock_api') === 'true' || process.env.NODE_ENV === 'development';
        if (useMockData && !uni.getStorageSync('token')) {
          uni.setStorageSync('token', 'mock_token_for_testing');
        }
        
        // 获取用户角色
        const storedUserRole = uni.getStorageSync('userRole') || 'student';
        this.userRole = storedUserRole;
        
        // 根据角色加载数据
        if (this.userRole === 'teacher') {
          await loadTeacherData();
        } else {
          await loadStudentData();
        }
        
        // 从Vuex获取用户资料
        await this.syncUserDataFromVuex();
      } catch (error) {
        // 出错时直接通过API获取数据
        this.loadUserDataFromApi();
      } finally {
        this.isLoading = false;
      }
    },
    
    /**
     * @description 从Vuex同步用户数据
     */
    async syncUserDataFromVuex() {
      try {
        await this.$store.dispatch('user/fetchProfile');
        
        const userProfile = this.$store.getters['user/profile'];
        if (userProfile && userProfile.nickname) {
          this.userData = { ...userProfile };
          this.userName = userProfile.nickname || '用户';
          
          // 同步更新到storage
          uni.setStorageSync('userRole', this.userRole);
          uni.setStorageSync('userInfo', JSON.stringify(this.userData));
        } else {
          // 如果Vuex没有数据，则使用API直接获取
          this.loadUserDataFromApi();
        }
      } catch (error) {
        this.loadUserDataFromApi();
      }
    },

    /**
     * @description 从API直接获取用户资料
     */
    loadUserDataFromApi() {
      services.user.getUserProfile(this.userRole)
        .then(response => {
          if (response && response.data) {
            this.userData = response.data;
            this.userName = this.userData.nickname || '用户';
            
            // 同步更新到storage
            uni.setStorageSync('userRole', this.userRole);
            uni.setStorageSync('userInfo', JSON.stringify(this.userData));
          }
        })
        .catch(error => {})
        .finally(() => {
          this.isLoading = false;
        });
    },
    
    /**
     * @description 处理头像点击
     */
    handleAvatarClick() {
      this.handleEditProfile();
    },
    
    /**
     * @description 处理登录文本点击
     */
    handleLoginClick() {
      this.handleEditProfile();
    },
    
    /**
     * @description 跳转到修改个人信息页面
     */
    handleEditProfile() {
      Navigator.toModify();
    },
    
    /**
     * @description 页面跳转方法
     * @param {string} url - 目标页面路径
     */
    navigateTo(url) {
      Navigator.navigateTo(url);
    }
  }
}
</script>

<style>
.container {
  display: flex;
  flex-direction: column;
  min-height: 100%;
  padding-bottom: 55px; /* 为自定义tabBar留出空间 */
  background-color: #ffffff;
}

/* 用户信息区样式 */
.user-info {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  padding: 30rpx;
  border-bottom: 1px solid #f0f0f0;
}

.user-info-row {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  width: 100%;
  margin-bottom: 20rpx;
}

.avatar {
  width: 120rpx;
  height: 120rpx;
  border-radius: 50%;
  margin-right: 20rpx;
  flex-shrink: 0;
}

.user-info-content {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.nickname-row {
  display: flex;
  flex-direction: row;
  align-items: center;
  margin-bottom: 10rpx;
}

.login-text {
  font-size: 32rpx;
  font-weight: bold;
  margin-right: 20rpx;
}

/* 修改个人信息链接样式 */
.edit-profile-link {
  font-size: 28rpx;
  color: #2196F3;
  text-decoration: underline;
  margin-bottom: 15rpx;
}

/* 菜单列表 */
.menu-list {
  width: 100%;
}

.menu-item {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;
  padding: 30rpx 0;
  border-bottom: 1px solid #f0f0f0;
}

.icon-circle {
  width: 60rpx;
  height: 60rpx;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 30rpx;
  flex-shrink: 0;
}

.success {
  background-color: rgba(76, 175, 80, 0.1);
}

.warning {
  background-color: rgba(255, 82, 82, 0.1);
}

.info {
  background-color: rgba(33, 150, 243, 0.1);
}

.icon-text {
  font-size: 30rpx;
  font-weight: bold;
}

.success .icon-text {
  color: #4CAF50;
}

.warning .icon-text {
  color: #FF5252;
}

.info .icon-text {
  color: #2196F3;
}

.menu-text {
  font-size: 30rpx;
  color: #333;
  text-align: left;
}
</style>