{"version":3,"file":"match.api.js","sources":["store/services/match.api.js"],"sourcesContent":["/**\n * @description 匹配功能API服务\n * 提供老师匹配和筛选相关功能\n */\nimport { API_BASE_URL } from '../../config';\nimport { mockDelay, mockTeachers, mockServices, getMockTeacherDetailWithServices } from './mock-data';\n\nconst API_PREFIX = `${API_BASE_URL}/api/match`;\n\n// 是否使用模拟数据\nconst USE_MOCK_DATA = process.env.NODE_ENV === 'development';\n\n/**\n * @description 使用uni.request封装网络请求\n * @param {Object} options - 请求选项\n * @returns {Promise<Object>} 请求结果\n */\nconst request = (options) => {\n  return new Promise((resolve, reject) => {\n    // 在开发环境中，检查是否设置了直接使用模拟数据\n    if (USE_MOCK_DATA && options.useMockOnDev) {\n      // 延迟返回模拟数据，模拟网络请求\n      setTimeout(() => {\n        resolve(options.mockData || {});\n      }, 300);\n      return;\n    }\n    \n    // 否则发起真实网络请求\n    uni.request({\n      url: options.url,\n      data: options.data,\n      method: options.method || 'GET',\n      header: options.headers || {},\n      success: (res) => {\n        resolve(res);\n      },\n      fail: (err) => {\n        // 如果请求失败且在开发环境并指定了失败时使用模拟数据\n        if (USE_MOCK_DATA && options.useMockOnFail) {\n          console.warn('API请求失败，使用模拟数据替代', err);\n          setTimeout(() => {\n            resolve(options.mockData || {});\n          }, 300);\n          return;\n        }\n        reject(err);\n      }\n    });\n  });\n};\n\n/**\n * @description 获取推荐老师列表\n * @param {Object} params - 查询参数\n * @param {Number} params.page - 页码\n * @param {Number} params.limit - 每页数量\n * @returns {Promise<Object>} 返回老师列表和分页信息\n */\nexport const getRecommendedTeachers = async (params = {}) => {\n  try {\n    const mockData = {\n      data: {\n        list: mockTeachers,\n        pagination: {\n          page: params.page || 1,\n          limit: params.limit || 10,\n          total: mockTeachers.length\n        }\n      }\n    };\n    \n    const response = await request({\n      url: `${API_PREFIX}/teachers/recommended`,\n      method: 'GET',\n      data: params,\n      useMockOnDev: true,\n      useMockOnFail: true,\n      mockData: mockData\n    });\n    \n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('获取推荐老师列表失败:', error);\n    return { success: false, error };\n  }\n};\n\n/**\n * @description 搜索老师\n * @param {Object} params - 搜索参数\n * @param {String} params.keyword - 搜索关键词\n * @param {String} params.school - 学校筛选\n * @param {String} params.major - 专业筛选\n * @param {Number} params.page - 页码\n * @param {Number} params.limit - 每页数量\n * @returns {Promise<Object>} 返回老师列表和分页信息\n */\nexport const searchTeachers = async (params = {}) => {\n  try {\n    // 过滤模拟数据，模拟搜索功能\n    let filteredTeachers = [...mockTeachers];\n    \n    if (params.keyword) {\n      const keyword = params.keyword.toLowerCase();\n      filteredTeachers = filteredTeachers.filter(t => \n        t.nickname.toLowerCase().includes(keyword) || \n        t.school.toLowerCase().includes(keyword) || \n        t.major.toLowerCase().includes(keyword)\n      );\n    }\n    \n    if (params.school) {\n      filteredTeachers = filteredTeachers.filter(t => \n        t.school.includes(params.school)\n      );\n    }\n    \n    if (params.major) {\n      filteredTeachers = filteredTeachers.filter(t => \n        t.major.includes(params.major)\n      );\n    }\n    \n    const mockData = {\n      data: {\n        list: filteredTeachers,\n        pagination: {\n          page: params.page || 1,\n          limit: params.limit || 10,\n          total: filteredTeachers.length\n        }\n      }\n    };\n    \n    const response = await request({\n      url: `${API_PREFIX}/teachers/search`,\n      method: 'GET',\n      data: params,\n      useMockOnDev: true,\n      useMockOnFail: true,\n      mockData: mockData\n    });\n    \n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('搜索老师失败:', error);\n    return { success: false, error };\n  }\n};\n\n/**\n * @description 获取老师详细信息（包含服务列表）\n * @param {Number} teacherId - 老师ID\n * @returns {Promise<Object>} 返回老师详细信息和服务列表\n */\nexport const getTeacherDetail = async (teacherId) => {\n  try {\n    // 使用之前添加的合并数据函数获取模拟数据\n    const mockDataResponse = getMockTeacherDetailWithServices(teacherId);\n    \n    const response = await request({\n      url: `${API_PREFIX}/teachers/${teacherId}`,\n      method: 'GET',\n      useMockOnDev: true,\n      useMockOnFail: true,\n      mockData: { data: mockDataResponse.data }\n    });\n    \n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('获取老师详细信息失败:', error);\n    return { success: false, error };\n  }\n}; "],"names":["API_BASE_URL","uni","mockTeachers","getMockTeacherDetailWithServices"],"mappings":"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"}