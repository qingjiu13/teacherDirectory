{"version":3,"file":"auth.api.js","sources":["store/services/auth.api.js"],"sourcesContent":["/**\n * @description 用户认证相关API服务\n */\n\nimport { Base64 } from 'js-base64';\nimport { jwtDecode } from 'jwt-decode';\n\n/**\n * @description 模拟登录请求\n * @param {Object} credentials - 登录凭证\n * @param {string} credentials.username - 用户名\n * @param {string} credentials.password - 密码\n * @param {string} credentials.role - 角色（student/teacher）\n * @returns {Promise<Object>} 登录结果\n */\nexport const login = (credentials) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const { username, role } = credentials;\n      \n      // 创建JWT payload\n      const payload = {\n        sub: `user_${Date.now()}`,\n        name: username,\n        role: role,\n        iat: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + 7200 // 2小时后过期\n      };\n      \n      // 模拟JWT结构 (header.payload.signature)\n      const header = Base64.encode(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));\n      const payloadBase64 = Base64.encode(JSON.stringify(payload));\n      const signature = Base64.encode('mock_signature'); // 模拟签名\n      \n      const token = `${header}.${payloadBase64}.${signature}`;\n      const refreshToken = `refresh_${header}.${Base64.encode(JSON.stringify({\n        ...payload,\n        exp: Math.floor(Date.now() / 1000) + 86400 // 24小时后过期\n      }))}.${signature}`;\n      \n      resolve({\n        success: true,\n        data: {\n          token,\n          refreshToken,\n          expiresIn: 7200,\n          userInfo: {\n            name: username,\n            avatar: 'https://example.com/avatar.png',\n            tags: ['标签1', '标签2'],\n            balance: role === 'teacher' ? 1000 : null,\n            bio: role === 'teacher' ? '资深导师，专注于学术指导' : '热爱学习的学生',\n            contact: {\n              phone: '138****1234',\n              email: `${username}@example.com`,\n              wechat: username\n            }\n          },\n          role\n        }\n      });\n    }, 500);\n  });\n};\n\n/**\n * @description 模拟获取用户信息\n * @param {string} token - 用户token\n * @returns {Promise<Object>} 用户信息\n */\nexport const getUserInfo = (token) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      // 添加对token的检查，确保token存在且为字符串\n      const role = token && typeof token === 'string' && token.startsWith('teacher') ? 'teacher' : 'student';\n      resolve({\n        success: true,\n        data: {\n          name: `${role}用户`,\n          avatar: 'https://example.com/avatar.png',\n          tags: ['标签1', '标签2', '标签3'],\n          balance: role === 'teacher' ? 1500 : null,\n          bio: role === 'teacher' ? '资深导师，专注于学术指导' : '热爱学习的学生',\n          contact: {\n            phone: '138****1234',\n            email: `${role}@example.com`,\n            wechat: `${role}_user`\n          },\n          notifications: {\n            unread: 3,\n            messages: [\n              {id: 'm1', type: 'system', content: '系统通知', read: false, time: Date.now() - 3600000},\n              {id: 'm2', type: 'chat', content: '新聊天消息', read: false, time: Date.now() - 7200000},\n              {id: 'm3', type: 'order', content: '订单状态更新', read: false, time: Date.now() - 10800000}\n            ]\n          }\n        }\n      });\n    }, 600);\n  });\n};\n\n/**\n * @description 模拟刷新token\n * @param {string} refreshToken - 刷新token\n * @returns {Promise<Object>} 新的token信息\n */\nexport const refreshToken = (refreshToken) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        data: {\n          token: `new_token_${Date.now()}`,\n          refreshToken: `new_refresh_token_${Date.now()}`,\n          expiresIn: 7200 // 2小时有效期\n        }\n      });\n    }, 300);\n  });\n};\n\n/**\n * @description JWT辅助函数\n */\nexport const jwt = {\n  /**\n   * @description 解码JWT令牌\n   * @param {string} token - JWT令牌\n   * @returns {Object|null} 解码后的载荷\n   */\n  decode(token) {\n    try {\n      if (!token) return null;\n      return jwtDecode(token);\n    } catch (error) {\n      console.error('Token解析失败:', error);\n      return null;\n    }\n  },\n  \n  /**\n   * @description 校验JWT令牌是否有效\n   * @param {string} token - JWT令牌\n   * @returns {boolean} 是否有效\n   */\n  isValid(token) {\n    if (!token || typeof token !== 'string') return false;\n    try {\n      const decoded = this.decode(token);\n      if (!decoded) return false;\n      const currentTime = Date.now() / 1000;\n      return decoded.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  }\n}; "],"names":["Base64","refreshToken","jwtDecode","uni"],"mappings":"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"}