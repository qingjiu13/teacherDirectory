{"version":3,"file":"ai-chat.api.js","sources":["store/services/ai-chat.api.js"],"sourcesContent":["/**\n * @description AI聊天相关API服务\n */\nimport { API_BASE_URL, AIQA_TEST_URL } from '../../config';\n// 导入模拟数据用于开发调试\nimport { mockDelay, mockChatSummaries, mockChatDetails, mockApiResponse } from './mock-data';\n\nconst API_PREFIX = `${API_BASE_URL}/ai-chat`;\n\n// 是否使用模拟数据（开发时设为true，调试完成后改为false）\nconst USE_MOCK_DATA = true;\n\n// 错误码和消息映射\nconst ERROR_MESSAGES = {\n  NETWORK_ERROR: '网络连接失败，请检查您的网络设置',\n  TIMEOUT_ERROR: '请求超时，请稍后再试',\n  SERVER_ERROR: '服务器错误，请稍后再试',\n  AUTH_ERROR: '身份验证失败，请重新登录',\n  INVALID_PARAM: '参数错误',\n  RATE_LIMIT: '请求过于频繁，请稍后再试',\n  UNKNOWN_ERROR: '未知错误，请稍后再试'\n};\n\n/**\n * @description 使用uni.request封装网络请求\n * @param {Object} options - 请求选项\n * @returns {Promise<Object>} 请求结果\n */\nconst request = (options) => {\n  return new Promise((resolve, reject) => {\n    uni.request({\n      url: options.url,\n      data: options.data,\n      method: options.method || 'GET',\n      header: options.headers || {},\n      success: (res) => {\n        // 检查响应状态码，即使接收到响应，也可能是错误状态码\n        if (res.statusCode >= 200 && res.statusCode < 300) {\n          resolve(res);\n        } else {\n          // 服务器返回了错误状态码\n          reject({\n            statusCode: res.statusCode,\n            data: res.data\n          });\n        }\n      },\n      fail: (err) => {\n        // 网络错误或请求失败\n        reject(err);\n      }\n    });\n  });\n};\n\n/**\n * @description 处理响应错误\n * @param {Object} error - 错误对象\n * @returns {Object} 格式化的错误对象\n */\nconst handleError = (error) => {\n  let errorMessage = '';\n  \n  // 扩展后端错误处理逻辑\n  if (error.data) {\n    // 直接尝试获取后端返回的错误信息，支持多种常见格式\n    if (error.data.message) {\n      errorMessage = error.data.message;\n    } else if (error.data.error && error.data.error.message) {\n      errorMessage = error.data.error.message;\n    } else if (error.data.msg) {\n      errorMessage = error.data.msg;\n    } else if (error.data.errMsg) {\n      errorMessage = error.data.errMsg;\n    } else if (typeof error.data === 'string') {\n      // 有些后端可能直接返回错误字符串\n      errorMessage = error.data;\n    } else if (error.errMsg) {\n      // uni-app请求错误信息\n      errorMessage = error.errMsg;\n    }\n  }\n  \n  // 如果无法从响应中提取错误信息，则根据状态码提供默认错误\n  if (!errorMessage && error.statusCode) {\n    // 如果没有具体错误消息，根据HTTP状态码判断\n    if (error.statusCode === 401 || error.statusCode === 403) {\n      errorMessage = ERROR_MESSAGES.AUTH_ERROR;\n    } else if (error.statusCode === 404) {\n      errorMessage = '请求的资源不存在';\n    } else if (error.statusCode === 429) {\n      errorMessage = ERROR_MESSAGES.RATE_LIMIT;\n    } else if (error.statusCode >= 500) {\n      errorMessage = ERROR_MESSAGES.SERVER_ERROR;\n    } else {\n      errorMessage = `服务器返回错误: ${error.statusCode}`;\n    }\n  } else if (!errorMessage) {\n    // 网络错误或其他错误\n    if (error.errno) {\n      // 某些情况下会有errno\n      errorMessage = `网络错误 (${error.errno})`;\n    } else {\n      errorMessage = ERROR_MESSAGES.NETWORK_ERROR;\n    }\n  }\n  \n  console.log('处理到的错误信息:', {\n    message: errorMessage,\n    originalError: JSON.stringify(error).substring(0, 200) // 限制长度以便于日志查看\n  });\n  \n  return {\n    message: errorMessage,\n    originalError: error,\n    statusCode: error.statusCode || 0\n  };\n};\n\n/**\n * @description 获取会话列表\n * @returns {Promise<Object>} 会话列表\n */\nexport const getConversations = async () => {\n  try {\n    const response = await request({\n      url: `${API_PREFIX}/conversations`\n    });\n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('获取会话列表失败:', error);\n    return { success: false, error: handleError(error) };\n  }\n};\n\n/**\n * @description 获取会话摘要列表（只返回ID和摘要信息，不包含完整消息）\n * @returns {Promise<Object>} 会话摘要列表\n */\nexport const getConversationSummaries = async () => {\n  // 使用模拟数据进行调试\n  if (USE_MOCK_DATA) {\n    // 添加模拟延迟，模拟网络请求\n    await mockDelay(500);\n    console.log('使用模拟数据: getConversationSummaries');\n    return mockApiResponse({\n      summaries: mockChatSummaries\n    });\n  }\n  \n  // 正常的API请求\n  try {\n    const response = await request({\n      url: `${API_PREFIX}/conversations/summaries`\n    });\n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('获取会话摘要列表失败:', error);\n    return { success: false, error: handleError(error) };\n  }\n};\n\n/**\n * @description 获取会话消息\n * @param {string} conversationId - 会话ID\n * @returns {Promise<Object>} 会话消息\n */\nexport const getMessages = async (conversationId) => {\n  // 使用模拟数据进行调试\n  if (USE_MOCK_DATA) {\n    // 添加模拟延迟，模拟网络请求\n    await mockDelay(800);\n    console.log('使用模拟数据: getMessages, conversationId =', conversationId);\n    \n    // 如果找到对应ID的模拟对话数据，返回它\n    if (mockChatDetails[conversationId]) {\n      return mockApiResponse(mockChatDetails[conversationId]);\n    }\n    \n    // 如果找不到，返回错误\n    return { \n      success: false, \n      error: handleError({ \n        statusCode: 404, \n        message: '找不到指定的会话记录' \n      }) \n    };\n  }\n  \n  // 正常的API请求\n  try {\n    const response = await request({\n      url: `${API_PREFIX}/conversations/${conversationId}/messages`\n    });\n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('获取会话消息失败:', error);\n    return { success: false, error: handleError(error) };\n  }\n};\n\n/**\n * @description 发送消息\n * @param {Object} params - 请求参数\n * @param {string} params.message - 消息内容\n * @param {string} [params.conversationId] - 会话ID，不传则创建新会话\n * @param {Object} [params.context] - 上下文信息\n * @returns {Promise<Object>} 消息响应\n */\nexport const sendMessage = async (params) => {\n  try {\n    const requestData = {\n      message: params.message,\n      conversationId: params.conversationId,\n      context: params.context || {}\n    };\n    \n    const response = await request({\n      url: `${API_PREFIX}/chat`,\n      method: 'POST',\n      data: requestData\n    });\n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('发送消息失败:', error);\n    return { success: false, error: handleError(error) };\n  }\n};\n\n/**\n * @description 创建新会话\n * @returns {Promise<Object>} 创建结果\n */\nexport const createConversation = async () => {\n  try {\n    const response = await request({\n      url: `${API_PREFIX}/conversations`,\n      method: 'POST'\n    });\n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('创建会话失败:', error);\n    return { success: false, error: handleError(error) };\n  }\n};\n\n/**\n * @description 删除会话\n * @param {string} conversationId - 会话ID\n * @returns {Promise<Object>} 删除结果\n */\nexport const deleteConversation = async (conversationId) => {\n  // 使用模拟数据进行调试\n  if (USE_MOCK_DATA) {\n    // 添加模拟延迟，模拟网络请求\n    await mockDelay(300);\n    console.log('使用模拟数据: deleteConversation, conversationId =', conversationId);\n    return mockApiResponse({ message: '会话删除成功' });\n  }\n  \n  // 正常的API请求\n  try {\n    const response = await request({\n      url: `${API_PREFIX}/conversations/${conversationId}`,\n      method: 'DELETE'\n    });\n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('删除会话失败:', error);\n    return { success: false, error: handleError(error) };\n  }\n};\n\n/**\n * @description 保存完整对话内容到服务器\n * @param {Object} conversationData - 完整的会话数据\n * @returns {Promise<Object>} 保存结果\n */\nexport const saveConversation = async (conversationData) => {\n  // 使用模拟数据进行调试\n  if (USE_MOCK_DATA) {\n    // 添加模拟延迟，模拟网络请求\n    await mockDelay(600);\n    console.log('使用模拟数据: saveConversation, conversationId =', conversationData.id);\n    // 打印保存的数据以便调试\n    console.log('保存的对话数据:', JSON.stringify(conversationData).substring(0, 200) + '...');\n    return mockApiResponse({ message: '会话保存成功', id: conversationData.id });\n  }\n\n  // 正常的API请求\n  try {\n    const response = await request({\n      url: `${API_PREFIX}/conversations/${conversationData.id}`,\n      method: 'PUT',\n      data: conversationData\n    });\n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('保存会话失败:', error);\n    return { success: false, error: handleError(error) };\n  }\n};\n\n/**\n * @description 测试AIQA接口\n * @param {string} question - 用户提问\n * @param {Object} contextInfo - 用户上下文信息\n * @returns {Promise<Object>} 请求结果\n */\nexport const testAIQA = async (question, contextInfo = {}) => {\n  try {\n    // 改为POST请求，将问题和上下文信息作为请求体发送\n    const response = await request({\n      url: AIQA_TEST_URL,\n      method: 'POST',\n      data: {\n        question: question,\n        context: contextInfo\n      }\n    });\n    \n    // 防止后端返回的数据没有预期的格式\n    if (!response.data) {\n      console.warn('testAIQA: 后端返回了空数据');\n      return { \n        success: true, \n        data: '抱歉，服务器返回了空数据。请稍后再试。' \n      };\n    }\n    \n    return { success: true, data: response.data };\n  } catch (error) {\n    console.error('测试AIQA失败:', error);\n    // 使用更丰富的错误处理\n    const formattedError = handleError(error);\n    return { \n      success: false, \n      error: formattedError,\n      message: formattedError.message || '请求失败，请稍后再试'\n    };\n  }\n}; "],"names":["API_BASE_URL","uni","mockDelay","mockApiResponse","mockChatSummaries","mockChatDetails","AIQA_TEST_URL"],"mappings":"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"}