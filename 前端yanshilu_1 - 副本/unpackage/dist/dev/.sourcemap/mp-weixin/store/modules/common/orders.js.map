{"version":3,"file":"orders.js","sources":["store/modules/common/orders.js"],"sourcesContent":["/**\r\n * @description 订单管理模块\r\n * @module store/modules/common/orders\r\n */\r\n\r\n/**\r\n * @description 初始状态\r\n * @type {Object}\r\n */\r\nconst state = {\r\n  orderList: [],        // 订单列表\r\n  currentOrder: null,   // 当前查看的订单\r\n  loading: false,       // 加载状态\r\n  error: null,          // 错误信息\r\n  pagination: {         // 分页信息\r\n    total: 0,\r\n    current: 1,\r\n    pageSize: 10\r\n  }\r\n};\r\n\r\n/**\r\n * @description getters\r\n * @type {Object}\r\n */\r\nconst getters = {\r\n  /**\r\n   * @description 获取所有订单\r\n   * @param {Object} state - 状态对象\r\n   * @returns {Array} 订单列表\r\n   */\r\n  allOrders: (state) => state.orderList,\r\n  \r\n  /**\r\n   * @description 获取当前订单\r\n   * @param {Object} state - 状态对象\r\n   * @returns {Object} 当前订单\r\n   */\r\n  currentOrder: (state) => state.currentOrder,\r\n  \r\n  /**\r\n   * @description 获取订单总数\r\n   * @param {Object} state - 状态对象\r\n   * @returns {number} 订单总数\r\n   */\r\n  totalOrders: (state) => state.pagination.total,\r\n  \r\n  /**\r\n   * @description 按状态筛选订单\r\n   * @param {Object} state - 状态对象\r\n   * @returns {Function} 筛选函数\r\n   */\r\n  ordersByStatus: (state) => (status) => {\r\n    return state.orderList.filter(order => order.status === status);\r\n  }\r\n};\r\n\r\n/**\r\n * @description mutations\r\n * @type {Object}\r\n */\r\nconst mutations = {\r\n  /**\r\n   * @description 设置订单列表\r\n   * @param {Object} state - 状态对象\r\n   * @param {Array} orders - 订单列表\r\n   */\r\n  SET_ORDER_LIST(state, orders) {\r\n    state.orderList = orders;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置当前订单\r\n   * @param {Object} state - 状态对象\r\n   * @param {Object} order - 订单对象\r\n   */\r\n  SET_CURRENT_ORDER(state, order) {\r\n    state.currentOrder = order;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置加载状态\r\n   * @param {Object} state - 状态对象\r\n   * @param {boolean} loading - 加载状态\r\n   */\r\n  SET_LOADING(state, loading) {\r\n    state.loading = loading;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置错误信息\r\n   * @param {Object} state - 状态对象\r\n   * @param {Object} error - 错误信息\r\n   */\r\n  SET_ERROR(state, error) {\r\n    state.error = error;\r\n  },\r\n  \r\n  /**\r\n   * @description 设置分页信息\r\n   * @param {Object} state - 状态对象\r\n   * @param {Object} pagination - 分页信息\r\n   */\r\n  SET_PAGINATION(state, pagination) {\r\n    state.pagination = { ...state.pagination, ...pagination };\r\n  },\r\n  \r\n  /**\r\n   * @description 更新订单状态\r\n   * @param {Object} state - 状态对象\r\n   * @param {Object} param - 参数\r\n   * @param {string|number} param.orderId - 订单ID\r\n   * @param {string} param.status - 订单状态\r\n   */\r\n  UPDATE_ORDER_STATUS(state, { orderId, status }) {\r\n    const index = state.orderList.findIndex(order => order.id === orderId);\r\n    if (index !== -1) {\r\n      state.orderList[index].status = status;\r\n      \r\n      // 如果是当前查看的订单，也更新当前订单\r\n      if (state.currentOrder && state.currentOrder.id === orderId) {\r\n        state.currentOrder.status = status;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * @description actions\r\n * @type {Object}\r\n */\r\nconst actions = {\r\n  /**\r\n   * @description 获取订单列表\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} params - 查询参数\r\n   * @returns {Promise<Array>} 订单列表\r\n   */\r\n  async fetchOrders({ commit }, params = {}) {\r\n    commit('SET_LOADING', true);\r\n    try {\r\n      // 这里添加API调用，获取订单列表\r\n      // const response = await api.getOrders(params);\r\n      const orders = []; // 替换为实际API返回的数据\r\n      const pagination = { total: 0, current: 1, pageSize: 10 }; // 替换为实际分页数据\r\n      \r\n      commit('SET_ORDER_LIST', orders);\r\n      commit('SET_PAGINATION', pagination);\r\n      commit('SET_ERROR', null);\r\n      return orders;\r\n    } catch (error) {\r\n      console.error('获取订单列表失败:', error);\r\n      commit('SET_ERROR', error);\r\n      return [];\r\n    } finally {\r\n      commit('SET_LOADING', false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 获取订单详情\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string|number} orderId - 订单ID\r\n   * @returns {Promise<Object>} 订单详情\r\n   */\r\n  async fetchOrderDetail({ commit }, orderId) {\r\n    commit('SET_LOADING', true);\r\n    try {\r\n      // 这里添加API调用，获取订单详情\r\n      // const response = await api.getOrderDetail(orderId);\r\n      const order = null; // 替换为实际API返回的数据\r\n      \r\n      commit('SET_CURRENT_ORDER', order);\r\n      return order;\r\n    } catch (error) {\r\n      console.error('获取订单详情失败:', error);\r\n      commit('SET_ERROR', error);\r\n      return null;\r\n    } finally {\r\n      commit('SET_LOADING', false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 创建新订单\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} orderData - 订单数据\r\n   * @returns {Promise<Object>} 创建结果\r\n   */\r\n  async createOrder({ commit }, orderData) {\r\n    commit('SET_LOADING', true);\r\n    try {\r\n      // 这里添加API调用，创建订单\r\n      // const response = await api.createOrder(orderData);\r\n      const newOrder = null; // 替换为实际API返回的数据\r\n      \r\n      // 更新当前订单\r\n      commit('SET_CURRENT_ORDER', newOrder);\r\n      return { success: true, data: newOrder };\r\n    } catch (error) {\r\n      console.error('创建订单失败:', error);\r\n      commit('SET_ERROR', error);\r\n      return { success: false, error };\r\n    } finally {\r\n      commit('SET_LOADING', false);\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 支付订单\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string|number} orderId - 订单ID\r\n   * @returns {Promise<Object>} 支付结果\r\n   */\r\n  async payOrder({ commit }, orderId) {\r\n    try {\r\n      // 这里添加API调用，支付订单\r\n      // const response = await api.payOrder(orderId);\r\n      \r\n      // 更新订单状态\r\n      commit('UPDATE_ORDER_STATUS', { orderId, status: 'paid' });\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('支付订单失败:', error);\r\n      return { success: false, error };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 取消订单\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string|number} orderId - 订单ID\r\n   * @returns {Promise<Object>} 取消结果\r\n   */\r\n  async cancelOrder({ commit }, orderId) {\r\n    try {\r\n      // 这里添加API调用，取消订单\r\n      // const response = await api.cancelOrder(orderId);\r\n      \r\n      // 更新订单状态\r\n      commit('UPDATE_ORDER_STATUS', { orderId, status: 'cancelled' });\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('取消订单失败:', error);\r\n      return { success: false, error };\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  mutations,\r\n  actions\r\n}; "],"names":["state","orders","uni"],"mappings":"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"}