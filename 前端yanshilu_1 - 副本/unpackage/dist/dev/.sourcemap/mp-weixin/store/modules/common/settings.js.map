{"version":3,"file":"settings.js","sources":["store/modules/common/settings.js"],"sourcesContent":["/**\r\n * @description 用户设置模块\r\n * @module store/modules/common/settings\r\n */\r\n\r\n/**\r\n * @description 初始状态\r\n * @type {Object}\r\n */\r\nconst state = {\r\n  theme: 'light',           // 主题设置\r\n  notifications: true,      // 通知开关\r\n  fontSize: 'medium',       // 字体大小\r\n  language: 'zh-CN',        // 语言设置\r\n  autoSave: true,           // 自动保存\r\n  preferences: {},          // 用户偏好设置\r\n};\r\n\r\n/**\r\n * @description getters\r\n * @type {Object}\r\n */\r\nconst getters = {\r\n  /**\r\n   * @description 获取主题设置\r\n   * @param {Object} state - 状态对象\r\n   * @returns {string} 当前主题\r\n   */\r\n  currentTheme: (state) => state.theme,\r\n  \r\n  /**\r\n   * @description 获取通知状态\r\n   * @param {Object} state - 状态对象\r\n   * @returns {boolean} 通知是否开启\r\n   */\r\n  isNotificationsEnabled: (state) => state.notifications,\r\n};\r\n\r\n/**\r\n * @description mutations\r\n * @type {Object}\r\n */\r\nconst mutations = {\r\n  /**\r\n   * @description 更新主题\r\n   * @param {Object} state - 状态对象\r\n   * @param {string} theme - 新主题\r\n   */\r\n  SET_THEME(state, theme) {\r\n    state.theme = theme;\r\n  },\r\n  \r\n  /**\r\n   * @description 切换通知开关\r\n   * @param {Object} state - 状态对象\r\n   * @param {boolean} enabled - 是否启用通知\r\n   */\r\n  SET_NOTIFICATIONS(state, enabled) {\r\n    state.notifications = enabled;\r\n  },\r\n  \r\n  /**\r\n   * @description 更新用户偏好设置\r\n   * @param {Object} state - 状态对象\r\n   * @param {Object} preferences - 用户偏好设置\r\n   */\r\n  UPDATE_PREFERENCES(state, preferences) {\r\n    state.preferences = { ...state.preferences, ...preferences };\r\n  },\r\n};\r\n\r\n/**\r\n * @description actions\r\n * @type {Object}\r\n */\r\nconst actions = {\r\n  /**\r\n   * @description 保存设置\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {Object} settings - 要保存的设置\r\n   * @returns {Promise<Object>} 保存结果\r\n   */\r\n  async saveSettings({ commit }, settings) {\r\n    try {\r\n      // 这里可以添加API调用，保存设置到服务器\r\n      commit('UPDATE_PREFERENCES', settings);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('保存设置失败:', error);\r\n      return { success: false, error };\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * @description 切换主题\r\n   * @param {Object} context - Vuex上下文\r\n   * @param {string} theme - 主题名称\r\n   */\r\n  changeTheme({ commit }, theme) {\r\n    commit('SET_THEME', theme);\r\n    // 可以在这里添加主题切换的相关逻辑\r\n  },\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  mutations,\r\n  actions\r\n}; "],"names":["state","settings","uni"],"mappings":";;AASA,MAAM,QAAQ;AAAA,EACZ,OAAO;AAAA;AAAA,EACP,eAAe;AAAA;AAAA,EACf,UAAU;AAAA;AAAA,EACV,UAAU;AAAA;AAAA,EACV,UAAU;AAAA;AAAA,EACV,aAAa,CAAE;AAAA;AACjB;AAMA,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMd,cAAc,CAACA,WAAUA,OAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/B,wBAAwB,CAACA,WAAUA,OAAM;AAC3C;AAMA,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhB,UAAUA,QAAO,OAAO;AACtB,IAAAA,OAAM,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,kBAAkBA,QAAO,SAAS;AAChC,IAAAA,OAAM,gBAAgB;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,mBAAmBA,QAAO,aAAa;AACrC,IAAAA,OAAM,cAAc,EAAE,GAAGA,OAAM,aAAa,GAAG;EAChD;AACH;AAMA,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOd,MAAM,aAAa,EAAE,OAAQ,GAAEC,WAAU;AACvC,QAAI;AAEF,aAAO,sBAAsBA,SAAQ;AACrC,aAAO,EAAE,SAAS;IACnB,SAAQ,OAAO;AACdC,mFAAc,WAAW,KAAK;AAC9B,aAAO,EAAE,SAAS,OAAO;IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,YAAY,EAAE,OAAQ,GAAE,OAAO;AAC7B,WAAO,aAAa,KAAK;AAAA,EAE1B;AACH;AAEA,MAAe,WAAA;AAAA,EACb,YAAY;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;"}