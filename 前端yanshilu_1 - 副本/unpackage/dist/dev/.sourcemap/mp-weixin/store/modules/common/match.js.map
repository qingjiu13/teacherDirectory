{"version":3,"file":"match.js","sources":["store/modules/common/match.js"],"sourcesContent":["/**\n * @description 匹配功能Vuex模块\n * 老师和学生身份共享的匹配功能\n */\n\nimport { match, mock } from '../../services';\n\n// 本地存储键名\nconst FILTERS_STORAGE_KEY = 'match_filters';\nconst NAVIGATION_TYPE_KEY = 'match_navigation_type';\n\n// 导航类型常量\nconst NAV_TYPE = {\n  DEFAULT: 'default',       // 默认导航（普通退出）\n  CHAT: 'chat',             // 前往聊天页面\n  TEACHER_DETAIL: 'detail'  // 前往老师详情页面\n};\n\n// 尝试从本地存储加载筛选条件\nconst getSavedFilters = () => {\n  try {\n    const savedFilters = uni.getStorageSync(FILTERS_STORAGE_KEY);\n    return savedFilters ? JSON.parse(savedFilters) : { school: '', major: '', keyword: '' };\n  } catch (e) {\n    console.error('获取保存的筛选条件失败', e);\n    return { school: '', major: '', keyword: '' };\n  }\n};\n\n// 初始状态\nconst state = {\n  // 老师数据\n  teachers: [],\n  currentPage: 1,\n  totalPages: 1,\n  totalCount: 0,\n  pageSize: 10,\n  \n  // 筛选条件，从本地存储获取\n  filters: getSavedFilters(),\n  \n  // 加载状态\n  loading: false,\n  loadingMore: false,\n  error: null,\n  \n  // 选中的教师ID\n  selectedTeacherId: null,\n  \n  // 导航类型，用于判断是否需要清空筛选条件\n  navigationType: NAV_TYPE.DEFAULT\n};\n\n// Getters\nconst getters = {\n  /**\n   * @description 获取筛选后的老师列表\n   * @param {Object} state - Vuex状态\n   * @returns {Array} 筛选后的老师列表\n   */\n  filteredTeachers: state => state.teachers,\n  \n  /**\n   * @description 判断是否有筛选条件\n   * @param {Object} state - Vuex状态\n   * @returns {Boolean} 是否有筛选条件\n   */\n  hasFilters: state => {\n    return !!state.filters.school || !!state.filters.major || !!state.filters.keyword;\n  },\n  \n  /**\n   * @description 获取加载状态\n   * @param {Object} state - Vuex状态\n   * @returns {Boolean} 是否正在加载\n   */\n  isLoading: state => state.loading,\n  \n  /**\n   * @description 获取加载更多状态\n   * @param {Object} state - Vuex状态\n   * @returns {Boolean} 是否正在加载更多\n   */\n  isLoadingMore: state => state.loadingMore,\n  \n  /**\n   * @description 是否有更多数据\n   * @param {Object} state - Vuex状态\n   * @returns {Boolean} 是否有更多数据\n   */\n  hasMoreData: state => state.currentPage < state.totalPages,\n  \n  /**\n   * @description 获取错误信息\n   * @param {Object} state - Vuex状态\n   * @returns {Object} 错误信息\n   */\n  error: state => state.error,\n  \n  /**\n   * @description 获取当前筛选条件\n   * @param {Object} state - Vuex状态\n   * @returns {Object} 筛选条件\n   */\n  currentFilters: state => state.filters,\n  \n  /**\n   * @description 获取当前导航类型\n   * @param {Object} state - Vuex状态\n   * @returns {String} 导航类型\n   */\n  navigationType: state => state.navigationType\n};\n\n// 引入常量类型\nconst SET_TEACHERS = 'SET_TEACHERS';\nconst ADD_TEACHERS = 'ADD_TEACHERS';\nconst SET_LOADING = 'SET_LOADING';\nconst SET_LOADING_MORE = 'SET_LOADING_MORE';\nconst SET_ERROR = 'SET_ERROR';\nconst SET_FILTERS = 'SET_FILTERS';\nconst SET_SELECTED_TEACHER = 'SET_SELECTED_TEACHER';\nconst RESET_FILTERS = 'RESET_FILTERS';\nconst SET_NAVIGATION_TYPE = 'SET_NAVIGATION_TYPE';\n\n// Mutations\nconst mutations = {\n  [SET_TEACHERS](state, data) {\n    const { list, pagination } = data;\n    state.teachers = list;\n    state.currentPage = pagination.current || pagination.page;\n    state.totalPages = pagination.totalPages;\n    state.totalCount = pagination.total;\n    state.pageSize = pagination.pageSize;\n  },\n  \n  [ADD_TEACHERS](state, data) {\n    const { list, pagination } = data;\n    state.teachers = [...state.teachers, ...list];\n    state.currentPage = pagination.current || pagination.page;\n    state.totalPages = pagination.totalPages;\n    state.totalCount = pagination.total;\n    state.pageSize = pagination.pageSize;\n  },\n  \n  [SET_LOADING](state, loading) {\n    state.loading = loading;\n  },\n  \n  [SET_LOADING_MORE](state, loadingMore) {\n    state.loadingMore = loadingMore;\n  },\n  \n  [SET_ERROR](state, error) {\n    state.error = error;\n  },\n  \n  [SET_FILTERS](state, filters) {\n    state.filters = { ...state.filters, ...filters };\n    \n    // 保存到本地存储\n    try {\n      uni.setStorageSync(FILTERS_STORAGE_KEY, JSON.stringify(state.filters));\n    } catch (e) {\n      console.error('保存筛选条件失败', e);\n    }\n  },\n  \n  [SET_SELECTED_TEACHER](state, id) {\n    state.selectedTeacherId = id;\n  },\n  \n  [RESET_FILTERS](state) {\n    state.filters = {\n      school: '',\n      major: '',\n      keyword: ''\n    };\n    \n    // 从本地存储中删除\n    try {\n      uni.removeStorageSync(FILTERS_STORAGE_KEY);\n    } catch (e) {\n      console.error('删除筛选条件失败', e);\n    }\n  },\n  \n  [SET_NAVIGATION_TYPE](state, type) {\n    state.navigationType = type;\n    \n    // 保存到本地存储\n    try {\n      uni.setStorageSync(NAVIGATION_TYPE_KEY, type);\n    } catch (e) {\n      console.error('保存导航类型失败', e);\n    }\n  }\n};\n\n// Actions\nconst actions = {\n  /**\n   * @description 获取老师列表\n   * @param {Object} context - Vuex上下文\n   * @param {Object} params - 查询参数\n   * @returns {Promise<Object>} 结果对象\n   */\n  async getTeachers({ commit, state }, params = {}) {\n    try {\n      commit(SET_LOADING, true);\n      commit(SET_ERROR, null);\n      \n      // TODO: 使用真实API接口时删除此模拟数据代码块\n      if (process.env.NODE_ENV === 'development') {\n        await mock.mockDelay(500);\n        \n        // 过滤模拟数据\n        let filteredTeachers = [...mock.mockTeachers];\n        \n        // 应用筛选条件\n        if (state.filters.school) {\n          filteredTeachers = filteredTeachers.filter(teacher => \n            teacher.school.includes(state.filters.school)\n          );\n        }\n        \n        if (state.filters.major) {\n          filteredTeachers = filteredTeachers.filter(teacher => \n            teacher.major.includes(state.filters.major)\n          );\n        }\n        \n        if (state.filters.keyword) {\n          filteredTeachers = filteredTeachers.filter(teacher => \n            teacher.nickname.includes(state.filters.keyword) || \n            teacher.school.includes(state.filters.keyword) || \n            teacher.major.includes(state.filters.keyword)\n          );\n        }\n        \n        // 计算分页信息\n        const page = params.page || 1;\n        const limit = params.limit || state.pageSize;\n        const total = filteredTeachers.length;\n        const totalPages = Math.ceil(total / limit);\n        \n        // 切片获取当前页数据\n        const startIndex = (page - 1) * limit;\n        const endIndex = startIndex + limit;\n        const pageTeachers = filteredTeachers.slice(startIndex, endIndex);\n        \n        commit(SET_TEACHERS, {\n          list: pageTeachers,\n          pagination: {\n            page: page,\n            pageSize: limit,\n            total: total,\n            totalPages: totalPages\n          }\n        });\n        \n        return { success: true, data: pageTeachers };\n      }\n      \n      // 真实API调用\n      const response = await match.getRecommendedTeachers({\n        ...state.filters,\n        page: params.page || 1,\n        limit: params.limit || state.pageSize\n      });\n      \n      if (!response.success) {\n        throw response.error || { message: '获取老师列表失败' };\n      }\n      \n      commit(SET_TEACHERS, {\n        list: response.data.teachers || [],\n        pagination: {\n          page: params.page || 1,\n          pageSize: params.limit || state.pageSize,\n          total: response.data.total || 0,\n          totalPages: Math.ceil((response.data.total || 0) / (params.limit || state.pageSize))\n        }\n      });\n      \n      return { success: true, data: response.data.teachers };\n    } catch (error) {\n      console.error('获取老师列表失败:', error);\n      commit(SET_ERROR, error);\n      return { success: false, error };\n    } finally {\n      commit(SET_LOADING, false);\n    }\n  },\n  \n  /**\n   * @description 加载更多老师\n   * @param {Object} context - Vuex上下文\n   * @returns {Promise<Object>} 结果对象\n   */\n  async loadMoreTeachers({ commit, state }) {\n    // 如果没有更多数据或正在加载，不执行操作\n    if (state.currentPage >= state.totalPages || state.loadingMore) {\n      return { success: true, data: state.teachers, noMoreData: true };\n    }\n    \n    try {\n      commit(SET_LOADING_MORE, true);\n      commit(SET_ERROR, null);\n      \n      const nextPage = state.currentPage + 1;\n      \n      // TODO: 使用真实API接口时删除此模拟数据代码块\n      if (process.env.NODE_ENV === 'development') {\n        await mock.mockDelay(500);\n        \n        // 过滤模拟数据\n        let filteredTeachers = [...mock.mockTeachers];\n        \n        // 应用筛选条件\n        if (state.filters.school) {\n          filteredTeachers = filteredTeachers.filter(teacher => \n            teacher.school.includes(state.filters.school)\n          );\n        }\n        \n        if (state.filters.major) {\n          filteredTeachers = filteredTeachers.filter(teacher => \n            teacher.major.includes(state.filters.major)\n          );\n        }\n        \n        if (state.filters.keyword) {\n          filteredTeachers = filteredTeachers.filter(teacher => \n            teacher.nickname.includes(state.filters.keyword) || \n            teacher.school.includes(state.filters.keyword) || \n            teacher.major.includes(state.filters.keyword)\n          );\n        }\n        \n        // 计算分页信息\n        const limit = state.pageSize;\n        const total = filteredTeachers.length;\n        const totalPages = Math.ceil(total / limit);\n        \n        // 切片获取当前页数据\n        const startIndex = (nextPage - 1) * limit;\n        const endIndex = startIndex + limit;\n        const pageTeachers = filteredTeachers.slice(startIndex, endIndex);\n        \n        commit(ADD_TEACHERS, {\n          list: pageTeachers,\n          pagination: {\n            page: nextPage,\n            pageSize: limit,\n            total: total,\n            totalPages: totalPages\n          }\n        });\n        \n        return { \n          success: true, \n          data: pageTeachers,\n          noMoreData: nextPage >= totalPages\n        };\n      }\n      \n      // 真实API调用\n      const response = await match.getRecommendedTeachers({\n        ...state.filters,\n        page: nextPage,\n        limit: state.pageSize\n      });\n      \n      if (!response.success) {\n        throw response.error || { message: '加载更多老师失败' };\n      }\n      \n      commit(ADD_TEACHERS, {\n        list: response.data.teachers || [],\n        pagination: {\n          page: nextPage,\n          pageSize: state.pageSize,\n          total: response.data.total || 0,\n          totalPages: Math.ceil((response.data.total || 0) / state.pageSize)\n        }\n      });\n      \n      return { \n        success: true, \n        data: response.data.teachers,\n        noMoreData: nextPage >= Math.ceil((response.data.total || 0) / state.pageSize)\n      };\n    } catch (error) {\n      console.error('加载更多老师失败:', error);\n      commit(SET_ERROR, error);\n      return { success: false, error };\n    } finally {\n      commit(SET_LOADING_MORE, false);\n    }\n  },\n  \n  /**\n   * @description 搜索老师\n   * @param {Object} context - Vuex上下文\n   * @param {Object} filters - 筛选条件\n   * @returns {Promise<Object>} 结果对象\n   */\n  async searchTeachers({ commit, state, dispatch }, filters = {}) {\n    // 先设置筛选条件\n    commit(SET_FILTERS, filters);\n    \n    // 重置页码\n    return dispatch('getTeachers', { page: 1, limit: state.pageSize });\n  },\n  \n  /**\n   * @description 重置筛选条件并获取老师列表\n   * @param {Object} context - Vuex上下文\n   * @returns {Promise<Object>} 结果对象\n   */\n  async resetAndGetTeachers({ commit, dispatch }) {\n    commit(RESET_FILTERS);\n    return dispatch('getTeachers', { page: 1 });\n  },\n  \n  /**\n   * @description 选择老师\n   * @param {Object} context - Vuex上下文\n   * @param {Number} id - 老师ID\n   */\n  selectTeacher({ commit }, id) {\n    commit(SET_SELECTED_TEACHER, id);\n  },\n  \n  /**\n   * @description 清除错误信息\n   * @param {Object} context - Vuex上下文\n   */\n  clearError({ commit }) {\n    commit(SET_ERROR, null);\n  },\n  \n  /**\n   * @description 设置导航类型\n   * @param {Object} context - Vuex上下文\n   * @param {String} type - 导航类型\n   */\n  setNavigationType({ commit }, type) {\n    commit(SET_NAVIGATION_TYPE, type);\n  },\n  \n  /**\n   * @description 设置为聊天导航类型\n   * @param {Object} context - Vuex上下文\n   */\n  navigateToChat({ commit }) {\n    commit(SET_NAVIGATION_TYPE, NAV_TYPE.CHAT);\n  },\n  \n  /**\n   * @description 设置为老师详情导航类型\n   * @param {Object} context - Vuex上下文\n   */\n  navigateToTeacherDetail({ commit }) {\n    commit(SET_NAVIGATION_TYPE, NAV_TYPE.TEACHER_DETAIL);\n  },\n  \n  /**\n   * @description 设置为默认导航类型\n   * @param {Object} context - Vuex上下文\n   */\n  navigateDefault({ commit }) {\n    commit(SET_NAVIGATION_TYPE, NAV_TYPE.DEFAULT);\n  },\n  \n  /**\n   * @description 根据导航类型判断是否需要清空筛选条件\n   * @param {Object} context - Vuex上下文\n   * @returns {Boolean} 是否执行了清空操作\n   */\n  handleNavigationExit({ state, commit, dispatch }) {\n    const navType = state.navigationType;\n    \n    // 如果是默认导航（即普通退出），则清空筛选条件\n    if (navType === NAV_TYPE.DEFAULT) {\n      commit(RESET_FILTERS);\n      return true;\n    }\n    \n    // 重置导航类型为默认，但不清空筛选条件\n    commit(SET_NAVIGATION_TYPE, NAV_TYPE.DEFAULT);\n    return false;\n  },\n  \n  /**\n   * @description 获取保存的导航类型\n   * @param {Object} context - Vuex上下文\n   * @returns {String} 导航类型\n   */\n  getSavedNavigationType({ commit }) {\n    try {\n      const navType = uni.getStorageSync(NAVIGATION_TYPE_KEY) || NAV_TYPE.DEFAULT;\n      commit(SET_NAVIGATION_TYPE, navType);\n      return navType;\n    } catch (e) {\n      console.error('获取导航类型失败', e);\n      return NAV_TYPE.DEFAULT;\n    }\n  },\n  \n  /**\n   * @description 清除导航类型\n   * @param {Object} context - Vuex上下文\n   */\n  clearNavigationType({ commit }) {\n    try {\n      uni.removeStorageSync(NAVIGATION_TYPE_KEY);\n      commit(SET_NAVIGATION_TYPE, NAV_TYPE.DEFAULT);\n    } catch (e) {\n      console.error('清除导航类型失败', e);\n    }\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n}; "],"names":["uni","state","mock","match.getRecommendedTeachers"],"mappings":"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"}